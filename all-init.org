##+TITLE: emacs init file of lhr
##+OPTIONS: toc:4 h:4

#from purcell, emacsrock, and so on.

* bootstrap
** install emacs on osx
brew tap railwaycat/emacsmacport
brew install emacs-mac

** set up init.el

* init env
** init path

#+BEGIN_SRC emacs-lisp



;;; This file bootstraps the configuration, which is divided into
;;; a number of other files.

(let ((minver "23.3"))
  (when (version<= emacs-version "23.1")
    (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
(when (version<= emacs-version "24")
  (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))

(add-to-list 'load-path (expand-file-name "mylisp" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

(defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer
(defconst *is-a-mac* (eq system-type 'darwin))


;;----------------------------------------------------------------------------
;; Which functionality to enable (use t or nil for true and false)
;;----------------------------------------------------------------------------
(setq *macbook-pro-support-enabled* t)
(setq *is-a-mac* (eq system-type 'darwin))
(setq *is-carbon-emacs* (and *is-a-mac* (eq window-system 'mac)))
(setq *is-cocoa-emacs* (and *is-a-mac* (eq window-system 'ns)))
(setq *win32* (eq system-type 'windows-nt) )
(setq *cygwin* (eq system-type 'cygwin) )
(setq *linux* (or (eq system-type 'gnu/linux) (eq system-type 'linux)) )
(setq *unix* (or *linux* (eq system-type 'usg-unix-v) (eq system-type 'berkeley-unix)) )
(setq *linux-x* (and window-system *linux*) )
(setq *xemacs* (featurep 'xemacs) )
(setq *emacs23* (and (not *xemacs*) (or (>= emacs-major-version 23))) )
(setq *emacs24* (and (not *xemacs*) (or (>= emacs-major-version 24))) )
(setq *no-memory* (cond
                   (*is-a-mac*
                    (< (string-to-number (nth 1 (split-string (shell-command-to-string "sysctl hw.physmem")))) 4000000000))
                   (*linux* nil)
                   (t nil)
                   ))




#+END_SRC





** init elpa
*** init-benchmarking.el  ;; Measure startup time

#+BEGIN_SRC emacs-lisp
(defun sanityinc/time-subtract-millis (b a)
  (* 1000.0 (float-time (time-subtract b a))))


(defvar sanityinc/require-times nil
  "A list of (FEATURE . LOAD-DURATION).
LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

(defadvice require
  (around build-require-times (feature &optional filename noerror) activate)
  "Note in `sanityinc/require-times' the time taken to require each feature."
  (let* ((already-loaded (memq feature features))
         (require-start-time (and (not already-loaded) (current-time))))
    (prog1
        ad-do-it
      (when (and (not already-loaded) (memq feature features))
        (add-to-list 'sanityinc/require-times
                     (cons feature
                           (sanityinc/time-subtract-millis (current-time)
                                                           require-start-time))
                     t)))))



(provide 'init-benchmarking)
#+END_SRC
*** init-compat.el
#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Provide a version of Emacs 24's 'string-prefix-p in older emacsen
;;----------------------------------------------------------------------------
(when (eval-when-compile (< emacs-major-version 24))
  (defun string-prefix-p (str1 str2 &optional ignore-case)
    "Return non-nil if STR1 is a prefix of STR2.
If IGNORE-CASE is non-nil, the comparison is done without paying attention
to case differences."
    (eq t (compare-strings str1 nil nil
                           str2 0 (length str1) ignore-case))))


;;----------------------------------------------------------------------------
;; Allow recent packages to safely pass an arg to 'called-interactively-p
;; in older Emacsen, including 23.1.
;;----------------------------------------------------------------------------
(let ((fn (symbol-function 'called-interactively-p)))
  (when (and (subrp fn) (zerop (cdr-safe (subr-arity fn))))
    (message "Warning: overriding called-interactively-p to support an argument.")
    (fset 'sanityinc/called-interactively-p fn)
    (defun called-interactively-p (&optional kind)
      "Overridden; see `sanityinc/called-interactively-p' for the wrapped function."
      (sanityinc/called-interactively-p))))

(when (eval-when-compile (< emacs-major-version 24))
  ;; Help package.el work in older Emacsen, where there's no TRASH arg
  ;; for 'delete-directory
  (message "Warning: overriding delete-directory to support TRASH argument.")
  (fset 'sanityinc/delete-directory (symbol-function 'delete-directory))
  (defun delete-directory (directory &optional recursive trash)
    "Overridden: see `sanityinc/delete-directory' for the wrapped function"
    (sanityinc/delete-directory directory recursive)))


;;----------------------------------------------------------------------------
;; Restore removed var alias, used by ruby-electric-brace and others
;;----------------------------------------------------------------------------
(unless (boundp 'last-command-char)
  (defvaralias 'last-command-char 'last-command-event))


(provide 'init-compat)
#+END_SRC
*** init-utils.el
#+BEGIN_SRC emacs-lisp
(if (fboundp 'with-eval-after-load)
    (defalias 'after-load 'with-eval-after-load)
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body))))


;;----------------------------------------------------------------------------
;; Handier way to add modes to auto-mode-alist
;;----------------------------------------------------------------------------
(defun add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))


;;----------------------------------------------------------------------------
;; String utilities missing from core emacs
;;----------------------------------------------------------------------------
(defun sanityinc/string-all-matches (regex str &optional group)
  "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
  (let ((result nil)
        (pos 0)
        (group (or group 0)))
    (while (string-match regex str pos)
      (push (match-string group str) result)
      (setq pos (match-end group)))
    result))

(defun sanityinc/string-rtrim (str)
  "Remove trailing whitespace from `STR'."
  (replace-regexp-in-string "[ \t\n]*$" "" str))


;;----------------------------------------------------------------------------
;; Find the directory containing a given library
;;----------------------------------------------------------------------------
(autoload 'find-library-name "find-func")
(defun sanityinc/directory-of-library (library-name)
  "Return the directory in which the `LIBRARY-NAME' load file is found."
  (file-name-as-directory (file-name-directory (find-library-name library-name))))


;;----------------------------------------------------------------------------
;; Delete the current file
;;----------------------------------------------------------------------------
(defun delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (or (buffer-file-name) (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))


;;----------------------------------------------------------------------------
;; Rename the current file
;;----------------------------------------------------------------------------
(defun rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (if (get-buffer new-name)
        (message "A buffer named '%s' already exists!" new-name)
      (progn
        (when (file-exists-p filename)
         (rename-file filename new-name 1))
        (rename-buffer new-name)
        (set-visited-file-name new-name)))))

;;----------------------------------------------------------------------------
;; Browse current HTML file
;;----------------------------------------------------------------------------
(defun browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (tramp-tramp-file-p file-name)
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))




(require 'cl)

(defmacro with-selected-frame (frame &rest forms)
  (let ((prev-frame (gensym))
        (new-frame (gensym)))
    `(progn
       (let* ((,new-frame (or ,frame (selected-frame)))
              (,prev-frame (selected-frame)))
         (select-frame ,new-frame)
         (unwind-protect
             (progn ,@forms)
           (select-frame ,prev-frame))))))

(defvar cached-normal-file-full-path nil)
(defun is-buffer-file-temp ()
  (interactive)
  "If (buffer-file-name) is nil or a temp file or HTML file converted from org file"
  (let ((f (buffer-file-name))
        org
        (rlt t))
    (cond
     ((not f)
      ;; file does not exist at all
      (setq rlt t))
     ((string= f cached-normal-file-full-path)
      (setq rlt nil))
     ((string-match (concat "^" temporary-file-directory) f)
      ;; file is create from temp directory
      (setq rlt t))
     ((and (string-match "\.html$" f)
           (file-exists-p (setq org (replace-regexp-in-string "\.html$" ".org" f))))
      ;; file is a html file exported from org-mode
      (setq rlt t))
     (t
      (setq cached-normal-file-full-path f)
      (setq rlt nil)))
    rlt))

(defun my-project-name-contains-substring (REGEX)
  (let ((dir (if (buffer-file-name)
                 (file-name-directory (buffer-file-name))
               "")))
    (string-match-p REGEX dir)))


(provide 'init-utils)
#+END_SRC
*** init-site-lisp.el
(require 'init-benchmarking) ;; Measure startup time

#+BEGIN_SRC emacs-lisp
  ;;; Set load path

  (eval-when-compile (require 'cl))
  (defun sanityinc/add-subdirs-to-load-path (parent-dir)
    "Adds every non-hidden subdir of PARENT-DIR to `load-path'."
    (let* ((default-directory parent-dir))
      (progn
        (setq load-path
              (append
               (remove-if-not
                (lambda (dir) (file-directory-p dir))
                (directory-files (expand-file-name parent-dir) t "^[^\\.]"))
               load-path)))))

  (sanityinc/add-subdirs-to-load-path
   (expand-file-name "site-lisp/" user-emacs-directory))

;;; Utilities for grabbing upstream libs

  (defun site-lisp-dir-for (name)
    (expand-file-name (format "site-lisp/%s" name) user-emacs-directory))

  (defun site-lisp-library-el-path (name)
    (expand-file-name (format "%s.el" name) (site-lisp-dir-for name)))

  (defun download-site-lisp-module (name url)
    (let ((dir (site-lisp-dir-for name)))
      (message "Downloading %s from %s" name url)
      (unless (file-directory-p dir)
        (make-directory dir t))
      (add-to-list 'load-path dir)
      (let ((el-file (site-lisp-library-el-path name)))
        (url-copy-file url el-file t nil)
        el-file)))

  (defun ensure-lib-from-url (name url)
    (unless (site-lisp-library-loadable-p name)
      (byte-compile-file (download-site-lisp-module name url))))

  (defun site-lisp-library-loadable-p (name)
    "Return whether or not the library `name' can be loaded from a
  source file under ~/.emacs.d/site-lisp/name/"
    (let ((f (locate-library (symbol-name name))))
      (and f (string-prefix-p (file-name-as-directory (site-lisp-dir-for name)) f))))



  ;; Download these upstream libs

  (unless (> emacs-major-version 23)
    (ensure-lib-from-url
     'package
     "http://repo.or.cz/w/emacs.git/blob_plain/ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09:/lisp/emacs-lisp/package.el"))


  (provide 'init-site-lisp)
#+END_SRC

#+RESULTS:

*** init-elpa.el
#+BEGIN_SRC emacs-lisp
;;; Find and load the correct package.el

;; When switching between Emacs 23 and 24, we always use the bundled package.el in Emacs 24
(let ((package-el-site-lisp-dir
       (expand-file-name "site-lisp/package" user-emacs-directory)))
  (when (and (file-directory-p package-el-site-lisp-dir)
             (> emacs-major-version 23))
    (message "Removing local package.el from load-path to avoid shadowing bundled version")
    (setq load-path (remove package-el-site-lisp-dir load-path))))

(require 'package)



;;; Standard package repositories

;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

;; We include the org repository for completeness, but don't normally
;; use it.
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

;;; Also use Melpa for most packages
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))



;; If gpg cannot be found, signature checking will fail, so we
;; conditionally enable it according to whether gpg is available. We
;; re-run this check once $PATH has been configured
(defun sanityinc/package-maybe-enable-signatures ()
  (setq package-check-signature (when (executable-find "gpg") 'allow-unsigned)))

(sanityinc/package-maybe-enable-signatures)
(after-load 'init-exec-path
  (sanityinc/package-maybe-enable-signatures))



;;; On-demand installation of packages

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))


(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install package `%s': %S" package err)
     nil)))


;;; Fire up package.el

(setq package-enable-at-startup nil)
(package-initialize)



(require-package 'fullframe)
(fullframe list-packages quit-window)


(require-package 'cl-lib)
(require 'cl-lib)

(defun sanityinc/set-tabulated-list-column-width (col-name width)
  "Set any column with name COL-NAME to the given WIDTH."
  (cl-loop for column across tabulated-list-format
           when (string= col-name (car column))
           do (setf (elt column 1) width)))

(defun sanityinc/maybe-widen-package-menu-columns ()
  "Widen some columns of the package menu table to avoid truncation."
  (when (boundp 'tabulated-list-format)
    (sanityinc/set-tabulated-list-column-width "Version" 13)
    (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
      (sanityinc/set-tabulated-list-column-width "Archive" longest-archive-name))))

(add-hook 'package-menu-mode-hook 'sanityinc/maybe-widen-package-menu-columns)


(provide 'init-elpa)
#+END_SRC
*** init-exec-path.el
#+BEGIN_SRC emacs-lisp
(require-package 'exec-path-from-shell)

(after-load 'exec-path-from-shell
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE"))
    (add-to-list 'exec-path-from-shell-variables var)))


(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))


;; shell-mode settings,
(unless (eq system-type 'windows-nt)
  (setq explicit-shell-file-name "/bin/bash")
  (setq shell-file-name "/bin/bash"))

(provide 'init-exec-path)
#+END_SRC


*** init-preload-local.el
#+BEGIN_SRC emacs-lisp
#+END_SRC
*** only require-package
#+BEGIN_SRC emacs-lisp :tangle no
#+END_SRC
#+BEGIN_SRC emacs-lisp
(require-package 'wgrep)
(require-package 'project-local-variables)
(require-package 'diminish)
(require-package 'scratch)
(require-package 'mwe-log-commands)

#+END_SRC
** key tranlate                                                                 :keymap:
#+begin_src emacs-lisp

(progn
  (keyboard-translate ?\C-o ?\C-d)
  (define-key key-translation-map (kbd "M-o") (kbd "M-d"))
  (define-key key-translation-map (kbd "C-M-o") (kbd "C-M-d"))
  (define-key key-translation-map (kbd "C-S-o") (kbd "C-S-d"))
  (define-key key-translation-map (kbd "M-S-o") (kbd "M-S-d"))
  (define-key key-translation-map (kbd "C-M-S-o") (kbd "C-M-S-d"))

  (keyboard-translate ?\C-d ?\C-o)
  (define-key key-translation-map (kbd "M-d") (kbd "M-o"))
  (define-key key-translation-map (kbd "C-S-d") (kbd "C-S-o"))
  (define-key key-translation-map (kbd "C-M-d") (kbd "C-M-o"))
  (define-key key-translation-map (kbd "M-S-d") (kbd "M-S-o"))
  (define-key key-translation-map (kbd "C-M-S-d") (kbd "C-M-S-o"))

  (keyboard-translate ?\C-y ?\C-v)
  (define-key key-translation-map (kbd "M-y") (kbd "M-v"))
  (define-key key-translation-map (kbd "C-S-y") (kbd "C-S-v"))
  (define-key key-translation-map (kbd "C-M-y") (kbd "C-M-v"))
  (define-key key-translation-map (kbd "M-S-y") (kbd "M-S-v"))
  (define-key key-translation-map (kbd "C-M-S-y") (kbd "C-M-S-v"))

  (keyboard-translate ?\C-v ?\C-y)
  (define-key key-translation-map (kbd "M-v") (kbd "M-y"))
  (define-key key-translation-map (kbd "C-S-v") (kbd "C-S-y"))
  (define-key key-translation-map (kbd "C-M-v") (kbd "C-M-y"))
  (define-key key-translation-map (kbd "M-S-v") (kbd "M-S-y"))
  (define-key key-translation-map (kbd "C-M-S-v") (kbd "C-M-S-y"))



  (keyboard-translate ?\C-j ?\C-n)
  (define-key key-translation-map (kbd "M-j") (kbd "M-n"))
  (define-key key-translation-map (kbd "C-S-j") (kbd "C-S-n"))
  (define-key key-translation-map (kbd "C-M-j") (kbd "C-M-n"))
  (define-key key-translation-map (kbd "M-S-j") (kbd "M-S-n"))
  (define-key key-translation-map (kbd "C-M-S-j") (kbd "C-M-S-n"))


  (keyboard-translate ?\C-k ?\C-p)
  (define-key key-translation-map (kbd "M-k") (kbd "M-p"))
  (define-key key-translation-map (kbd "C-S-k") (kbd "C-S-p"))
  (define-key key-translation-map (kbd "C-M-k") (kbd "C-M-p"))
  (define-key key-translation-map (kbd "M-S-k") (kbd "M-S-p"))
  (define-key key-translation-map (kbd "C-M-S-k") (kbd "C-M-S-p"))

  (keyboard-translate ?\C-h ?\C-b)
  (define-key key-translation-map (kbd "M-h") (kbd "M-b"))
  (define-key key-translation-map (kbd "C-S-h") (kbd "C-S-b"))
  (define-key key-translation-map (kbd "C-M-h") (kbd "C-M-b"))
  (define-key key-translation-map (kbd "M-S-h") (kbd "M-S-b"))
  (define-key key-translation-map (kbd "C-M-S-h") (kbd "C-M-S-b"))

  (keyboard-translate ?\C-l ?\C-f)
  (define-key key-translation-map (kbd "M-l") (kbd "M-f"))
  (define-key key-translation-map (kbd "C-S-l") (kbd "C-S-f"))
  (define-key key-translation-map (kbd "C-M-l") (kbd "C-M-f"))
  (define-key key-translation-map (kbd "M-S-l") (kbd "M-S-f"))
  (define-key key-translation-map (kbd "C-M-S-l") (kbd "C-M-S-f"))

  (keyboard-translate ?\C-f ?\C-l)
  (define-key key-translation-map (kbd "M-f") (kbd "M-l"))
  (define-key key-translation-map (kbd "C-S-f") (kbd "C-S-l"))
  (define-key key-translation-map (kbd "C-M-f") (kbd "C-M-l"))
  (define-key key-translation-map (kbd "M-S-f") (kbd "M-S-l"))
  (define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-l"))

  (keyboard-translate ?\C-b ?\C-h)
  (define-key key-translation-map (kbd "M-b") (kbd "M-h"))
  (define-key key-translation-map (kbd "C-S-b") (kbd "C-S-h"))
  (define-key key-translation-map (kbd "C-M-b") (kbd "C-M-h"))
  (define-key key-translation-map (kbd "M-S-b") (kbd "M-S-h"))
  (define-key key-translation-map (kbd "C-M-S-b") (kbd "C-M-S-h"))

  (keyboard-translate ?\C-p ?\C-k)
  (define-key key-translation-map (kbd "M-p") (kbd "M-k"))
  (define-key key-translation-map (kbd "C-S-p") (kbd "C-S-k"))
  (define-key key-translation-map (kbd "C-M-p") (kbd "C-M-k"))
  (define-key key-translation-map (kbd "M-S-p") (kbd "M-S-k"))
  (define-key key-translation-map (kbd "C-M-S-p") (kbd "C-M-S-k"))

  (keyboard-translate ?\C-n ?\C-j)
  (define-key key-translation-map (kbd "M-n") (kbd "M-j"))
  (define-key key-translation-map (kbd "C-S-n") (kbd "C-S-j"))
  (define-key key-translation-map (kbd "C-M-n") (kbd "C-M-j"))
  (define-key key-translation-map (kbd "M-S-n") (kbd "M-S-j"))
  (define-key key-translation-map (kbd "C-M-S-n") (kbd "C-M-S-j")))



#+end_src
** TODO defn                                                                    :keymap:
*** lhr/defun
#+begin_src emacs-lisp

;;可以改善, 可以先写一个接受 mode 列表的函数, 然后再定义这个函数
(require-package  'use-package)


;;http://emacs.stackexchange.com/questions/352/how-to-override-major-mode-bindings/358#358

(require 'use-package)
(require 'bind-key)

    ;; todo: 写函数, lambda

        ;;;###autoload

(defun eal-define-keys-commonly (keymap key-defs)
  "execute `define-key' on keymap use arguments from key-defs.

        key-defs should be one list, every element of it is a list
        whose first element is key like argument of `define-key', and second element is command
        like argument of `define-key'."
  (dolist (key-def key-defs)
    (when key-def
      (define-key keymap (eval `(kbd ,(car key-def))) (nth 1 key-def)))))
    (defalias 'apply-define-key 'eal-define-keys-commonly)


    (require 'recent-jump-settings)

(defun lhr/switch-to-cut-past-tmp-file ()
  (if (not (get-buffer "lhr.cut-paste-tmp"))
      (find-file (expand-file-name "lhr.cut-paste-tmp" user-emacs-directory))
    (set-buffer "lhr.cut-paste-tmp")
    )
)

(defun lhr/cut-inter-scratch ()
  "c-w to scratch and switch back"
  (interactive)
  (if (string= (buffer-name) "lhr.cut-paste-tmp")
      (save-window-excursion
      (save-excursion
        (call-interactively (global-key-binding "\C-w"))
        (select-window-1)
        (call-interactively (global-key-binding "\C-y"))
        ))
      (save-window-excursion
      (save-excursion
        (save-restriction
          (save-match-data
            (call-interactively (global-key-binding "\C-w"))
            (lhr/switch-to-cut-past-tmp-file)
            (call-interactively (global-key-binding "\C-y"))
            ))))))

(defun lhr/copy-inter-scratch ()
  "M-w to scratch and switch back"
  (interactive)
  (if (string= (buffer-name) "lhr.cut-paste-tmp")
      (save-window-excursion
      (save-excursion
        (call-interactively (global-key-binding "\M-w"))
        (select-window-1)
        (call-interactively (global-key-binding "\C-y"))
        ))
      (save-window-excursion
      (save-excursion
        (save-restriction
          (save-match-data
            (call-interactively (global-key-binding "\M-w"))
            (lhr/switch-to-cut-past-tmp-file)
            (call-interactively (global-key-binding "\C-y"))
            ))))))

;;call-interactively  http://emacs.stackexchange.com/questions/2461/how-can-i-simulate-an-arbitary-key-event-from-elisp

(global-set-key (kbd "<f5>") 'lhr/copy-inter-scratch)
(global-set-key (kbd "<f6>") 'lhr/cut-inter-scratch)



;;  some sentence
;;(save-excursion  body)
;;(save-restriction)
;;(save-match-data)
;;(save-window-excursion)
;;(setq temp-point (point))
;;(goto-char temp-point)
;;(setq temp-buffer (current-buffer))
;;(goto-char temp-buffer)

#+END_SRC

覆盖所有的快捷键. my-define-keys-every-mode
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
(require 'help-mode)
(defun my-define-keys-every-mode (keystring funcdd)
  "define keys every where"

  (global-set-key (kbd keystring) funcdd)


  (define-key help-mode-map (kbd keystring) funcdd)
  (define-key org-mode-map (kbd keystring) funcdd)
  (define-key minibuffer-local-map (kbd keystring) funcdd)

  (if (boundp 'evil-mode)
    (progn (define-key evil-insert-state-map (kbd keystring) funcdd)
            (define-key evil-visual-state-map (kbd keystring) funcdd)
            (define-key evil-emacs-state-map (kbd keystring) funcdd)
            (define-key evil-normal-state-map (kbd keystring) funcdd) ))
  )
;;这里总是有问题, 引用, eval, 字符等还是不清楚
;;      (bind-keys*
;;       (keystring . 'funcdd))

#+END_SRC

对 org 代码块操作, split and wrap blocks
#+BEGIN_SRC emacs-lisp :tangle no

(defun lhr/split-blocks ()
  (interactive "p")
  (insert "hello")


  )


#+end_src
*** bookmark
#+BEGIN_SRC emacs-lisp
(my-define-keys-every-mode "<f9>" 'bookmark-set)
(my-define-keys-every-mode "S-<f9>" 'helm-bookmarks)
;;(my-define-keys-every-mode "<f9>" 'bookmark-set)

#+END_SRC

*** buffer

*** init-utils.el
#+BEGIN_SRC emacs-lisp

#+END_SRC

** other


;;;; ;;----------------------------------------------------------------------------
;;;; ;; Less GC, more memor
;;;; ;;----------------------------------------------------------------------------
;;;; ;; By default Emacs will initiate GC every 0.76 MB allocated
;;;; ;; (gc-cons-threshold == 800000).
;;;; ;; we increase this to 1GB (gc-cons-threshold == 100000000)
;;;; ;; @see http://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html
;;;; (setq-default gc-cons-threshold 100000000
;;;;               gc-cons-percentage 0.5)
;;;;

*** COMMENT init-keyfreq.el


* frame
** OS, FRAME

;;;;(require 'init-maxframe)

;;;; (require 'init-modeline)
;;;;(require 'init-move-window-buffer)

*** init-frame-hooks.el
#+BEGIN_SRC emacs-lisp
(defvar after-make-console-frame-hooks '()
  "Hooks to run after creating a new TTY frame")
(defvar after-make-window-system-frame-hooks '()
  "Hooks to run after creating a new window-system frame")

(defun run-after-make-frame-hooks (frame)
  "Run configured hooks in response to the newly-created FRAME.
Selectively runs either `after-make-console-frame-hooks' or
`after-make-window-system-frame-hooks'"
  (with-selected-frame frame
    (run-hooks (if window-system
                   'after-make-window-system-frame-hooks
                 'after-make-console-frame-hooks))))

(add-hook 'after-make-frame-functions 'run-after-make-frame-hooks)

(defconst sanityinc/initial-frame (selected-frame)
  "The frame (if any) active during Emacs initialization.")

(add-hook 'after-init-hook
          (lambda () (when sanityinc/initial-frame
                  (run-after-make-frame-hooks sanityinc/initial-frame))))


(provide 'init-frame-hooks)
#+END_SRC
*** init-xterm.el
#+BEGIN_SRC emacs-lisp
(require 'init-frame-hooks)

(defun fix-up-xterm-control-arrows ()
  (let ((map (if (boundp 'input-decode-map)
                 input-decode-map
               function-key-map)))
    (define-key map "\e[1;5A" [C-up])
    (define-key map "\e[1;5B" [C-down])
    (define-key map "\e[1;5C" [C-right])
    (define-key map "\e[1;5D" [C-left])
    (define-key map "\e[5A"   [C-up])
    (define-key map "\e[5B"   [C-down])
    (define-key map "\e[5C"   [C-right])
    (define-key map "\e[5D"   [C-left])))

(global-set-key [mouse-4] (lambda () (interactive) (scroll-down 1)))
(global-set-key [mouse-5] (lambda () (interactive) (scroll-up 1)))

(defun sanityinc/console-frame-setup ()
  (when (< emacs-major-version 23)
    (fix-up-xterm-control-arrows))
  (xterm-mouse-mode 1) ; Mouse in a terminal (Use shift to paste with middle button)
  (when (fboundp 'mwheel-install)
    (mwheel-install)))



(add-hook 'after-make-console-frame-hooks 'sanityinc/console-frame-setup)

(provide 'init-xterm)
#+END_SRC
*** init-gui-frames.el
#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Stop C-z from minimizing windows under OS X
;;----------------------------------------------------------------------------
(defun maybe-suspend-frame ()
  (interactive)
  (unless (and *is-a-mac* window-system)
    (suspend-frame)))

(global-set-key (kbd "C-z") 'maybe-suspend-frame)


;;----------------------------------------------------------------------------
;; Suppress GUI features
;;----------------------------------------------------------------------------
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)


;;----------------------------------------------------------------------------
;; Show a marker in the left fringe for lines not in the buffer
;;----------------------------------------------------------------------------
(setq indicate-empty-lines t)


;;----------------------------------------------------------------------------
;; Window size and features
;;----------------------------------------------------------------------------
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))

(let ((no-border '(internal-border-width . 0)))
  (add-to-list 'default-frame-alist no-border)
  (add-to-list 'initial-frame-alist no-border))

(defun sanityinc/adjust-opacity (frame incr)
  (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

(when (and *is-a-mac* (fboundp 'toggle-frame-fullscreen))
  ;; Command-Option-f to toggle fullscreen mode
  ;; Hint: Customize `ns-use-native-fullscreen'
  (global-set-key (kbd "M-ƒ") 'toggle-frame-fullscreen))

(global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
(global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
(global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

(add-hook 'after-make-frame-functions
          (lambda (frame)
            (with-selected-frame frame
              (unless window-system
                (set-frame-parameter nil 'menu-bar-lines 0)))))

(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;; Non-zero values for `line-spacing' can mess up ansi-term and co,
;; so we zero it explicitly in those cases.
(add-hook 'term-mode-hook
          (lambda ()
            (setq line-spacing 0)))


(provide 'init-gui-frames)
#+END_SRC
*** init-osx-keys.el
#+BEGIN_SRC emacs-lisp
(when *is-a-mac*
  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)
  (setq default-input-method "MacOSX")
  ;; Make mouse wheel / trackpad scrolling less jerky
  (setq mouse-wheel-scroll-amount '(1
                                    ((shift) . 5)
                                    ((control))))
  (dolist (multiple '("" "double-" "triple-"))
    (dolist (direction '("right" "left"))
      (global-set-key (kbd (concat "<" multiple "wheel-" direction ">")) 'ignore)))
  (global-set-key (kbd "M-`") 'ns-next-frame)
  (global-set-key (kbd "M-h") 'ns-do-hide-emacs)
  (global-set-key (kbd "M-˙") 'ns-do-hide-others)
  (after-load 'nxml-mode
    (define-key nxml-mode-map (kbd "M-h") nil))
  (global-set-key (kbd "M-ˍ") 'ns-do-hide-others) ;; what describe-key reports for cmd-option-h
  )


(provide 'init-osx-keys)
#+END_SRC
*** init-proxies.el
#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Pick up http_proxy & https_proxy from Mac system config using proxy-config
;; tool available from
;; http://www.cs.usyd.edu.au/~massad/project-proxy-config.html
;;----------------------------------------------------------------------------
(when (and *is-a-mac* (executable-find "proxy-config"))
  (defun mac-configured-proxy (proto)
    (sanityinc/string-rtrim
     (shell-command-to-string
      (concat "proxy-config " (cdr (assoc-string proto '(("http" . "-h") ("https" . "-s"))))))))

  (defun extract-host-and-port (url-string)
    (if (string-match "^[a-z]+://\\([^/]+\\)" url-string)
      (match-string 1 url-string)
      url-string))

  (defun assq-delete-all-with-test (k l &optional test)
    (let ((test-func (or test #'eq)))
      (loop for entry in l
            unless (funcall test-func k (car entry))
            collect entry)))

  (defun mac-set-proxy-vars ()
    (interactive)
    (require 'url)
    (loop for proto in '("http" "https")
          for proxy = (mac-configured-proxy proto)
          do
          (setenv (concat proto "_proxy" proxy))
          (setq url-proxy-services
                (append (assq-delete-all-with-test proto url-proxy-services #'equal)
                        (if (not (equal "" proxy)) (list (cons proto (extract-host-and-port proxy)))))))
    (message "proxy variables updated")))


(provide 'init-proxies)
#+END_SRC


*** COMMENT init-tabbar-ruler.el
#+BEGIN_SRC emacs-lisp :tangle no



(setq tabbar-ruler-global-tabbar t) ; If you want tabbar
(setq tabbar-ruler-global-ruler nil) ; if you want a global ruler
(setq tabbar-ruler-popup-menu nil) ; If you want a popup menu.
(setq tabbar-ruler-popup-toolbar nil) ; If you want a popup toolbar
(setq tabbar-ruler-popup-scrollbar nil) ; If you want to only show the
                                        ; scroll bar when your mouse is moving.
(require-package 'tabbar-ruler)

;; https://github.com/mlf176f2/tabbar-ruler.el/issues/10
(setq tabbar-ruler-movement-timer-delay 1000000)


(global-set-key (kbd "C-S-<tab>") 'tabbar-backward)
(global-set-key (kbd "C-<tab>") 'tabbar-forward)
(global-set-key (kbd "C-s-<tab>") 'tabbar-backward-group)
(global-set-key (kbd "C-s-S-<tab>") 'tabbar-forward-group)
(setq tabbar-cycling-scope (quote tabs))
(setq tabbar-use-images nil)


(defface tabbar-selected-modified
  '((t
     :inherit tabbar-selected
     ;; :foreground "red2"
     :foreground "DarkOrange2"
     :weight bold
     ))
  "Face used for selected tabs."
  :group 'tabbar)

;; (defface tabbar-unselected-modified
;;   '((t
;;      :inherit tabbar-unselected
;;      :foreground "red2"
;;      :weight bold
;;      ))
;;    "Face used for unselected tabs."
;;   :group 'tabbar)

;
; * Changing how tabbar groups files/buffers
; The default behavior for tabbar-ruler is to group the tabs by frame.
; You can change this back to the old-behavior by:

 ; (tabbar-ruler-group-buffer-groups)
;
; or by issuing the following code:


;  (setq tabbar-buffer-groups-function 'tabbar-buffer-groups)


; In addition, you can also group by projectile project easily by:


;  (tabbar-ruler-group-by-projectile-project)

; * Adding key-bindings to tabbar-ruler
; You can add key-bindings to change the current tab.  The easiest way
; to add the bindings is to add a key like:

  (global-set-key (kbd "C-c t") 'tabbar-ruler-move)


; After that, all you would need to press is Control+c t and then the
; arrow keys will allow you to change the buffer quite easily.  To exit
; the buffer movement you can press enter or space.





(require 'tabbar-ruler)

(provide 'init-tabbar-ruler)
#+END_SRC
*** COMMENT init-revive.el
#+BEGIN_SRC emacs-lisp :tangle no
(require-package 'revive)

(autoload 'save-current-configuration "revive" "Save status" t)
(autoload 'resume "revive" "Resume Emacs" t)
(autoload 'wipe "revive" "Wipe Emacs" t)
(define-key ctl-x-map "S" 'save-current-configuration)
(define-key ctl-x-map "R" 'resume)
(define-key ctl-x-map "K" 'wipe)
;;(setq revive:configuration-file "~/.emacs.d/.revive") ;窗口布局管理保存文件

(require 'revive)
;;emacs 退出时候保存到档案 1,emacs 启动时载入档案 1
(add-hook 'kill-emacs-hook 'save-current-configuration)
(resume)

(provide 'init-revive)

#+END_SRC
*** init-projectile.el
#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-enable-caching t)


;;file: /users/lhr/_pr/ed/red/elpa/helm-projectile-0.11.0/
;;changing helm-buffer-match-major-mode to helm-buffers-list--match-fn fixed this issue. you should update it so helm-projectile is functional again.
;;https://github.com/bbatsov/projectile/issues/358



(provide 'init-projectile)
#+end_src
** session
;;windows.el, 重启后补全不能用的问题可以用自定义 exit-emacs 函数并重新绑定, 代替 add-hook 来解决, 以后可以尝试
                                        ;(require 'init-windowsel)
;; (require 'init-persp-mode)
;;desktop
;; (require 'init-sessions)
;;项目管理现在用 projectile, 在同一个 frame 里面就可以了. 用 revive 保存当前窗口和 buffer, projectie 公用一个 frame.
;; 然后就是可以尝试用 perspective, 可以保存 buffer,
;;  解决项目内 anything 搜索的问题.  实现 sublime 的 goto anything  和 goto tag in project
;; sublime 的 find in project  可以用 ag 来解决.
;; 同文件的搜索可以用 helm-swoop, 或者 isearch, helm-mini 也可以进入 moccor 模式实现多文件 swoop 功能.
;; 以后看到了就记下来.

*** init-sessions.el
#+begin_src emacs-lisp :tangle no
;; save a list of open files in ~/.emacs.d/.emacs.desktop
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)
(defadvice desktop-read (around trace-desktop-errors activate)
  (let ((debug-on-error t))
    ad-do-it))

(defadvice desktop-read (around time-restore activate)
    (let ((start-time (current-time)))
      (prog1
          ad-do-it
        (message "desktop restored in %.2fms"
                 (sanityinc/time-subtract-millis (current-time)
                                                 start-time)))))

(defadvice desktop-create-buffer (around time-create activate)
  (let ((start-time (current-time))
        (filename (ad-get-arg 1)))
    (prog1
        ad-do-it
      (message "desktop: %.2fms to restore %s"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)
               (when filename
                 (abbreviate-file-name filename))))))

;;----------------------------------------------------------------------------
;; restore histories and registers after saving
;;----------------------------------------------------------------------------
(setq-default history-length 1000)
(savehist-mode t)

(require-package 'session)

(setq session-save-file (expand-file-name ".session" user-emacs-directory))
(add-hook 'after-init-hook 'session-initialize)

;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))

(when (eval-when-compile (and (>= emacs-major-version 24)
                              (version< emacs-version "24.3.50")
                              ))
  (unless (boundp 'desktop-restore-frames)
    (require-package 'frame-restore)
    (frame-restore)))


(provide 'init-sessions)
#+end_src


*** comment init-powerline.el

#+begin_src emacs-lisp :tangle no
(require-package 'powerline)

(require 'powerline)

(provide 'init-powerline)
#+end_src
*** comment init-moe-theme.el
#+begin_src emacs-lisp :tangle no
(require-package 'moe-theme)

(require 'moe-theme)

;;(setq moe-theme-resize-markdown-title '(2.0 1.7 1.5 1.3 1.0 1.0))
(setq moe-theme-resize-org-title '(2.2 1.8 1.6 1.4 1.2 1.0 1.0 1.0 1.0))
(setq moe-theme-resize-rst-title '(2.0 1.7 1.5 1.3 1.1 1.0))

;;  (require 'moe-theme-switcher)
;;  (setq moe-theme-highlight-buffer-id 1)
(setq moe-light-pure-white-background-in-terminal t)
(setq moe-theme-mode-line-color 'purple)
(moe-light)
(powerline-moe-theme)
;(load-theme 'moe-light t)

;; (let ((class '((class color) (min-colors 89)))
;;       ;; palette colors.
;;       (yellow-1 "#fce94f") (yellow-2 "#ffd700") (yellow-3 "#c4a000") (yellow-4 "#875f00")
;;       (orange-1 "#ffaf5f") (orange-2 "#ff8700") (orange-3 "#ff5d17") (orange-4 "#d75f00")
;;       (magenta-1 "#ff7bbb") (magenta-2 "#ff4ea3") (magenta-3 "#ff1f8b")
;;       (green-1 "#afff00") (green-2 "#a1db00") (green-3 "#00af00") (green-4 "#008700") (green-5 "#005f00")
;;       (blue-1 "#5fafd7") (blue-2 "#1f5bff") (blue-3 "#005f87") (blue-4 "#005faf") (blue-5 "#0000af")
;;       (cyan-1 "#87ffff") (cyan-2 "#5fd7af") (cyan-3 "#00d7af") (cyan-4 "#00ac8a") (cyan-5 "#5faf87") (cyan-6 "#005f5f") (cyan-7 "#005f87") (cyan-8 "#00af87")
;;       (purple-1 "#d18aff") (purple-2 "#9a08ff") (purple-3 "#6c0099") (purple-4 "#6c0099")
;;       (red-1 "#ef2929")  (red-2 "#cc0000")  (red-3 "#a40000")
;;       (white-1 "#eeeeee") (white-2 "#dadada") (white-3 "#c6c6c6") (white-4 "#b2b2b2") (black-1 "#9e9e9e")
;;       (black-2 "#8a8a8a") (black-3 "#767676") (black-4 "#626262") (black-5 "#5f5f5f") (black-6 "#3a3a3a")
;;       (light_bg "#fdfde7") (white-0 "#ffffff")
;;       (green-02 "#5fd700") (green-01 "#d7ff00") (green-0 "#d7ff5f") (green-00 "#d7ff87")
;;       (blue-01 "#c3c9f8") (blue-0 "#afd7ff") (blue-00 "#d7d7ff") (blue-000 "#d4e5ff")
;;       (yellow-0 "#ffff87") (yellow-00 "#ffffaf") (yellow-2-5 "#ffba27")
;;       (purple-0 "#af87ff") (purple-00 "#e6a8df")
;;       (red-0 "#ff4b4b") (red-00 "#ffafaf") (red-000 "#ffd5e5")
;;       (magenta-0 "#ffafd7") (magenta-00 "#ffd7ff")
;;       (orange-0 "#ffaf87") (orange-00 "#ffd787") (orange-000 "#ffd7af")
;;       (linum-dark "#87875f") (linum-light "#d7d7af")
;;       )


;;   (custom-theme-set-faces
;;    'moe-light
;;    ;; ensure sufficient contrast on low-color terminals.
;;    `(default ((((class color) (min-colors 4096))
;;                (:foreground ,black-5 :background ,light_bg))
;;               (((class color) (min-colors 256))
;;                (:foreground ,black-5 :background ,light_bg))
;;               (,class
;;                (:foreground ,black-5 :background ,light_bg))))
;;    `(org-block ((,class (:foreground ,blue-3 :background ,blue-00))))
;;    `(org-block-background ((,class (:background ,white-1))))
;;    `(org-block-begin-line ((,class (:foreground ,blue-3 :background ,blue-0))))
;;    `(org-block-end-line ((,class (:foreground ,white-2 :background ,white-1))))
;;    ))

(provide 'init-moe-theme)
#+end_src
*** comment init-sublimity.el
#+begin_src emacs-lisp :tangle no
(require-package 'sublimity)
(require 'sublimity)

(sublimity-mode t)
;; (require 'sublimity-scroll)
(setq sublimity-scroll-weight 7
      sublimity-scroll-drift-length 3)

;; (require 'sublimity-map)




(provide 'init-sublimity)
#+end_src
*** comment init-elscreen.el

#+begin_src emacs-lisp
;;; elscreen-settings.el ---

;; copyright (c) 2011 free software foundation, inc.
;;
;; author: luhaorui <luhaorui@gmail.com>
;; maintainer: luhaorui <luhaorui@gmail.com>
;; created: 15 nov 2011
;; version: 0.01
;; keywords

;; this program is free software; you can redistribute it and/or modify
;; it under the terms of the gnu general public license as published by
;; the free software foundation; either version 2, or (at your option)
;; any later version.
;;
;; this program is distributed in the hope that it will be useful,
;; but without any warranty; without even the implied warranty of
;; merchantability or fitness for a particular purpose.  see the
;; gnu general public license for more details.
;;
;; you should have received a copy of the gnu general public license
;; along with this program; if not, write to the free software
;; foundation, inc., 675 mass ave, cambridge, ma 02139, usa.

;;; commentary:

;;

;; put this file into your load-path and the following into your ~/.emacs:
;;   (require 'elscreen-settings)

;;; code:

;; (eval-when-compile
;;   (require 'cl))


(setq   elscreen-tab-display-kill-screen 'left)
(setq   elscreen-display-tab nil)
(setq elscreen-prefix-key (kbd "C-h"))


(require-package 'elscreen)
(require 'elscreen)
(elscreen-start)

(require-package 'elscreen-persist )
(require 'elscreen-persist )
(elscreen-persist-mode 1)

                                        ;(require-package 'evil-tabs )
                                        ;(require 'evil-tabs )
                                        ;(global-evil-tabs-mode t)


;; (require-package 'frame-restore )
;; (require 'frame-restore )
;; (frame-restore-mode)
;; (desktop-save-mode)

;; (defun elscreen-frame-title-update ()
;;    (when (elscreen-screen-modified-p 'elscreen-frame-title-update)
;;      (let* ((screen-list (sort (elscreen-get-screen-list) '<))
;;        (screen-to-name-alist (elscreen-get-screen-to-name-alist))
;;        (title (mapconcat
;;            (lambda (screen)
;;              (format "%d%s %s"
;;                  screen (elscreen-status-label screen)
;;                  (get-alist screen screen-to-name-alist)))
;;            screen-list " ")))
;;        (if (fboundp 'set-frame-name)
;;       (set-frame-name title)
;;     (setq frame-title-format title)))))

;;  (eval-after-load "elscreen"
;;    '(add-hook 'elscreen-screen-update-hook 'elscreen-frame-title-update))
;; (load "elscreen" "elscreen" t)
;; (require 'elscreen-dired)
;; ;;(require 'elscreen-server)
;; (require 'elscreen-speedbar)
;; (require 'elscreen-color-theme)
;; (require 'elscreen-gf)





;; (define-key elscreen-map [?\h-j] 'elscreen-previous)
;; (define-key elscreen-map "j"    'elscreen-previous)
;; (define-key elscreen-map "\C-l" 'elscreen-next)
;; (define-key elscreen-map "l"    'elscreen-next)
;; (define-key elscreen-map "\C-z" 'elscreen-toggle)
;; (define-key elscreen-map "z"    'elscreen-toggle)
;; (define-key elscreen-map "\C-b"    'elscreen-find-and-goto-by-buffer)
;; (define-key elscreen-map "\C-a" 'elscreen-display-screen-name-list)
;; (define-key elscreen-map "a"    'elscreen-display-screen-name-list)

;; (global-set-key  [?\C-9] 'elscreen-previous)
;; (global-set-key  [?\C-0]   'elscreen-next)
;; (global-set-key  [?\C-8]   'elscreen-kill)


(provide 'init-elscreen)
;;; elscreen-settings.el ends here
#+end_src
*** comment init-persp-mode.el
#+begin_src emacs-lisp :tangle no
(require-package 'persp-mode)
(require 'persp-mode)


; (with-eval-after-load "persp-mode-autoloads"
;   (setq wg-morph-on nil) ;; switch off animation of restoring window configuration
;   (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))

(provide 'init-persp-mode)
#+end_src
*** comment init-sessions.el
#+begin_src emacs-lisp :tangle no
;; save a list of open files in ~/.emacs.d/.emacs.desktop
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)
(defadvice desktop-read (around trace-desktop-errors activate)
  (let ((debug-on-error t))
    ad-do-it))

(defadvice desktop-read (around time-restore activate)
    (let ((start-time (current-time)))
      (prog1
          ad-do-it
        (message "desktop restored in %.2fms"
                 (sanityinc/time-subtract-millis (current-time)
                                                 start-time)))))

(defadvice desktop-create-buffer (around time-create activate)
  (let ((start-time (current-time))
        (filename (ad-get-arg 1)))
    (prog1
        ad-do-it
      (message "desktop: %.2fms to restore %s"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)
               (when filename
                 (abbreviate-file-name filename))))))

;;----------------------------------------------------------------------------
;; restore histories and registers after saving
;;----------------------------------------------------------------------------
(setq-default history-length 1000)
(savehist-mode t)

(require-package 'session)

(setq session-save-file (expand-file-name ".session" user-emacs-directory))
(add-hook 'after-init-hook 'session-initialize)

;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))

(when (eval-when-compile (and (>= emacs-major-version 24)
                              (version< emacs-version "24.3.50")
                              ))
  (unless (boundp 'desktop-restore-frames)
    (require-package 'frame-restore)
    (frame-restore)))


(provide 'init-sessions)
#+end_src
** window
*** init-windows.el
#+begin_src emacs-lisp
;;----------------------------------------------------------------------------
;; navigate window layouts with "c-c <left>" and "c-c <right>"
;;----------------------------------------------------------------------------
(winner-mode 1)




;; make "C-x o" prompt for a target window when there are more than 2
(require-package 'switch-window)
(require 'switch-window)
(setq switch-window-shortcut-style 'alphabet)
(global-set-key (kbd "C-x o") 'switch-window)


;;----------------------------------------------------------------------------
;; when splitting window, show (other-buffer) in the new window
;;----------------------------------------------------------------------------
(defun split-window-func-with-other-buffer (split-function)
  (lexical-let ((s-f split-function))
    (lambda ()
      (interactive)
      (funcall s-f)
      (set-window-buffer (next-window) (other-buffer)))))

(global-set-key "\C-x2" (split-window-func-with-other-buffer 'split-window-vertically))
(global-set-key "\C-x3" (split-window-func-with-other-buffer 'split-window-horizontally))

(defun sanityinc/toggle-delete-other-windows ()
  "delete other windows in frame if any, or restore previous window config."
  (interactive)
  (if (and winner-mode
           (equal (selected-window) (next-window)))
      (winner-undo)
    (delete-other-windows)))

(global-set-key "\C-x1" 'sanityinc/toggle-delete-other-windows)

;;----------------------------------------------------------------------------
;; rearrange split windows
;;----------------------------------------------------------------------------
(defun split-window-horizontally-instead ()
  (interactive)
  (save-excursion
    (delete-other-windows)
    (funcall (split-window-func-with-other-buffer 'split-window-horizontally))))

(defun split-window-vertically-instead ()
  (interactive)
  (save-excursion
    (delete-other-windows)
    (funcall (split-window-func-with-other-buffer 'split-window-vertically))))

(global-set-key "\C-x|" 'split-window-horizontally-instead)
(global-set-key "\C-x_" 'split-window-vertically-instead)


;; borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
(defun sanityinc/split-window()
  "split the window to see the most recent buffer in the other window.
call a second time to restore the original window configuration."
  (interactive)
  (if (eq last-command 'sanityinc/split-window)
      (progn
        (jump-to-register :sanityinc/split-window)
        (setq this-command 'sanityinc/unsplit-window))
    (window-configuration-to-register :sanityinc/split-window)
    (switch-to-buffer-other-window nil)))

(global-set-key (kbd "C-<f7>") 'sanityinc/split-window)
(global-set-key (kbd "C-<f6>")
                (lambda ()
                  (interactive)
                  (switch-to-buffer nil)))


(provide 'init-windows)
#+end_src
** complete and editing ui
*** init-isearch.el
#+begin_src emacs-lisp
;; show number of matches while searching
(when (maybe-require-package 'anzu)
  (global-anzu-mode t)
  (diminish 'anzu-mode)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
  (global-set-key [remap query-replace] 'anzu-query-replace))

;; activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)

;; del during isearch should edit the search string, not jump back to the previous result
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)

;; search back/forth for the symbol at point
;; see http://www.emacswiki.org/emacs/searchatpoint
(defun isearch-yank-symbol ()
  "*put symbol at current point into search string."
  (interactive)
  (let ((sym (symbol-at-point)))
    (if sym
        (progn
          (setq isearch-regexp t
                isearch-string (concat "\\_<" (regexp-quote (symbol-name sym)) "\\_>")
                isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                isearch-yank-flag t))
      (ding)))
  (isearch-search-and-update))

(define-key isearch-mode-map "\C-\M-w" 'isearch-yank-symbol)


;; http://www.emacswiki.org/emacs/zaptoisearch
(defun zap-to-isearch (rbeg rend)
  "kill the region between the mark and the closest portion of
the isearch match string. the behaviour is meant to be analogous
to zap-to-char; let's call it zap-to-isearch. the deleted region
does not include the isearch word. this is meant to be bound only
in isearch mode.  the point of this function is that oftentimes
you want to delete some portion of text, one end of which happens
to be an active isearch word. the observation to make is that if
you use isearch a lot to move the cursor around (as you should,
it is much more efficient than using the arrows), it happens a
lot that you could just delete the active region between the mark
and the point, not include the isearch word."
  (interactive "r")
  (when (not mark-active)
    (error "mark is not active"))
  (let* ((isearch-bounds (list isearch-other-end (point)))
         (ismin (apply 'min isearch-bounds))
         (ismax (apply 'max isearch-bounds))
         )
    (if (< (mark) ismin)
        (kill-region (mark) ismin)
      (if (> (mark) ismax)
          (kill-region ismax (mark))
        (error "internal error in isearch kill function.")))
    (isearch-exit)
    ))

(define-key isearch-mode-map [(meta z)] 'zap-to-isearch)


;; http://www.emacswiki.org/emacs/zaptoisearch
(defun isearch-exit-other-end (rbeg rend)
  "exit isearch, but at the other end of the search string.
this is useful when followed by an immediate kill."
  (interactive "r")
  (isearch-exit)
  (goto-char isearch-other-end))

(define-key isearch-mode-map [(control return)] 'isearch-exit-other-end)


(provide 'init-isearch)
#+end_src
*** init-grep.el
#+begin_src emacs-lisp
(setq-default grep-highlight-matches t
              grep-scroll-output t)

(when *is-a-mac*
  (setq-default locate-command "mdfind"))

(when (executable-find "ag")
  (require-package 'ag)
  (require-package 'wgrep-ag)
  (setq-default ag-highlight-search t)
  (global-set-key (kbd "M-?") 'ag-project))


(provide 'init-grep)
#+end_src
*** init-flycheck.el
#+begin_src emacs-lisp
(when (maybe-require-package 'flycheck)
  (add-hook 'after-init-hook 'global-flycheck-mode)

  ;; override default flycheck triggers
  (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)
        flycheck-idle-change-delay 0.8)

  (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))


(provide 'init-flycheck)
#+end_src
*** init-hippie-expand.el
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill))

(provide 'init-hippie-expand)
#+end_src
*** init-mmm.el
#+begin_src emacs-lisp
;;----------------------------------------------------------------------------
;; multiple major modes
;;----------------------------------------------------------------------------
(require-package 'mmm-mode)
(require 'mmm-auto)
(setq mmm-global-mode 'buffers-with-submode-classes)
(setq mmm-submode-decoration-level 2)


(provide 'init-mmm)
#+end_src
*** init-linum-mode.el
#+begin_src emacs-lisp
(when *emacs23*
  (global-linum-mode t)

  ;http://stackoverflow.com/questions/3875213/ \
  ;turning-on-linum-mode-when-in-python-c-mode
  (setq linum-mode-inhibit-modes-list '(eshell-mode
                                         shell-mode
                                         erc-mode
                                         help-mode
                                         text-mode
                                         fundamental-mode
                                         jabber-roster-mode
                                         jabber-chat-mode
                                         inferior-scheme-mode
                                         twittering-mode
                                         compilation-mode
                                         weibo-timeline-mode
                                         woman-mode
                                         info-mode
                                         calc-mode
                                         calc-trail-mode
                                         comint-mode
                                         gnus-group-mode
                                         inf-ruby-mode
                                         gud-mode
                                         org-mode
                                         vc-git-log-edit-mode
                                         log-edit-mode
                                         term-mode
                                         w3m-mode
                                         speedbar-mode
                                         gnus-summary-mode
                                         gnus-article-mode
                                         calendar-mode))
  (defadvice linum-on (around linum-on-inhibit-for-modes)
             "stop the load of linum-mode for some major modes."
             (unless (member major-mode linum-mode-inhibit-modes-list)
               ad-do-it))
  (ad-activate 'linum-on)
  )
(provide 'init-linum-mode)
#+end_src
*** init-helm
(if *emacs24* (require 'init-helm))

#+begin_src emacs-lisp

(require-package 'helm)
(require-package 'async)
(require-package 'helm-swoop)
(require-package 'helm-projectile)
;;(require 'helm-config)

;;;; helm-swoop settings
;;save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save nil)

;;if this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;;split direction. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;;;if nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;;go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

;;optional face for line numbers
;;face name is `helm-swoop-line-number-face`
(setq helm-swoop-use-line-number-face t)

;;;; end


;;(helm-mode 1)

;; fuzzy setting
(setq helm-m-x-fuzzy-match t )          ;helm-m-x
(setq helm-buffers-fuzzy-matching t )   ;helm-mini, helm-buffers-list
(setq helm-recentf-fuzzy-match t )      ;helm-recentf
(setq helm-locate-fuzzy-match t )      ;helm-locate
(setq helm-semantic-fuzzy-match t )     ;helm-semantic
(setq helm-imenu-fuzzy-match t )        ;helm-imenu
(setq helm-apropos-fuzzy-matc t)        ;helm-apropos
(setq helm-lisp-fuzzy-completion t)     ;helm-lisp-completion-at-point



(setq helm-completing-read-handlers-alist
      '((describe-function . ido)
        (describe-variable . ido)
        (debug-on-entry . helm-completing-read-symbols)
        (find-function . helm-completing-read-symbols)
        (find-tag . helm-completing-read-with-cands-in-buffer)
        (ffap-alternate-file . nil)
        (tmm-menubar . nil)
        (dired-do-copy . nil)
        (dired-do-rename . nil)
        (dired-create-directory . nil)
        (find-file . ido)
        (copy-file-and-rename-buffer . nil)
        (rename-file-and-buffer . nil)
        (w3m-goto-url . nil)
        (ido-find-file . nil)
        (ido-edit-input . nil)
        (mml-attach-file . ido)
        (read-file-name . nil)
        (yas/compile-directory . ido)
        (execute-extended-command . ido)
        (minibuffer-completion-help . nil)
        (minibuffer-complete . nil)
        (c-set-offset . nil)
        (wg-load . ido)
        (rgrep . nil)
        (read-directory-name . ido)
        ))


;; {{helm-gtags
;; customize
(autoload 'helm-gtags-mode "helm-gtags" nil t)
(setq helm-c-gtags-path-style 'relative)
(setq helm-c-gtags-ignore-case t)
(setq helm-c-gtags-read-only t)
(add-hook 'c-mode-hook (lambda () (helm-gtags-mode)))
(add-hook 'c++-mode-hook (lambda () (helm-gtags-mode)))
;; }}



;; key bindings
(add-hook 'helm-gtags-mode-hook
          '(lambda ()
              (local-set-key (kbd "M-t") 'helm-gtags-find-tag)
              (local-set-key (kbd "M-r") 'helm-gtags-find-rtag)
              (local-set-key (kbd "M-s") 'helm-gtags-find-symbol)
              (local-set-key (kbd "C-t") 'helm-gtags-pop-stack)
              (local-set-key (kbd "C-c C-f") 'helm-gtags-pop-stack)))
;; ==end

(when *emacs24*
  (autoload 'helm-c-yas-complete "helm-c-yasnippet" nil t)
  (global-set-key (kbd "C-x C-l") 'helm-find-files)
  (global-set-key (kbd "C-c f") 'helm-for-files)
  (global-set-key (kbd "C-c y") 'helm-c-yas-complete)
  (global-set-key (kbd "C-c i") 'helm-imenu)
  (global-set-key (kbd "C-x C-o") 'ffap))

(autoload 'helm-swoop "helm-swoop" nil t)
(autoload 'helm-back-to-last-point "helm-swoop" nil t)

;; when doing isearch, hand the word over to helm-swoop
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)


(autoload 'helm-ls-git-ls "helm-ls-git" nil t)
(autoload 'helm-browse-project "helm-ls-git" nil t)

;;(helm-autoresize-mode 1)

(provide 'init-helm)

#+end_src

*** comment init-smex.el

#+begin_src emacs-lisp :tangle no
#+end_src



*** init-company.el

#+begin_src emacs-lisp
(require-package 'company)
(require 'company)
(add-hook 'prog-mode-hook 'global-company-mode)
(add-hook 'cmake-mode-hook 'global-company-mode)

;; does not matter, i never use this hotkey
(global-set-key (kbd "C-c o") 'company-complete)
(setq company-require-match nil)
;; press space will accept the highlighted candidate and insert a space
;; `m-x describe-variable company-auto-complete-chars` for details
(setq company-auto-complete t)

(if (fboundp 'evil-declare-change-repeat)
    (mapc #'evil-declare-change-repeat
          '(company-complete-common
            company-select-next
            company-select-previous
            company-complete-selection
            company-complete-number
            )))


(eval-after-load 'company
  '(progn
     (add-to-list 'company-backends 'company-cmake)
     (add-to-list 'company-backends 'company-c-headers)
     ;; can't work with tramp
     (setq company-backends (delete 'company-ropemacs company-backends))
     ;; (setq company-backends (delete 'company-capf company-backends))
     ;; i don't like the downcase word in company-dabbrev
     ;; for languages use camel case naming convention
     (setq company-dabbrev-downcase nil)
     (setq company-show-numbers t)
     (setq company-begin-commands '(self-insert-command))
     (setq company-idle-delay 0.2)
     (setq company-clang-insert-arguments nil)
     ))

(provide 'init-company)

#+end_src
*** init-auto-complete.el
#+begin_src emacs-lisp
(require-package 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(setq-default ac-expand-on-auto-complete nil)
(setq-default ac-auto-start nil)
(setq-default ac-dwim nil) ; to get pop-ups with docs even if a word is uniquely completed

;;----------------------------------------------------------------------------
;; use emacs' built-in tab completion hooks to trigger ac (emacs >= 23.2)
;;----------------------------------------------------------------------------
(setq tab-always-indent 'complete)  ;; use 't when auto-complete is disabled
(add-to-list 'completion-styles 'initials t)
;; stop completion-at-point from popping up completion buffers so eagerly
(setq completion-cycle-threshold 5)

;; todo: find solution for php, haskell and other modes where tab always does something

(setq c-tab-always-indent nil
      c-insert-tab-function 'indent-for-tab-command)

;; hook ac into completion-at-point
(defun sanityinc/auto-complete-at-point ()
  (when (and (not (minibufferp))
             (fboundp 'auto-complete-mode)
             auto-complete-mode)
    (auto-complete)))

(defun sanityinc/never-indent ()
  (set (make-local-variable 'indent-line-function) (lambda () 'noindent)))

(defun set-auto-complete-as-completion-at-point-function ()
  (setq completion-at-point-functions
        (cons 'sanityinc/auto-complete-at-point
              (remove 'sanityinc/auto-complete-at-point completion-at-point-functions))))

(add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)


(set-default 'ac-sources
             '(ac-source-imenu
               ac-source-dictionary
               ac-source-words-in-buffer
               ac-source-words-in-same-mode-buffers
               ac-source-words-in-all-buffer))

(dolist (mode '(magit-log-edit-mode
                log-edit-mode org-mode text-mode haml-mode
                git-commit-mode
                sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                html-mode nxml-mode sh-mode smarty-mode clojure-mode
                lisp-mode textile-mode markdown-mode tuareg-mode
                js3-mode css-mode less-css-mode sql-mode
                sql-interactive-mode
                inferior-emacs-lisp-mode))
  (add-to-list 'ac-modes mode))


;; exclude very large buffers from dabbrev
(defun sanityinc/dabbrev-friend-buffer (other-buffer)
  (< (buffer-size other-buffer) (* 1 1024 1024)))

(setq dabbrev-friend-buffer-function 'sanityinc/dabbrev-friend-buffer)


(provide 'init-auto-complete)
#+end_src
*** init-which-func.el
#+begin_src emacs-lisp

;(add-to-list 'which-func-modes 'org-mode)
(which-function-mode 1)
(provide 'init-which-func)
#+end_src
*** init-yasnippet.el

#+BEGIN_SRC emacs-lisp

(require 'yasnippet)

;; my private snippets
(setq my-yasnippets (expand-file-name "~/my-yasnippets"))
(if (and  (file-exists-p my-yasnippets) (not (member my-yasnippets yas/snippet-dirs)))
    (add-to-list 'yas/snippet-dirs my-yasnippets))
;; (message "yas/snippet-dirs=%s" (mapconcat 'identity yas-snippet-dirs ":"))

(yas/global-mode 1)

(defun my-yas-expand ()
  (interactive)
  (if (buffer-file-name)
      (let ((ext (car (cdr (split-string (buffer-file-name) "\\."))) )
            (old-yas-flag yas-indent-line)
            )
        (when (or (string= ext "ftl") (string= ext "jsp"))
          (setq yas-indent-line nil)
          )
        (yas-expand)
        ;; restore the flag
        (setq yas-indent-line old-yas-flag)
        )
    (yas-expand)
    )
  )

;; default TAB key is occupied by auto-complete
(global-set-key (kbd "C-c k") 'my-yas-expand)
;; default hotkey `C-c C-s` is still valid
;; (global-set-key (kbd "C-c l") 'yas-insert-snippet)
;; give yas/dropdown-prompt in yas/prompt-functions a chance

(require-package 'dropdown-list)
(require 'dropdown-list)
(setq yas-prompt-functions '(yas-dropdown-prompt
                              yas-ido-prompt
                              yas-completing-prompt))
;; use yas/completing-prompt when ONLY when `M-x yas-insert-snippet'
;; thanks to capitaomorte for providing the trick.
(defadvice yas-insert-snippet (around use-completing-prompt activate)
     "Use `yas-completing-prompt' for `yas-prompt-functions' but only here..."
       (let ((yas-prompt-functions '(yas-completing-prompt)))
             ad-do-it))
;; @see http://stackoverflow.com/questions/7619640/emacs-latex-yasnippet-why-are-newlines-inserted-after-a-snippet
(setq-default mode-require-final-newline nil)
(provide 'init-yasnippet)


#+END_SRC


;;(if *emacs24* (require 'init-yasnippet))
;;(when *emacs24* (require 'init-company))

** ui, theme
*** comment init-themes.el

#+begin_src emacs-lisp :tangle no
(when (< emacs-major-version 24)
  (require-package 'color-theme))

(require-package 'color-theme-sanityinc-solarized)
(require-package 'color-theme-sanityinc-tomorrow)

;;------------------------------------------------------------------------------
;; old-style color theming support (via color-theme.el)
;;------------------------------------------------------------------------------
(defcustom window-system-color-theme 'color-theme-sanityinc-solarized-dark
  "color theme to use in window-system frames.
if emacs' native theme support is available, this setting is
ignored: use `custom-enabled-themes' instead."
  :type 'symbol)

(defcustom tty-color-theme 'color-theme-terminal
  "color theme to use in tty frames.
if emacs' native theme support is available, this setting is
ignored: use `custom-enabled-themes' instead."
  :type 'symbol)

(unless (boundp 'custom-enabled-themes)
  (defun color-theme-terminal ()
    (interactive)
    (color-theme-sanityinc-solarized-dark))

  (defun apply-best-color-theme-for-frame-type (frame)
    (with-selected-frame frame
      (funcall (if window-system
                   window-system-color-theme
                 tty-color-theme))))

  (defun reapply-color-themes ()
    (interactive)
    (mapcar 'apply-best-color-theme-for-frame-type (frame-list)))

  (set-variable 'color-theme-is-global nil)
  (add-hook 'after-make-frame-functions 'apply-best-color-theme-for-frame-type)
  (add-hook 'after-init-hook 'reapply-color-themes)
  (apply-best-color-theme-for-frame-type (selected-frame)))


;;------------------------------------------------------------------------------
;; new-style theme support, in which per-frame theming is not possible
;;------------------------------------------------------------------------------

;; if you don't customize it, this is the theme you get.
(setq-default custom-enabled-themes '(sanityinc-solarized-light))

;; ensure that themes will be applied even if they have not been customized
(defun reapply-themes ()
  "forcibly load the themes listed in `custom-enabled-themes'."
  (dolist (theme custom-enabled-themes)
    (unless (custom-theme-p theme)
      (load-theme theme)))
  (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))

(add-hook 'after-init-hook 'reapply-themes)


;;------------------------------------------------------------------------------
;; toggle between light and dark
;;------------------------------------------------------------------------------
(defun light ()
  "activate a light color theme."
  (interactive)
  (color-theme-sanityinc-solarized-light))

(defun dark ()
  "activate a dark color theme."
  (interactive)
  (color-theme-sanityinc-solarized-dark))


(provide 'init-themes)
#+end_src

*** apperence

#+begin_src emacs-lisp   :tangle no


(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

(setq visible-bell t
      font-lock-maximum-decoration t
      color-theme-is-global t
      truncate-partial-width-windows nil)

;; highlight current line
(global-hl-line-mode 1)

;; set custom theme path
(setq custom-theme-directory (concat user-emacs-directory "themes"))

(dolist
    (path (directory-files custom-theme-directory t "\\w+"))
  (when (file-directory-p path)
    (add-to-list 'custom-theme-load-path path)))

;; default theme
(defun use-presentation-theme ()
  (interactive)

  (when (boundp 'magnars/presentation-font)
    (set-face-attribute 'default nil :font magnars/presentation-font)))

(defun use-default-theme ()
  (interactive)
  (load-theme 'default-black)
  (when (boundp 'magnars/default-font)
    (set-face-attribute 'default nil :font magnars/default-font)))

(defun toggle-presentation-mode ()
  (interactive)
  (if (string= (frame-parameter nil 'font) magnars/default-font)
      (use-presentation-theme)
    (use-default-theme)))

(global-set-key (kbd "C-<f9>") 'toggle-presentation-mode)

;;(use-default-theme)

;; don't defer screen updates when performing operations
(setq redisplay-dont-pause t)

;; org-mode colors
(setq org-todo-keyword-faces
      '(
        ("inpr" . (:foreground "yellow" :weight bold))
        ("done" . (:foreground "green" :weight bold))
        ("impeded" . (:foreground "red" :weight bold))
        ))

;; highlight matching parentheses when the point is on them.
(show-paren-mode 1)

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode -1)
  (blink-cursor-mode -1))

;; make zooming affect frame instead of buffers
(require 'zoom-frm)

;; unclutter the modeline
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "paredit" '(diminish 'paredit-mode))
(eval-after-load "tagedit" '(diminish 'tagedit-mode))
(eval-after-load "elisp-slime-nav" '(diminish 'elisp-slime-nav-mode))
(eval-after-load "skewer-mode" '(diminish 'skewer-mode))
(eval-after-load "skewer-css" '(diminish 'skewer-css-mode))
(eval-after-load "skewer-html" '(diminish 'skewer-html-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "subword" '(diminish 'subword-mode))

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

(rename-modeline "js2-mode" js2-mode "js2")
(rename-modeline "clojure-mode" clojure-mode "clj")

(provide 'appearance)


#+end_src
*** mac

#+begin_src emacs-lisp
(require 'dash)

;; change command to meta, and ignore option to use weird norwegian keyboard
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'super)
(setq ns-function-modifier 'hyper)

;; norwegian mac-keyboard alt-keys)
;; (define-key key-translation-map (kbd "s-8") (kbd "["))
;; (define-key key-translation-map (kbd "s-(") (kbd "{"))
;; (define-key key-translation-map (kbd "s-9") (kbd "]"))

;; (define-key key-translation-map (kbd "s-)") (kbd "}"))
;; (define-key key-translation-map (kbd "s-7") (kbd "|"))
;; (define-key key-translation-map (kbd "s-/") (kbd "\\"))
;; (define-key key-translation-map (kbd "M-s-7") (kbd "m-|"))

(global-set-key (kbd "s-u") 'universal-argument)
(global-set-key (kbd "s--") 'negative-argument)
(--dotimes 5 (global-set-key (read-kbd-macro (format "s-%d" it)) 'digit-argument))

;; redefine read-char, at least for invocation from elisp
(defun read-char (&optional prompt) ;; (inherit-input-method seconds)
  "read a character from the command input (keyboard or macro).
   it is returned as a number.
   if the character has modifiers, they are resolved and reflected to the
   character code if possible (e.g. c-spc -> 0).

   if the user generates an event which is not a character (i.e. a mouse
   click or function key event), `read-char' signals an error.  as an
   exception, switch-frame events are put off until non-character events
   can be read.
   if you want to read non-character events, or ignore them, call
   `read-event' or `read-char-exclusive' instead.

   if the optional argument prompt is non-nil, display that as a prompt.
   if the optional argument inherit-input-method is non-nil and some
   input method is turned on in the current buffer, that input method
   is used for reading a character.
   if the optional argument seconds is non-nil, it should be a number
   specifying the maximum number of seconds to wait for input.  if no
   input arrives in that time, return nil.  seconds may be a
   floating-point value."
  ;; if (! nilp (prompt))
  ;;   message_with_string ("%s", prompt, 0);
  ;; val = read_filtered_event (1, 1, 1, ! nilp (inherit_input_method),
  ;;                            seconds);
  ;; return (nilp (val) ? qnil
  ;;         : make_number (char_resolve_modifier_mask (xint (val))));
  (let ((inherit-input-method nil) (seconds nil))
    ;; `read-key' doesn't explicitly inhibit the input method, but in
    ;; practice it disables at least quail input methods because it
    ;; binds overriding-terminal-local-map.
    (if inherit-input-method (error "not implemented"))
    (catch 'read-char-exclusive
      (let ((timer (when seconds
                     (run-with-timer seconds nil
                                     (lambda ()
                                       (throw 'read-char-exclusive nil))))))
        (unwind-protect
            (let ((event (read-key prompt)))
              (if (numberp event)
                  event
                (setq unread-command-events
                      (nconc (mapcar 'identity (this-single-command-raw-keys))
                             unread-command-events))
                (error "non-character input-event")))
          (when timer (cancel-timer timer)))))))

;; mac friendly font
(when window-system
  (setq magnars/default-font "-apple-monaco-medium-normal-normal-*-16-*-*-*-m-0-iso10646-1")
  (setq magnars/presentation-font "-apple-monaco-medium-normal-normal-*-21-*-*-*-m-0-iso10646-1")
  (set-face-attribute 'default nil :font magnars/default-font))

;; keybinding to toggle full screen mode
(global-set-key (quote [M-f10]) (quote ns-toggle-fullscreen))

;; move to trash when deleting stuff
(setq delete-by-moving-to-trash t
      trash-directory "~/.trash/emacs")

;; ignore .ds_store files with ido mode
(add-to-list 'ido-ignore-files "\\.ds_store")

;; don't open files from the workspace in a new frame
(setq ns-pop-up-frames nil)

;; use aspell for spell checking: brew install aspell --lang=en
(setq ispell-program-name "/usr/local/bin/aspell")

;; open files
(defun mac-open-current-file ()
  (interactive)
  (shell-command (concat "open " (buffer-file-name))))

(global-set-key (kbd "C-c C-S-o") 'mac-open-current-file)

(provide 'mac)

#+end_src

*** sane-defualt



#+begin_src emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
(define-key global-map [(super ?v)] 'yank)



;; allow pasting selection outside of emacs
(setq x-select-enable-clipboard t)

;; auto refresh buffers
(global-auto-revert-mode 1)

;; also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; show keystrokes in progress
(setq echo-keystrokes 0.1)

;; move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; real emacs knights don't use shift to mark things
(setq shift-select-mode nil)

;; transparently open compressed files
(auto-compression-mode t)

;; enable syntax highlighting for older emacsen that have it off
(global-font-lock-mode t)

;; answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; utf-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; remove text in active region if inserting text
(delete-selection-mode 1)

;; don't highlight matches with jump-char - it's distracting
(setq jump-char-lazy-highlight-face nil)

;; always display line and column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; lines should be 80 characters wide, not 72
(setq fill-column 80)

;; save a list of recent files visited. (open recent file with c-x f)
(recentf-mode 1)
(setq recentf-max-saved-items 100) ;; just 20 is too recent

;; save minibuffer history
(savehist-mode 1)
(setq history-length 1000)

;; undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

;; never insert tabs
(set-default 'indent-tabs-mode nil)

;; show me empty lines after buffer end
(set-default 'indicate-empty-lines t)

;; easily navigate sillycased words
(global-subword-mode 1)

;; don't break lines for me, please
(setq-default truncate-lines t)

;; keep cursor away from edges when scrolling up/down
(require-package 'smooth-scrolling)
(require 'smooth-scrolling)

;; allow recursive minibuffers
(setq enable-recursive-minibuffers t)

;; don't be so stingy on the memory, we have lots now. it's the distant future.
(setq gc-cons-threshold 20000000)

;; org-mode: don't ruin s-arrow to switch windows please (use m-+ and m-- instead to toggle)
(setq org-replace-disputed-keys t)

;; fontify org-mode code blocks
(setq org-src-fontify-natively t)

;; represent undo-history as an actual tree (visualize with c-x u)
(setq undo-tree-mode-lighter "")
(require 'undo-tree)
(global-undo-tree-mode)

;; sentences do not need double spaces to end. period.
(set-default 'sentence-end-double-space nil)

;; 80 chars is a good width.
(set-default 'fill-column 80)

;; add parts of each file's directory to the buffer name if not unique
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; a saner ediff
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; no electric indent
(setq electric-indent-mode nil)

;; nic says eval-expression-print-level needs to be set to nil (turned off) so
;; that you can always see what's happening.
(setq eval-expression-print-level nil)

;; when popping the mark, continue popping until the cursor actually moves
;; also, if the last command was a copy - skip past all the expand-region cruft.
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it

      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))

;; offer to create parent directories if they do not exist
;; http://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/
(defun my-create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "directory `%s' does not exist! create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions 'my-create-non-existent-directory)

(provide 'sane-defaults)




#+end_src


*** init-mainline
#+begin_src emacs-lisp :tangle no
(require-package 'main-line)
(require 'main-line)
(setq main-line-separator-style 'wave-right)
#+end_src
*** init-leuven-theme.el
#+begin_src emacs-lisp

(require-package 'leuven-theme)
(require 'leuven-theme)

(load-theme 'leuven t)
(setq org-fontify-whole-heading-line t)
;(set-face-attribute 'org-level-1 nil :height 90) ; 9 pt font

;;颜色设置成灰色;sublime 和 iterm 设置的是 gray91

(add-to-list 'default-frame-alist '(background-color . "gray94"))
(set-background-color "gray94")

(provide 'init-leuven-theme)
#+end_src
*** init-fonts.el
#+begin_src emacs-lisp
;;; character sets

(set-default-font "-apple-pragmatapro-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1")
(setq-default line-spacing 1)
(if *is-cocoa-emacs* (set-fontset-font "fontset-default" 'gb18030' ("heiti sc" . "unicode-bmp")))



(defcustom sanityinc/force-default-font-for-symbols nil
  "when non-nil, force emacs to use your default font for symbols."
  :type 'boolean)

(defun sanityinc/maybe-use-default-font-for-symbols ()
  "force emacs to render symbols using the default font, if so configured."
  (when sanityinc/force-default-font-for-symbols
    (set-fontset-font "fontset-default" 'symbol (face-attribute 'default :family))))

(add-hook 'after-init-hook 'sanityinc/maybe-use-default-font-for-symbols)


;;; changing font sizes

(require 'cl)

(defun sanityinc/font-name-replace-size (font-name new-size)
  (let ((parts (split-string font-name "-")))
    (setcar (nthcdr 7 parts) (format "%d" new-size))
    (mapconcat 'identity parts "-")))

(defun sanityinc/increment-default-font-height (delta)
  "adjust the default font height by delta on every frame.
emacs will keep the pixel size of the frame approximately the
same.  delta should be a multiple of 10, to match the units used
by the :height face attribute."
  (let* ((new-height (+ (face-attribute 'default :height) delta))
         (new-point-height (/ new-height 10)))
    (dolist (f (frame-list))
      (with-selected-frame f
        ;; latest 'set-frame-font supports a "frames" arg, but
        ;; we cater to emacs 23 by looping instead.
        (set-frame-font (sanityinc/font-name-replace-size
                         (face-font 'default)
                         new-point-height)
                        t)))
    (set-face-attribute 'default nil :height new-height)
    (message "default font size is now %d" new-point-height)))

(defun sanityinc/increase-default-font-height ()
  (interactive)
  (sanityinc/increment-default-font-height 10))

(defun sanityinc/decrease-default-font-height ()
  (interactive)
  (sanityinc/increment-default-font-height -10))

(global-set-key (kbd "C-M-=") 'sanityinc/increase-default-font-height)
(global-set-key (kbd "C-M--") 'sanityinc/decrease-default-font-height)



(provide 'init-fonts)
#+end_src
** directory
*** init-neotree.el
#+begin_src emacs-lisp
(require-package 'neotree)
(require 'neotree)

;;快捷键 f12
(global-set-key [f12] 'neotree-toggle)
(setq projectile-switch-project-action 'neotree-projectile-action)

;;切换到 projectile 的当前根目录
(defun neotree-ffip-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (ffip-project-root))
        (file-name (buffer-file-name)))
    (if project-dir
        (progn
          (neotree-dir project-dir)
          (neotree-find file-name))
      (message "Could not find git project root."))))

(define-key neotree-mode-map (kbd "C-c C-p") 'neotree-ffip-project-dir)


;;覆盖和 evilmode 的快捷键冲突, 比如 q 键退出.
(add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))


;; 解决和 popwin 的冲突
(when neo-persist-show
    (add-hook 'popwin:before-popup-hook
              (lambda () (setq neo-persist-show nil)))
    (add-hook 'popwin:after-popup-hook
              (lambda () (setq neo-persist-show t))))


(provide 'init-neotree)
#+END_SRC

*** COMMENT init-sr-speedbar.el
#+BEGIN_SRC emacs-lisp :tangle no
#+END_SRC

*** init-dired.el
#+BEGIN_SRC emacs-lisp
(require-package 'dired+)
(require-package 'dired-sort)

(setq-default diredp-hide-details-initially-flag nil
              dired-dwim-target t)

(after-load 'dired
  (require 'dired+)
  (require 'dired-sort)
  (when (fboundp 'global-dired-hide-details-mode)
    (global-dired-hide-details-mode -1))
  (setq dired-recursive-deletes 'top)
  (define-key dired-mode-map [mouse-2] 'dired-find-file)
  (add-hook 'dired-mode-hook
            (lambda () (guide-key/add-local-guide-key-sequence "%"))))


(provide 'init-dired)
#+END_SRC


*** setup-dired

#+BEGIN_SRC emacs-lisp
(require 'dired)
(require 'dash)

;; Make dired less verbose
(require-package 'dired-details)
(require 'dired-details)
(setq-default dired-details-hidden-string "--- ")
(dired-details-install)

;; Move files between split panes
(setq dired-dwim-target t)

;; Reload dired after making changes
(--each '(dired-do-rename
          dired-do-copy
          dired-create-directory
          wdired-abort-changes)
        (eval `(defadvice ,it (after revert-buffer activate)
                 (revert-buffer))))

;; C-a is nicer in dired if it moves back to start of files
(defun dired-back-to-start-of-files ()
  (interactive)
  (backward-char (- (current-column) 2)))

(define-key dired-mode-map (kbd "C-a") 'dired-back-to-start-of-files)
(define-key dired-mode-map (kbd "k") 'dired-do-delete)

;; M-up is nicer in dired if it moves to the fourth line - the first file
(defun dired-back-to-top ()
  (interactive)
  (beginning-of-buffer)
  (dired-next-line 4))


(define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
(define-key dired-mode-map (vector 'remap 'smart-up) 'dired-back-to-top)

;; M-down is nicer in dired if it moves to the last file
(defun dired-jump-to-bottom ()
  (interactive)
  (end-of-buffer)
  (dired-next-line -1))

(define-key dired-mode-map (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
(define-key dired-mode-map (vector 'remap 'smart-down) 'dired-jump-to-bottom)

;; Delete with C-x C-k to match file buffers and magit
(define-key dired-mode-map (kbd "C-x C-k") 'dired-do-delete)

(eval-after-load "wdired"
  '(progn
     (define-key wdired-mode-map (kbd "C-a") 'dired-back-to-start-of-files)
     (define-key wdired-mode-map (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
     (define-key wdired-mode-map (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)))

(provide 'setup-dired)

#+END_SRC

*** setup ido
#+BEGIN_SRC emacs-lisp
;; Interactively Do Things

(require 'ido)
(ido-mode t)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-case-fold nil
      ido-auto-merge-work-directories-length -1
      ido-create-new-buffer 'always
      ido-use-filename-at-point nil
      ido-max-prospects 10)

;; Try out flx-ido for better flex matching between words
(require-package 'flx-ido)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

;; flx-ido looks better with ido-vertical-mode
(require-package 'ido-vertical-mode)
(ido-vertical-mode)

(defun sd/ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
  (define-key ido-completion-map (kbd "<up>") 'ido-prev-match))

(require 'dash)

(defun my/ido-go-straight-home ()
  (interactive)
  (cond
   ((looking-back "~/") (insert "projects/"))
   ((looking-back "/") (insert "~/"))
   (:else (call-interactively 'self-insert-command))))

(defun my/setup-ido ()
  ;; Go straight home
  (define-key ido-file-completion-map (kbd "~") 'my/ido-go-straight-home)
  (define-key ido-file-completion-map (kbd "C-~") 'my/ido-go-straight-home)

  ;; Use C-w to go back up a dir to better match normal usage of C-w
  ;; - insert current file name with C-x C-w instead.
  (define-key ido-file-completion-map (kbd "C-w") 'ido-delete-backward-updir)
  (define-key ido-file-completion-map (kbd "C-x C-w") 'ido-copy-current-file-name)

  (define-key ido-file-dir-completion-map (kbd "C-w") 'ido-delete-backward-updir)
  (define-key ido-file-dir-completion-map (kbd "C-x C-w") 'ido-copy-current-file-name))

(add-hook 'ido-setup-hook 'my/setup-ido)

;; Always rescan buffer for imenu
(set-default 'imenu-auto-rescan t)

(add-to-list 'ido-ignore-directories "target")
(add-to-list 'ido-ignore-directories "node_modules")

;; Ido at point (C-,)
(require-package 'ido-at-point)
(ido-at-point-mode)

;; Use ido everywhere
(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)

;; Fix ido-ubiquitous for newer packages
(defmacro ido-ubiquitous-use-new-completing-read (cmd package)
  `(eval-after-load ,package
     '(defadvice ,cmd (around ido-ubiquitous-new activate)
        (let ((ido-ubiquitous-enable-compatibility nil))
          ad-do-it))))

(ido-ubiquitous-use-new-completing-read webjump 'webjump)
(ido-ubiquitous-use-new-completing-read yas-expand 'yasnippet)
(ido-ubiquitous-use-new-completing-read yas-visit-snippet-file 'yasnippet)

(provide 'setup-ido)

#+END_SRC


*** setup magit
#+BEGIN_SRC emacs-lisp :tangle no
;; Subtler highlight
(set-face-background 'magit-item-highlight "#121212")
(set-face-background 'diff-file-header "#121212")
(set-face-foreground 'diff-context "#666666")
(set-face-foreground 'diff-added "#00cc33")
(set-face-foreground 'diff-removed "#ff0000")

(set-default 'magit-stage-all-confirm nil)
(set-default 'magit-unstage-all-confirm nil)

(eval-after-load 'ediff
  '(progn
     (set-face-foreground 'ediff-odd-diff-B "#ffffff")
     (set-face-background 'ediff-odd-diff-B "#292521")
     (set-face-foreground 'ediff-even-diff-B "#ffffff")
     (set-face-background 'ediff-even-diff-B "#292527")

     (set-face-foreground 'ediff-odd-diff-A "#ffffff")
     (set-face-background 'ediff-odd-diff-A "#292521")
     (set-face-foreground 'ediff-even-diff-A "#ffffff")
     (set-face-background 'ediff-even-diff-A "#292527")))

;; todo:
;; diff-added-face      diff-changed-face
;; diff-context-face    diff-file-header-face
;; diff-function-face   diff-header-face
;; diff-hunk-header-face        diff-index-face
;; diff-indicator-added-face    diff-indicator-changed-face
;; diff-indicator-removed-face  diff-nonexistent-face
;; diff-removed-face



;; Load git configurations
;; For instance, to run magit-svn-mode in a project, do:
;;
;;     git config --add magit.extension svn
;;
(add-hook 'magit-mode-hook 'magit-load-config-extensions)

(defun magit-save-and-exit-commit-mode ()
  (interactive)
  (save-buffer)
  (server-edit)
  (delete-window))

(defun magit-exit-commit-mode ()
  (interactive)
  (kill-buffer)
  (delete-window))

(eval-after-load "git-commit-mode"
  '(define-key git-commit-mode-map (kbd "C-c C-k") 'magit-exit-commit-mode))

;; C-c C-a to amend without any prompt

(defun magit-just-amend ()
  (interactive)
  (save-window-excursion
    (magit-with-refresh
      (shell-command "git --no-pager commit --amend --reuse-message=HEAD"))))

(eval-after-load "magit"
  '(define-key magit-status-mode-map (kbd "C-c C-a") 'magit-just-amend))

;; C-x C-k to kill file on line

(defun magit-kill-file-on-line ()
  "Show file on current magit line and prompt for deletion."
  (interactive)
  (magit-visit-item)
  (delete-current-buffer-file)
  (magit-refresh))

(define-key magit-status-mode-map (kbd "C-x C-k") 'magit-kill-file-on-line)

;; full screen magit-status

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

;; full screen vc-annotate

(defun vc-annotate-quit ()
  "Restores the previous window configuration and kills the vc-annotate buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :vc-annotate-fullscreen))

(eval-after-load "vc-annotate"
  '(progn
     (defadvice vc-annotate (around fullscreen activate)
       (window-configuration-to-register :vc-annotate-fullscreen)
       ad-do-it
       (delete-other-windows))

     (define-key vc-annotate-mode-map (kbd "q") 'vc-annotate-quit)))

;; ignore whitespace

(defun magit-toggle-whitespace ()
  (interactive)
  (if (member "-w" magit-diff-options)
      (magit-dont-ignore-whitespace)
    (magit-ignore-whitespace)))

(defun magit-ignore-whitespace ()
  (interactive)
  (add-to-list 'magit-diff-options "-w")
  (magit-refresh))

(defun magit-dont-ignore-whitespace ()
  (interactive)
  (setq magit-diff-options (remove "-w" magit-diff-options))
  (magit-refresh))

(define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)

;; Show blame for current line

(require-package 'git-messenger)
(global-set-key (kbd "C-x v p") #'git-messenger:popup-message)

;; Don't bother me with flyspell keybindings

(eval-after-load "flyspell"
  '(define-key flyspell-mode-map (kbd "C-.") nil))

(provide 'setup-magit)

#+END_SRC

** now test
#+BEGIN_SRC emacs-lisp


;(popwin-mode 1)
;; Save point position between sessions
;(require 'saveplace)
;(setq-default save-place t)
;(setq save-place-file (expand-file-name ".places" user-emacs-directory))



(require 'org-panel)
(require-package  'ox-reveal)
(require  'ox-reveal)
(setq org-reveal-root "file:///Users/lhr/_ev/js/reveal.js")


(require-package 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(require-package 'org-fstree)
(require 'org-fstree)



;; 中文增强
;; 中英文空格
(require-package 'pangu-spacing)
 (require 'pangu-spacing)
 (global-pangu-spacing-mode 1)
 (setq pangu-spacing-real-insert-separtor t)

;; If you only want to insert whitespace in some specific mode, but just add virtual space in other mode, you can use following code to achive this: (take org-mode as example)

;;  (add-hook 'org-mode-hook
;;            '(lambda ()
;;             (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))



;; 有道词典
(require 'youdao-dictionary)
(setq url-automatic-caching t)
(global-set-key (kbd "C-c y") 'youdao-dictionary-search-at-point+)


;; 拼音 isearch
(require-package 'pinyin-search)
(require 'pinyin-search)

;; 拼音输入法
(require-package 'chinese-pyim)
(require 'chinese-pyim)

(setq default-input-method "chinese-pyim")
;(global-set-key (kbd "C-<SPC>") 'toggle-input-method)



;; google 翻译
;(require-package 'popup-el)
(require-package 'names)
(require-package 'chinese-word-at-point)
(require-package 'google-translate)
(require 'popup)
(require 'chinese-word-at-point)
(require 'google-translate)

;;;###autoload
(define-namespace google-translate-chinese-

(setq google-translate-base-url
      "http://translate.google.cn/translate_a/t")

(setq google-translate-listen-url
      "http://translate.google.cn/translate_tts")

(defun -region-or-word ()
  (if (use-region-p)
      (buffer-substring-no-properties (region-beginning)
                                      (region-end))
    (thing-at-point 'chinese-or-other-word t)))

(defun -bounds-region-or-word ()
  (if (use-region-p)
      (cons (region-beginning) (region-end))
    (bounds-of-thing-at-point 'chinese-or-other-word)))

(defun -translate (word)
  (google-translate-json-translation
   (if (chinese-word-cjk-string-p word)
       (google-translate-request "zh-CN" "en" word)
     (google-translate-request "en" "zh-CN" word))))

(defun -detailed-translate (word)
  (google-translate-json-detailed-translation
   (if (chinese-word-cjk-string-p word)
       (google-translate-request "zh-CN" "en" word)
     (google-translate-request "en" "zh-CN" word))))

(defun concat-array-as-string (v)
  "Concat strings in v to a whole string."
  (let ((index 0) (str ""))
    (while (< index (length v))
      (setq str (concat str (elt v index) ", "))
      (cl-incf index))
    (substring str 0 (- (length str) 2))))

:autoload
(defun at-point ()
  "Translate at point and show full result with buffer."
  (interactive)
  (let ((word (-region-or-word)))
    (if word
        (if (chinese-word-cjk-string-p word)
            (google-translate-translate "zh-CN" "en" word)
          (google-translate-translate "en" "zh-CN" word))
      (message "Nothing to translate"))))

:autoload
(defun at-point-echo-area ()
  "Translate at point and show only translation in echo area. "
  (interactive)
  (let ((word (-region-or-word)))
    (if word
        (message (-translate word))
      (message "Nothing to translate"))))

:autoload
(defun query ()
  "Translate input and show full result with buffer."
  (interactive)
  (let* ((word (-region-or-word))
         (word (read-string (format "Translate (%s): "
                                    (or word ""))
                            nil nil
                            word)))
    (if word
        (if (chinese-word-cjk-string-p word)
            (google-translate-translate "zh-CN" "en" word)
          (google-translate-translate "en" "zh-CN" word))
      (message "Nothing to translate"))))

:autoload
(defun search-at-point-and-replace ()
  "可以不写 DocString."
  (interactive)
  (let ((word (-region-or-word))
        (bounds (-bounds-region-or-word)))
    (if (and word bounds)
        (let (explains
              popup-list
              (detailed-translate (-detailed-translate word))
              selected-item)
          (if (not detailed-translate)
              (progn
                (setq selected-item (popup-menu* (list (popup-make-item (-translate word)))))
                ;; 此处假设了光标在词的后面，而不是其它位置，下同
                (delete-region (car bounds) (cdr bounds))
                (insert selected-item))
            (loop for item across detailed-translate do
                  (let ((index 0))
                    (unless (string-equal (aref item 0) "")
                      (loop for translation across (aref item 1) do
                            (push (format "%d. %s" (incf index) translation) popup-list)
                            (push (concat "<" (substring (aref item 0) 0 1) "> "
                                          (concat-array-as-string (elt (elt (aref item 2) (1- index)) 1)))
                                  popup-list)))))

            (setq popup-list (reverse popup-list))

            (let ((index 0) (a-popup-menu nil))
              (while (< index (length popup-list))
                (push (popup-make-item (nth index popup-list)
                                       :summary (nth (1+ index) popup-list))
                      a-popup-menu)
                (setq index (+ index 2)))
              (setq selected-item (popup-menu* (reverse a-popup-menu)))
              (delete-region (car bounds) (cdr bounds))
              (insert (substring selected-item 3)))))
      (message "Nothing to translate"))))

:autoload
(defun open-word-with-web ()
  "搜索附近的词，用浏览器打开。"
  (interactive)
  (let ((word (-region-or-word))
        from to)
    (if (not word)
        (message "No word found")
      (if (chinese-word-cjk-string-p word)
          (setq from "zh-CN" to "en")
        (setq from "en" to "zh-Cn"))
      ;; URL 格式：比如需要搜索 "example" (en => zh-Cn), URL `https://translate.google.cn/#en/zh-CN/example'
      (browse-url (concat "https://translate.google.cn/#"
                          from "/" to "/"
                          (url-hexify-string word))))))

:autoload
(defun search-and-replace ()
  "Search word at point and replace with selected result."
  (interactive)
  (let ((word (thing-at-point 'word t))
        (bounds (bounds-of-thing-at-point 'word))
        selected)
    (if (not (and word bounds))
        (message "Nothing to translate")
      (setq selected (popup-menu* `("item 1" "item 2" ,word)))
      (delete-region (car bounds) (cdr bounds))
      (insert selected))))
)
(provide 'google-translate-config)

(global-set-key (kbd "C-c t") 'google-translate-chinese-search-at-point-and-replace)


#+END_SRC

iclcle mode
#+BEGIN_SRC emacs-lisp :tangle no

(require-package 'icicles)
(require 'icicles)
(icy-mode 1)
(defun my-find-file ()
  "Like `icicle-find-file', but alt action views file temporarily.
    Alternate action keys such as `C-S-down' visit the candidate file in
    `view-mode' and kill the buffer of the last such viewed candidate."
  (interactive)
  (let ((icicle-candidate-alt-action-fn
         (lambda (file)
           (when (and my-last-viewed
                      (get-file-buffer my-last-viewed))
             (kill-buffer (get-file-buffer my-last-viewed)))
           (setq my-last-viewed  (abbreviate-file-name file))
           (view-file file)
           (select-frame-set-input-focus
            (window-frame (active-minibuffer-window))))))
    (icicle-find-file-of-content)))

    (defvar my-last-viewed nil
      "Last file viewed by alternate action of `my-find-file'.")

#+END_SRC


dired
#+BEGIN_SRC emacs-lisp


;; little modification to dired-mode that let's you browse through lots of files
(add-hook 'dired-mode-hook
          (lambda()
            (define-key dired-mode-map (kbd "C-o") 'dired-view-current)     ; was dired-display-file
            (define-key dired-mode-map (kbd "n")   'dired-view-next)           ; was dired-next-line
            (define-key dired-mode-map (kbd "p")   'dired-view-previous))) ; was dired-previous-line

(defun dired-view-next ()
  "Move down one line and view the current file in another window."
  (interactive)
  (dired-next-line 1)
  (dired-view-current))

(defun dired-view-previous ()
  "Move up one line and view the current file in another window."
  (interactive)
  (dired-previous-line 1)
  (dired-view-current))

(defun dired-view-current ()
  "View the current file in another window (possibly newly created)."
  (interactive)
  (if (not (window-parent))
      (split-window))                                   ; create a new window if necessary
  (let ((file (dired-get-file-for-visit))
        (dbuffer (current-buffer)))
    (other-window 1)                                          ; switch to the other window
    (unless (equal dbuffer (current-buffer))                 ; don't kill the dired buffer
      (if (or view-mode (equal major-mode 'dired-mode))   ; only if in view- or dired-mode
          (kill-buffer)))                                                    ; ... kill it
    (let ((filebuffer (get-file-buffer file)))
      (if filebuffer                              ; does a buffer already look at the file
          (switch-to-buffer filebuffer)                                    ; simply switch
        (view-file file))                                                    ; ... view it
      (other-window -1))))                   ; give the attention back to the dired buffer




#+END_SRC

#+BEGIN_FSTREE: /Users/lhr/_ev/content/paper

*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/#init-misc.el#][#init-misc.el#]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/V.el][V.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/emacs-buffer.el][emacs-buffer.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/frame-buff-mimic.el][frame-buff-mimic.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/frame-bufs.el][frame-bufs.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-ace-jump-mode.el][init-ace-jump-mode.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-company.el][init-company.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-company.el~][init-company.el~]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-dash.el][init-dash.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-eim.el][init-eim.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-elpa.el][init-elpa.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-elscreen.el][init-elscreen.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-ergoemacs-mode.el][init-ergoemacs-mode.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-evil.el][init-evil.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-helm.el][init-helm.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-leuven-theme.el][init-leuven-theme.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-linum-mode.el][init-linum-mode.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-misc.el][init-misc.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-moe-theme.el][init-moe-theme.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-my-dea.el][init-my-dea.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-neotree.el][init-neotree.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-yasnippet.el][init-yasnippet.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-osx-keys.el][init-osx-keys.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-persp-mode.el][init-persp-mode.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-powerline.el][init-powerline.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-projectile.el][init-projectile.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-revive.el][init-revive.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-sublimity.el][init-sublimity.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-tabbar-ruler.el][init-tabbar-ruler.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-tabbar.el][init-tabbar.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-which-func.el][init-which-func.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-which-func.el~][init-which-func.el~]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-windows.el][init-windows.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-windowsel.el][init-windowsel.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-workgroups2.el][init-workgroups2.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/init-yasnippet.el~][init-yasnippet.el~]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/maxframe-simple.el][maxframe-simple.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-coding-style.el][my-coding-style.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-dea.el][my-dea.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-functions.el][my-functions.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-hippie-expand.el][my-hippie-expand.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-iimage-settings.el][my-iimage-settings.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-minor-key-map.el][my-minor-key-map.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-misc-settings.el][my-misc-settings.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-python-settings.el][my-python-settings.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-small-tools.el][my-small-tools.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/my-ui.el][my-ui.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/org-panel.el][org-panel.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/recent-jump-settings.el][recent-jump-settings.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/recent-jump-small.el][recent-jump-small.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/recent-jump.el][recent-jump.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/revive.el][revive.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/tabbar-settings.el][tabbar-settings.el]]
*** | | [[file:/Users/lhr/_pr/ed/purcell/mylisp/windows.el][windows.el]]


#+END_FSTREE



* core editing, compete, navigate
;;;(require 'init-misc)

** move, search, editing, replace, reform
**** init-ace-jump-mode.el
#+BEGIN_SRC emacs-lisp
;;
;; ace jump mode major function
;;
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;;
;; enable a more powerful jump back function from ace jump mode
;;
;(autoload
;  'ace-jump-mode-pop-mark
;  "ace-jump-mode"
;  "Ace jump back:-)"
;  t)
;(eval-after-load "ace-jump-mode"
;                 -  '(ace-jump-mode-enable-mark-sync))')
;(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

;;If you use evil
(eval-after-load "evil" '(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode))

(provide 'init-ace-jump-mode)
#+END_SRC
**** init-editing-utils.el
#+BEGIN_SRC emacs-lisp
(require-package 'unfill)

(when (fboundp 'electric-pair-mode)
  (electric-pair-mode))
(when (eval-when-compile (version< "24.4" emacs-version))
  (electric-indent-mode 1))

;;----------------------------------------------------------------------------
;; Some basic preferences
;;----------------------------------------------------------------------------
(setq-default
 blink-cursor-interval 0.4
 bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
 buffers-menu-max-size 30
 case-fold-search t
 column-number-mode t
 delete-selection-mode t
 ediff-split-window-function 'split-window-horizontally
 ediff-window-setup-function 'ediff-setup-windows-plain
 indent-tabs-mode nil
 make-backup-files t
 mouse-yank-at-point t
 save-interprogram-paste-before-kill t
 scroll-preserve-screen-position 'always
 set-mark-command-repeat-pop t
 show-trailing-whitespace t
 tooltip-delay 1.5
 truncate-lines nil
 truncate-partial-width-windows nil
 visible-bell t)

(global-auto-revert-mode)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)

(transient-mark-mode t)


;;; Whitespace

(defun sanityinc/no-trailing-whitespace ()
  "Turn off display of trailing whitespace in this buffer."
  (setq show-trailing-whitespace nil))

;; But don't show trailing whitespace in SQLi, inf-ruby etc.
(dolist (hook '(special-mode-hook
                eww-mode-hook
                term-mode-hook
                comint-mode-hook
                compilation-mode-hook
                twittering-mode-hook
                minibuffer-setup-hook))
  (add-hook hook #'sanityinc/no-trailing-whitespace))


(require-package 'whitespace-cleanup-mode)
(global-whitespace-cleanup-mode t)

(global-set-key [remap just-one-space] 'cycle-spacing)


;;; Newline behaviour

(global-set-key (kbd "RET") 'newline-and-indent)
(defun sanityinc/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

(global-set-key (kbd "S-<return>") 'sanityinc/newline-at-end-of-line)



(when (eval-when-compile (string< "24.3.1" emacs-version))
  ;; https://github.com/purcell/emacs.d/issues/138
  (after-load 'subword
    (diminish 'subword-mode)))



(when (fboundp 'global-prettify-symbols-mode)
  (global-prettify-symbols-mode))


(require-package 'undo-tree)
(global-undo-tree-mode)
(diminish 'undo-tree-mode)



;; (require-package 'highlight-symbol)
;; (dolist (hook '(prog-mode-hook html-mode-hook css-mode-hook))
;;   (add-hook hook 'highlight-symbol-mode)
;;   (add-hook hook 'highlight-symbol-nav-mode))
;; (eval-after-load 'highlight-symbol
;;   '(diminish 'highlight-symbol-mode))

;;----------------------------------------------------------------------------
;; Zap *up* to char is a handy pair for zap-to-char
;;----------------------------------------------------------------------------
(autoload 'zap-up-to-char "misc" "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-Z") 'zap-up-to-char)



(require-package 'browse-kill-ring)


;;----------------------------------------------------------------------------
;; Don't disable narrowing commands
;;----------------------------------------------------------------------------
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;;----------------------------------------------------------------------------
;; Show matching parens
;;----------------------------------------------------------------------------
(show-paren-mode 1)

;;----------------------------------------------------------------------------
;; Expand region
;;----------------------------------------------------------------------------
(require-package 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)


;;----------------------------------------------------------------------------
;; Don't disable case-change functions
;;----------------------------------------------------------------------------
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)


;;----------------------------------------------------------------------------
;; Rectangle selections, and overwrite text when the selection is active
;;----------------------------------------------------------------------------
(cua-selection-mode t)                  ; for rectangles, CUA is nice


;;----------------------------------------------------------------------------
;; Handy key bindings
;;----------------------------------------------------------------------------
;; To be able to M-x without meta
(global-set-key (kbd "C-x C-m") 'execute-extended-command)

;; Vimmy alternatives to M-^ and C-u M-^
(global-set-key (kbd "C-c j") 'join-line)
(global-set-key (kbd "C-c J") (lambda () (interactive) (join-line 1)))

(global-set-key (kbd "C-.") 'set-mark-command)
(global-set-key (kbd "C-x C-.") 'pop-global-mark)

(require-package 'ace-jump-mode)
(global-set-key (kbd "C-;") 'ace-jump-mode)
(global-set-key (kbd "C-:") 'ace-jump-word-mode)


(require-package 'multiple-cursors)
;; multiple-cursors
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-+") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; From active region to multiple cursors:
(global-set-key (kbd "C-c c r") 'set-rectangular-region-anchor)
(global-set-key (kbd "C-c c c") 'mc/edit-lines)
(global-set-key (kbd "C-c c e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-c c a") 'mc/edit-beginnings-of-lines)


;; Train myself to use M-f and M-b instead
(global-unset-key [M-left])
(global-unset-key [M-right])



(defun kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))

(global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)


;;----------------------------------------------------------------------------
;; Page break lines
;;----------------------------------------------------------------------------
(require-package 'page-break-lines)
(global-page-break-lines-mode)
(diminish 'page-break-lines-mode)

;;----------------------------------------------------------------------------
;; Fill column indicator
;;----------------------------------------------------------------------------
(when (eval-when-compile (> emacs-major-version 23))
  (require-package 'fill-column-indicator)
  (defun sanityinc/prog-mode-fci-settings ()
    (turn-on-fci-mode)
    (when show-trailing-whitespace
      (set (make-local-variable 'whitespace-style) '(face trailing))
      (whitespace-mode 1)))

  ;;(add-hook 'prog-mode-hook 'sanityinc/prog-mode-fci-settings)

  (defun sanityinc/fci-enabled-p ()
    (and (boundp 'fci-mode) fci-mode))

  (defvar sanityinc/fci-mode-suppressed nil)
  (defadvice popup-create (before suppress-fci-mode activate)
    "Suspend fci-mode while popups are visible"
    (let ((fci-enabled (sanityinc/fci-enabled-p)))
      (when fci-enabled
        (set (make-local-variable 'sanityinc/fci-mode-suppressed) fci-enabled)
        (turn-off-fci-mode))))
  (defadvice popup-delete (after restore-fci-mode activate)
    "Restore fci-mode when all popups have closed"
    (when (and sanityinc/fci-mode-suppressed
               (null popup-instances))
      (setq sanityinc/fci-mode-suppressed nil)
      (turn-on-fci-mode)))

  ;; Regenerate fci-mode line images after switching themes
  (defadvice enable-theme (after recompute-fci-face activate)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (sanityinc/fci-enabled-p)
          (turn-on-fci-mode))))))


;;----------------------------------------------------------------------------
;; Shift lines up and down with M-up and M-down. When paredit is enabled,
;; it will use those keybindings. For this reason, you might prefer to
;; use M-S-up and M-S-down, which will work even in lisp modes.
;;----------------------------------------------------------------------------
(require-package 'move-dup)
(global-set-key [M-up] 'md/move-lines-up)
(global-set-key [M-down] 'md/move-lines-down)
(global-set-key [M-S-up] 'md/move-lines-up)
(global-set-key [M-S-down] 'md/move-lines-down)

(global-set-key (kbd "C-c p") 'md/duplicate-down)
(global-set-key (kbd "C-c P") 'md/duplicate-up)

;;----------------------------------------------------------------------------
;; Fix backward-up-list to understand quotes, see http://bit.ly/h7mdIL
;;----------------------------------------------------------------------------
(defun backward-up-sexp (arg)
  "Jump up to the start of the ARG'th enclosing sexp."
  (interactive "p")
  (let ((ppss (syntax-ppss)))
    (cond ((elt ppss 3)
           (goto-char (elt ppss 8))
           (backward-up-sexp (1- arg)))
          ((backward-up-list arg)))))

(global-set-key [remap backward-up-list] 'backward-up-sexp) ; C-M-u, C-M-up


;;----------------------------------------------------------------------------
;; Cut/copy the current line if no region is active
;;----------------------------------------------------------------------------
(require-package 'whole-line-or-region)
(whole-line-or-region-mode t)
(diminish 'whole-line-or-region-mode)
(make-variable-buffer-local 'whole-line-or-region-mode)

(defun suspend-mode-during-cua-rect-selection (mode-name)
  "Add an advice to suspend `MODE-NAME' while selecting a CUA rectangle."
  (let ((flagvar (intern (format "%s-was-active-before-cua-rectangle" mode-name)))
        (advice-name (intern (format "suspend-%s" mode-name))))
    (eval-after-load 'cua-rect
      `(progn
         (defvar ,flagvar nil)
         (make-variable-buffer-local ',flagvar)
         (defadvice cua--activate-rectangle (after ,advice-name activate)
           (setq ,flagvar (and (boundp ',mode-name) ,mode-name))
           (when ,flagvar
             (,mode-name 0)))
         (defadvice cua--deactivate-rectangle (after ,advice-name activate)
           (when ,flagvar
             (,mode-name 1)))))))

(suspend-mode-during-cua-rect-selection 'whole-line-or-region-mode)




(defun sanityinc/open-line-with-reindent (n)
  "A version of `open-line' which reindents the start and end positions.
If there is a fill prefix and/or a `left-margin', insert them
on the new line if the line would have been blank.
With arg N, insert N newlines."
  (interactive "*p")
  (let* ((do-fill-prefix (and fill-prefix (bolp)))
         (do-left-margin (and (bolp) (> (current-left-margin) 0)))
         (loc (point-marker))
         ;; Don't expand an abbrev before point.
         (abbrev-mode nil))
    (delete-horizontal-space t)
    (newline n)
    (indent-according-to-mode)
    (when (eolp)
      (delete-horizontal-space t))
    (goto-char loc)
    (while (> n 0)
      (cond ((bolp)
             (if do-left-margin (indent-to (current-left-margin)))
             (if do-fill-prefix (insert-and-inherit fill-prefix))))
      (forward-line 1)
      (setq n (1- n)))
    (goto-char loc)
    (end-of-line)
    (indent-according-to-mode)))

(global-set-key (kbd "C-o") 'sanityinc/open-line-with-reindent)


;;----------------------------------------------------------------------------
;; Random line sorting
;;----------------------------------------------------------------------------
(defun sort-lines-random (beg end)
  "Sort lines in region randomly."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ;; To make `end-of-line' and etc. to ignore fields.
          ((inhibit-field-text-motion t))
        (sort-subr nil 'forward-line 'end-of-line nil nil
                   (lambda (s1 s2) (eq (random 2) 0)))))))




(require-package 'highlight-escape-sequences)
(hes-mode)


(require-package 'guide-key)
(setq guide-key/guide-key-sequence '("C-x" "C-c" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n"))
(guide-key-mode 1)
(diminish 'guide-key-mode)


(provide 'init-editing-utils)
#+END_SRC
**** visual-regexp
#+BEGIN_SRC emacs-lisp

    (require-package 'visual-regexp)
    (define-key global-map (kbd "C-c r") 'vr/replace)
    (define-key global-map (kbd "C-c q") 'vr/query-replace)

#+END_SRC

**** multipile-cursors
#+BEGIN_SRC emacs-lisp
    (require-package 'multiple-cursors)
#+END_SRC

**** init-misc.el
#+BEGIN_SRC emacs-lisp
;;----------------------------------------------------------------------------
;; Misc config - yet to be placed in separate files
;;----------------------------------------------------------------------------
(add-auto-mode 'tcl-mode "Portfile\\'")
(fset 'yes-or-no-p 'y-or-n-p)

(dolist (hook (if (fboundp 'prog-mode)
                  '(prog-mode-hook ruby-mode-hook)
                '(find-file-hooks)))
  (add-hook hook 'goto-address-prog-mode))
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(setq goto-address-mail-face 'link)

(setq-default regex-tool-backend 'perl)

(add-auto-mode 'conf-mode "Procfile")


(provide 'init-misc)
#+END_SRC

** org, writing
(when *emacs24*
  (require 'init-org)
  (require 'init-org-mime))

**** init-org.el
#+begin_src emacs-lisp



(require-package 'ox-ioslide)
(require 'ox-ioslide)

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;; {{ export org-mode in Chinese into PDF
;; @see http://freizl.github.io/posts/tech/2012-04-06-export-orgmode-file-in-Chinese.html
;; and you need install texlive-xetex on different platforms
;; To install texlive-xetex:
;;    `sudo USE="cjk" emerge texlive-xetex` on Gentoo Linux
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
;; }}

(if (and *is-a-mac* (file-exists-p "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
    (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))

;; @see https://gist.github.com/mwfogleman/95cc60c87a9323876c6c
(defun narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise, it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((equal major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))

(when (< emacs-major-version 24)
  (require-package 'org))
(require-package 'org-fstree)
(when *is-a-mac*
  (require-package 'org-mac-link)
  (autoload 'org-mac-grab-link "org-mac-link" nil t)
  (require-package 'org-mac-iCal))

(define-key global-map (kbd "C-c l") 'org-store-link)
(define-key global-map (kbd "C-c a") 'org-agenda)

;; Various preferences
(setq org-log-done t
      org-src-fontify-natively t
      org-completion-use-ido t
      org-edit-src-content-indentation 0
      org-edit-timestamp-down-means-later t
      org-agenda-start-on-weekday nil
      org-agenda-span 14
      org-agenda-include-diary t
      org-agenda-window-setup 'current-window
      org-fast-tag-selection-single-key 'expert
      org-html-validation-link nil
      org-export-kill-product-buffer-when-displayed t
      org-export-odt-preferred-output-format "doc"
      org-tags-column 80
      ;; org-startup-indented t
      ;; {{ org 8.2.6 has some performance issue. Here is the workaround.
      ;; @see http://punchagan.muse-amuse.in/posts/how-i-learnt-to-use-emacs-profiler.html
      org-agenda-inhibit-startup t ;; ~50x speedup
      org-agenda-use-tag-inheritance nil ;; 3-4x speedup
      ;; }}
      )

; Refile targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))))
; Targets start with the file name - allows creating level 1 tasks
(setq org-refile-use-outline-path (quote file))
; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
(setq org-outline-path-complete-in-steps t)


(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "DOING(i)" "|" "DONE(d!/!)")
              (sequence "WAITING(w@/!)" "SOMEDAY(S)" "PROJECT(P@)" "|" "CANCELLED(c@/!)"))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org clock
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persistence-insinuate t)
(setq org-clock-persist t)
(setq org-clock-in-resume t)

;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")
;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Show clock sums as hours and minutes, not "n days" etc.
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; Show the clocked-in task - if any - in the header line
(defun sanityinc/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun sanityinc/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook 'sanityinc/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook 'sanityinc/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook 'sanityinc/hide-org-clock-from-header-line)

(after-load 'org-clock
  (define-key org-clock-mode-line-map [header-line mouse-2] 'org-clock-goto)
  (define-key org-clock-mode-line-map [header-line mouse-1] 'org-clock-menu))


(require-package 'org-pomodoro)
(after-load 'org-agenda
  (define-key org-agenda-mode-map (kbd "P") 'org-pomodoro))


;; ;; Show iCal calendars in the org agenda
;; (when (and *is-a-mac* (require 'org-mac-iCal nil t))
;;   (setq org-agenda-include-diary t
;;         org-agenda-custom-commands
;;         '(("I" "Import diary from iCal" agenda ""
;;            ((org-agenda-mode-hook #'org-mac-iCal)))))

;;   (add-hook 'org-agenda-cleanup-fancy-diary-hook
;;             (lambda ()
;;               (goto-char (point-min))
;;               (save-excursion
;;                 (while (re-search-forward "^[a-z]" nil t)
;;                   (goto-char (match-beginning 0))
;;                   (insert "0:00-24:00 ")))
;;               (while (re-search-forward "^ [a-z]" nil t)
;;                 (goto-char (match-beginning 0))
;;                 (save-excursion
;;                   (re-search-backward "^[0-9]+:[0-9]+-[0-9]+:[0-9]+ " nil t))
;;                 (insert (match-string 0))))))


(after-load 'org
  (define-key org-mode-map (kbd "C-M-<up>") 'org-up-element)
  (when *is-a-mac*
    (define-key org-mode-map (kbd "M-h") nil))
  (define-key org-mode-map (kbd "C-M-<up>") 'org-up-element)
  (when *is-a-mac*
    (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))

(after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . nil)
     (latex . t)
     (ledger . t)
     (ocaml . nil)
     (octave . t)
     (python . t)
     (ruby . t)
     (screen . nil)
     (sh . t)
     (sql . nil)
     (sqlite . t))))




(eval-after-load 'org
  '(progn
     (require 'org-clock)
                                        ; @see http://irreal.org/blog/?p=671
     (setq org-src-fontify-natively t)
     ;; (require 'org-fstree)
     (defun soft-wrap-lines ()
       "Make lines wrap at window edge and on word boundary,
        in current buffer."
       (interactive)
       (setq truncate-lines nil)
       (visual-line-mode)
           (if visual-line-mode
           (setq word-wrap nil)
       )
     (add-hook 'org-mode-hook '(lambda ()
                                 (setq evil-auto-indent nil)
                                 (soft-wrap-lines)
                                 )))))

(defadvice org-open-at-point (around org-open-at-point-choose-browser activate)
  (let ((browse-url-browser-function
         (cond ((equal (ad-get-arg 0) '(4))
                'browse-url-generic)
               ((equal (ad-get-arg 0) '(16))
                'choose-browser)
               (t
                (lambda (url &optional new)
                  (w3m-browse-url url t))))))
    ad-do-it))

;; {{ org2nikola set up
(setq org2nikola-output-root-directory "~/.config/nikola")
(setq org2nikola-use-google-code-prettify t)
(setq org2nikola-prettify-unsupported-language
      '(elisp "lisp"
              emacs-lisp "lisp"))
;; }}

(provide 'init-org)


#+end_src
**** init-textile.el
#+BEGIN_SRC emacs-lisp
(require-package 'textile-mode)

(autoload 'textile-mode "textile-mode" "Mode for editing Textile documents" t)
(setq auto-mode-alist
      (cons '("\\.textile\\'" . textile-mode) auto-mode-alist))


(provide 'init-textile)
#+END_SRC
**** init-markdown.el
#+BEGIN_SRC emacs-lisp
(require-package 'markdown-mode)

(setq auto-mode-alist
      (cons '("\\.\\(md\\|markdown\\)\\'" . markdown-mode) auto-mode-alist))

(provide 'init-markdown)
#+END_SRC



* dev
** basic
;;;;  (require 'init-stripe-buffer)
;;;;  (require 'init-eim) ;;  cannot be idle-required
;;;; (require 'init-hs-minor-mode)
;;;;
;;;;  ;shell
;;;;  (require 'init-sh)
;;;;  (require 'init-term-mode)
;;;;
;;;;  ; email
;;;;  (require 'init-bbdb)
;;;;  (require 'init-gnus)


*** init-vc.el
#+BEGIN_SRC emacs-lisp
(require-package 'diff-hl)
(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)


(provide 'init-vc)
#+END_SRC
*** init-darcs.el
#+BEGIN_SRC emacs-lisp
(require-package 'darcsum)
(require-package 'vc-darcs)


;; TODO: include this in the vc-darcs ELPA package
(add-to-list 'vc-handled-backends 'DARCS)
(autoload 'vc-darcs-find-file-hook "vc-darcs")
(add-hook 'find-file-hooks 'vc-darcs-find-file-hook)

(setq darcsum-whatsnew-switches "-l")

(provide 'init-darcs)
#+END_SRC
*** init-git.el
#+BEGIN_SRC emacs-lisp
;; TODO: link commits from vc-log to magit-show-commit
;; TODO: smerge-mode
(require-package 'magit)
(require-package 'git-blame)
(require-package 'git-commit-mode)
(require-package 'git-rebase-mode)
(require-package 'gitignore-mode)
(require-package 'gitconfig-mode)
(require-package 'git-messenger) ;; Though see also vc-annotate's "n" & "p" bindings
(require-package 'git-timemachine)

(setq-default
 magit-save-some-buffers nil
 magit-process-popup-time 10
 magit-diff-refine-hunk t
 magit-completing-read-function 'magit-ido-completing-read)

;; Hint: customize `magit-repo-dirs' so that you can use C-u M-F12 to
;; quickly open magit on any one of your projects.
(global-set-key [(meta f12)] 'magit-status)

(after-load 'magit
  (define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-goto-parent-section))

(require-package 'fullframe)
(after-load 'magit
  (fullframe magit-status magit-mode-quit-window))

(add-hook 'git-commit-mode-hook 'goto-address-mode)
(after-load 'session
  (add-to-list 'session-mode-disable-list 'git-commit-mode))


;;; When we start working on git-backed files, use git-wip if available

(after-load 'magit
  (global-magit-wip-save-mode)
  (diminish 'magit-wip-save-mode))

(after-load 'magit
  (diminish 'magit-auto-revert-mode))


(when *is-a-mac*
  (after-load 'magit
    (add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))



;; Convenient binding for vc-git-grep
(global-set-key (kbd "C-x v f") 'vc-git-grep)



;;; git-svn support

(require-package 'magit-svn)
(autoload 'magit-svn-enabled "magit-svn")
(defun sanityinc/maybe-enable-magit-svn-mode ()
  (when (magit-svn-enabled)
    (magit-svn-mode)))
(add-hook 'magit-status-mode-hook #'sanityinc/maybe-enable-magit-svn-mode)

(after-load 'compile
  (dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
                      '(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
    (add-to-list 'compilation-error-regexp-alist-alist defn)
    (add-to-list 'compilation-error-regexp-alist (car defn))))

(defvar git-svn--available-commands nil "Cached list of git svn subcommands")
(defun git-svn--available-commands ()
  (or git-svn--available-commands
      (setq git-svn--available-commands
            (sanityinc/string-all-matches
             "^  \\([a-z\\-]+\\) +"
             (shell-command-to-string "git svn help") 1))))

(defun git-svn (dir command)
  "Run a git svn subcommand in DIR."
  (interactive (list (read-directory-name "Directory: ")
                     (completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
  (let* ((default-directory (vc-git-root dir))
         (compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
    (compile (concat "git svn " command))))


(require-package 'git-messenger)
(global-set-key (kbd "C-x v p") #'git-messenger:popup-message)


(provide 'init-git)
#+END_SRC
*** init-github.el
#+BEGIN_SRC emacs-lisp
(require 'init-git)

(require-package 'yagist)
(require-package 'github-browse-file)
(require-package 'bug-reference-github)
(add-hook 'prog-mode-hook 'bug-reference-prog-mode)

(maybe-require-package 'github-clone)
(maybe-require-package 'magit-gh-pulls)



(provide 'init-github)
#+END_SRC
*** init-dash.el
#+BEGIN_SRC emacs-lisp
;; Support for the http://kapeli.com/dash documentation browser

(defun sanityinc/dash-installed-p ()
  "Return t if Dash is installed on this machine, or nil otherwise."
  (let ((lsregister "/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister"))
    (and (file-executable-p lsregister)
         (not (string-equal
               ""
               (shell-command-to-string
                (concat lsregister " -dump|grep com.kapeli.dash")))))))

(when (and *is-a-mac* (not (package-installed-p 'dash-at-point)))
  (message "Checking whether Dash is installed")
  (when (sanityinc/dash-installed-p)
    (require-package 'dash-at-point)))

(when (package-installed-p 'dash-at-point)
  (global-set-key (kbd "C-c D") 'dash-at-point))

(provide 'init-dash)
#+END_SRC
*** init-ledger.el
#+BEGIN_SRC emacs-lisp
(require-package 'ledger-mode)

(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))

(when (maybe-require-package 'flycheck-ledger)
  (after-load 'flycheck
    (require 'flycheck-ledger)))

(after-load 'ledger-mode
  (define-key ledger-mode-map (kbd "RET") 'newline)
  (define-key ledger-mode-map (kbd "C-o") 'open-line))

(setq ledger-highlight-xact-under-point nil
      ledger-use-iso-dates nil)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-copy-env "LEDGER_FILE"))

(add-hook 'ledger-mode-hook 'goto-address-prog-mode)

(provide 'init-ledger)
#+END_SRC

*** init-compile.el
#+BEGIN_SRC emacs-lisp
(setq-default compilation-scroll-output t)

(require-package 'alert)

;; Customize `alert-default-style' to get messages after compilation

(defun sanityinc/alert-after-compilation-finish (buf result)
  "Use `alert' to report compilation RESULT if BUF is hidden."
  (let ((buf-is-visible nil))
    (walk-windows (lambda (w)
                    (when (eq (window-buffer w) buf)
                      (setq buf-is-visible t))))
    (unless buf-is-visible
      (alert (concat "Compilation " result)
             :buffer buf
             :category 'compilation))))

(after-load 'compile
  (add-hook 'compilation-finish-functions
            'sanityinc/alert-after-compilation-finish))


(provide 'init-compile)
#+END_SRC
*** init-crontab.el
#+BEGIN_SRC emacs-lisp
(require-package 'crontab-mode)
(add-auto-mode 'crontab-mode "\\.?cron\\(tab\\)?\\'")

(provide 'init-crontab)
#+END_SRC
*** init-csv.el
#+BEGIN_SRC emacs-lisp
(require-package 'csv-mode)
(require-package 'csv-nav)

(add-auto-mode 'csv-mode "\\.[Cc][Ss][Vv]\\'")

(setq csv-separators '("," ";" "|" " "))

(provide 'init-csv)
#+END_SRC

*** highlight and linum
#+BEGIN_SRC emacs-lisp
(require-package 'highlight-indentation)
(add-hook 'python-mode-hook 'highlight-indentation-mode)

(require-package 'linum-relative)
(require 'linum-relative)
(linum-mode 1)

#+END_SRC

*** shell switcher

#+BEGIN_SRC emacs-lisp

  (require-package 'shell-switcher)
  (require 'shell-switcher)
  (setq shell-switcher-mode t)

#+END_SRC


** front
*** init-javascript.el
#+BEGIN_SRC emacs-lisp
(require-package 'json-mode)
(maybe-require-package 'js2-mode)
(maybe-require-package 'ac-js2)
(maybe-require-package 'coffee-mode)
(require-package 'js-comint)

(defcustom preferred-javascript-mode
  (first (remove-if-not #'fboundp '(js2-mode js-mode)))
  "Javascript mode to use for .js files."
  :type 'symbol
  :group 'programming
  :options '(js2-mode js-mode))
(defvar preferred-javascript-indent-level 2)

;; Need to first remove from list if present, since elpa adds entries too, which
;; may be in an arbitrary order
(eval-when-compile (require 'cl))
(setq auto-mode-alist (cons `("\\.js\\(\\.erb\\)?\\'" . ,preferred-javascript-mode)
                            (loop for entry in auto-mode-alist
                                  unless (eq preferred-javascript-mode (cdr entry))
                                  collect entry)))


;; js2-mode
(after-load 'js2-mode
  ;; Disable js2 mode's syntax error highlighting by default...
  (setq-default js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil)
  ;; ... but enable it if flycheck can't handle javascript
  (autoload 'flycheck-get-checker-for-buffer "flycheck")
  (defun sanityinc/disable-js2-checks-if-flycheck-active ()
    (unless (flycheck-get-checker-for-buffer)
      (set (make-local-variable 'js2-mode-show-parse-errors) t)
      (set (make-local-variable 'js2-mode-show-strict-warnings) t)))
  (add-hook 'js2-mode-hook 'sanityinc/disable-js2-checks-if-flycheck-active)

  (add-hook 'js2-mode-hook (lambda () (setq mode-name "JS2")))

  (setq-default
   js2-basic-offset preferred-javascript-indent-level
   js2-bounce-indent-p nil)

  (after-load 'js2-mode
    (js2-imenu-extras-setup)))

;; js-mode
(setq-default js-indent-level preferred-javascript-indent-level)


(add-to-list 'interpreter-mode-alist (cons "node" preferred-javascript-mode))


;; Javascript nests {} and () a lot, so I find this helpful

(require-package 'rainbow-delimiters)
(dolist (hook '(js2-mode-hook js-mode-hook json-mode-hook))
  (add-hook hook 'rainbow-delimiters-mode))



;;; Coffeescript

(after-load 'coffee-mode
  (setq coffee-js-mode preferred-javascript-mode
        coffee-tab-width preferred-javascript-indent-level))

(when (fboundp 'coffee-mode)
  (add-to-list 'auto-mode-alist '("\\.coffee\\.erb\\'" . coffee-mode)))

;; ---------------------------------------------------------------------------
;; Run and interact with an inferior JS via js-comint.el
;; ---------------------------------------------------------------------------

(setq inferior-js-program-command "js")

(defvar inferior-js-minor-mode-map (make-sparse-keymap))
(define-key inferior-js-minor-mode-map "\C-x\C-e" 'js-send-last-sexp)
(define-key inferior-js-minor-mode-map "\C-\M-x" 'js-send-last-sexp-and-go)
(define-key inferior-js-minor-mode-map "\C-cb" 'js-send-buffer)
(define-key inferior-js-minor-mode-map "\C-c\C-b" 'js-send-buffer-and-go)
(define-key inferior-js-minor-mode-map "\C-cl" 'js-load-file-and-go)

(define-minor-mode inferior-js-keys-mode
  "Bindings for communicating with an inferior js interpreter."
  nil " InfJS" inferior-js-minor-mode-map)

(dolist (hook '(js2-mode-hook js-mode-hook))
  (add-hook hook 'inferior-js-keys-mode))

;; ---------------------------------------------------------------------------
;; Alternatively, use skewer-mode
;; ---------------------------------------------------------------------------

(when (maybe-require-package 'skewer-mode)
  (after-load 'skewer-mode
    (add-hook 'skewer-mode-hook
              (lambda () (inferior-js-keys-mode -1)))))


(provide 'init-javascript)
#+END_SRC
*** init-php.el
#+BEGIN_SRC emacs-lisp
(require-package 'php-mode)
(require-package 'smarty-mode)

(provide 'init-php)
#+END_SRC
*** init-nxml.el
#+BEGIN_SRC emacs-lisp
(add-auto-mode
 'nxml-mode
 (concat "\\."
         (regexp-opt
          '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss"
            "gpx" "tcx" "plist"))
         "\\'"))
(setq magic-mode-alist (cons '("<\\?xml " . nxml-mode) magic-mode-alist))
(fset 'xml-mode 'nxml-mode)
(add-hook 'nxml-mode-hook (lambda ()
                            (set (make-local-variable 'ido-use-filename-at-point) nil)))
(setq nxml-slash-auto-complete-flag t)


;; See: http://sinewalker.wordpress.com/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode/
(defun sanityinc/pp-xml-region (begin end)
  "Pretty format XML markup in region. The function inserts
linebreaks to separate tags that have nothing but whitespace
between them.  It then indents the markup by using nxml's
indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end)))

;;----------------------------------------------------------------------------
;; Integration with tidy for html + xml
;;----------------------------------------------------------------------------
(require-package 'tidy)
(add-hook 'nxml-mode-hook (lambda () (tidy-build-menu nxml-mode-map)))


(provide 'init-nxml)
#+END_SRC
*** init-html.el
#+BEGIN_SRC emacs-lisp
(require-package 'tidy)
(add-hook 'html-mode-hook (lambda () (tidy-build-menu html-mode-map)))

(require-package 'tagedit)
(after-load 'sgml-mode
  (tagedit-add-paredit-like-keybindings)
  (add-hook 'sgml-mode-hook (lambda () (tagedit-mode 1))))

(add-auto-mode 'html-mode "\\.(jsp|tmpl)\\'")

;; Note: ERB is configured in init-ruby-mode

(provide 'init-html)
#+END_SRC
*** init-css.el
#+BEGIN_SRC emacs-lisp
;;; Colourise CSS colour literals
(when (maybe-require-package 'rainbow-mode)
  (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
    (add-hook hook 'rainbow-mode)))


;;; Embedding in html
(require-package 'mmm-mode)
(after-load 'mmm-vars
  (mmm-add-group
   'html-css
   '((css-cdata
      :submode css-mode
      :face mmm-code-submode-face
      :front "<style[^>]*>[ \t\n]*\\(//\\)?<!\\[CDATA\\[[ \t]*\n?"
      :back "[ \t]*\\(//\\)?]]>[ \t\n]*</style>"
      :insert ((?j js-tag nil @ "<style type=\"text/css\">"
                   @ "\n" _ "\n" @ "</style>" @)))
     (css
      :submode css-mode
      :face mmm-code-submode-face
      :front "<style[^>]*>[ \t]*\n?"
      :back "[ \t]*</style>"
      :insert ((?j js-tag nil @ "<style type=\"text/css\">"
                   @ "\n" _ "\n" @ "</style>" @)))
     (css-inline
      :submode css-mode
      :face mmm-code-submode-face
      :front "style=\""
      :back "\"")))
  (dolist (mode (list 'html-mode 'nxml-mode))
    (mmm-add-mode-ext-class mode "\\.r?html\\(\\.erb\\)?\\'" 'html-css)))




;;; SASS and SCSS
(require-package 'sass-mode)
(require-package 'scss-mode)
(setq-default scss-compile-at-save nil)



;;; LESS
(require-package 'less-css-mode)
(when (featurep 'js2-mode)
  (require-package 'skewer-less))



;;; Auto-complete CSS keywords
(after-load 'auto-complete
  (dolist (hook '(css-mode-hook sass-mode-hook scss-mode-hook))
    (add-hook hook 'ac-css-mode-setup)))


;;; Use eldoc for syntax hints
(require-package 'css-eldoc)
(autoload 'turn-on-css-eldoc "css-eldoc")
(add-hook 'css-mode-hook 'turn-on-css-eldoc)


(provide 'init-css)
#+END_SRC
*** init-haml.el
#+BEGIN_SRC emacs-lisp
(require-package 'haml-mode)

(after-load 'haml-mode
  (define-key haml-mode-map (kbd "C-o") 'open-line))

(provide 'init-haml)
#+END_SRC

** backend
*** init-python-mode.el
#+BEGIN_SRC emacs-lisp


(require-package 'pip-requirements)
 (require-package 'elpy)
 (require-package 'jedi)
 (require-package 'anaconda-mode)

(setq auto-mode-alist
      (append '(("SConstruct\\'" . python-mode)
                ("SConscript\\'" . python-mode))
              auto-mode-alist))
(autoload 'doctest-mode "doctest-mode" "Python doctest editing mode." t)

(setq interpreter-mode-alist
      (cons '("python" . python-mode) interpreter-mode-alist))


;;----------------------------------------------------------------------------
;; On-the-fly syntax checking via flymake
;;----------------------------------------------------------------------------
(eval-after-load 'python
  '(require 'flymake-python-pyflakes))

(add-hook 'python-mode-hook
          '(lambda ()
             (unless (is-buffer-file-temp)
               (message "python-mode-hook called")
               (when *emacs24*
                 (anaconda-mode)
                 (add-to-list 'company-backends 'company-anaconda)
                 (eldoc-mode))
               (if (executable-find "pyflakes")
                   (flymake-python-pyflakes-load))
               )))

(provide 'init-python-mode)
#+END_SRC
*** init-ruby-mode.el
#+BEGIN_SRC emacs-lisp
;;; Basic ruby setup
(require-package 'ruby-mode)
(require-package 'ruby-hash-syntax)

(add-auto-mode 'ruby-mode
               "Rakefile\\'" "\\.rake\\'" "\\.rxml\\'"
               "\\.rjs\\'" "\\.irbrc\\'" "\\.pryrc\\'" "\\.builder\\'" "\\.ru\\'"
               "\\.gemspec\\'" "Gemfile\\'" "Kirkfile\\'")

(setq ruby-use-encoding-map nil)

(after-load 'ruby-mode
  (define-key ruby-mode-map (kbd "TAB") 'indent-for-tab-command)

  ;; Stupidly the non-bundled ruby-mode isn't a derived mode of
  ;; prog-mode: we run the latter's hooks anyway in that case.
  (add-hook 'ruby-mode-hook
            (lambda ()
              (unless (derived-mode-p 'prog-mode)
                (run-hooks 'prog-mode-hook)))))

(add-hook 'ruby-mode-hook 'subword-mode)

;; TODO: hippie-expand ignoring : for names in ruby-mode
;; TODO: hippie-expand adaptor for auto-complete sources


;;; Inferior ruby
(require-package 'inf-ruby)
(require-package 'ac-inf-ruby)
(after-load 'auto-complete
  (add-to-list 'ac-modes 'inf-ruby-mode))
(add-hook 'inf-ruby-mode-hook 'ac-inf-ruby-enable)
(after-load 'inf-ruby
  (define-key inf-ruby-mode-map (kbd "TAB") 'auto-complete))



;;; Ruby compilation
(require-package 'ruby-compilation)

(after-load 'ruby-mode
  (let ((m ruby-mode-map))
    (define-key m [S-f7] 'ruby-compilation-this-buffer)
    (define-key m [f7] 'ruby-compilation-this-test)
    (define-key m [f6] 'recompile)))



;;; Robe
(require-package 'robe)
(after-load 'ruby-mode
  (add-hook 'ruby-mode-hook 'robe-mode))
(after-load 'robe
  (add-hook 'robe-mode-hook
            (lambda ()
              (add-to-list 'ac-sources 'ac-source-robe)
              (set-auto-complete-as-completion-at-point-function))))



;;; ri support
(require-package 'yari)
(defalias 'ri 'yari)



;;; YAML

(require-package 'yaml-mode)



;;; ERB
(require-package 'mmm-mode)
(defun sanityinc/ensure-mmm-erb-loaded ()
  (require 'mmm-erb))

(require 'derived)

(defun sanityinc/set-up-mode-for-erb (mode)
  (add-hook (derived-mode-hook-name mode) 'sanityinc/ensure-mmm-erb-loaded)
  (mmm-add-mode-ext-class mode "\\.erb\\'" 'erb))

(let ((html-erb-modes '(html-mode html-erb-mode nxml-mode)))
  (dolist (mode html-erb-modes)
    (sanityinc/set-up-mode-for-erb mode)
    (mmm-add-mode-ext-class mode "\\.r?html\\(\\.erb\\)?\\'" 'html-js)
    (mmm-add-mode-ext-class mode "\\.r?html\\(\\.erb\\)?\\'" 'html-css)))

(mapc 'sanityinc/set-up-mode-for-erb
      '(coffee-mode js-mode js2-mode js3-mode markdown-mode textile-mode))

(mmm-add-mode-ext-class 'html-erb-mode "\\.jst\\.ejs\\'" 'ejs)

(add-auto-mode 'html-erb-mode "\\.rhtml\\'" "\\.html\\.erb\\'")
(add-to-list 'auto-mode-alist '("\\.jst\\.ejs\\'"  . html-erb-mode))
(mmm-add-mode-ext-class 'yaml-mode "\\.yaml\\'" 'erb)

(dolist (mode (list 'js-mode 'js2-mode 'js3-mode))
  (mmm-add-mode-ext-class mode "\\.js\\.erb\\'" 'erb))


;;----------------------------------------------------------------------------
;; Ruby - my convention for heredocs containing SQL
;;----------------------------------------------------------------------------

;; Needs to run after rinari to avoid clobbering font-lock-keywords?

;; (require-package 'mmm-mode)
;; (eval-after-load 'mmm-mode
;;   '(progn
;;      (mmm-add-classes
;;       '((ruby-heredoc-sql
;;          :submode sql-mode
;;          :front "<<-?[\'\"]?\\(end_sql\\)[\'\"]?"
;;          :save-matches 1
;;          :front-offset (end-of-line 1)
;;          :back "^[ \t]*~1$"
;;          :delimiter-mode nil)))
;;      (mmm-add-mode-ext-class 'ruby-mode "\\.rb\\'" 'ruby-heredoc-sql)))

;(add-to-list 'mmm-set-file-name-for-modes 'ruby-mode)


(provide 'init-ruby-mode)
#+END_SRC
*** init-rails.el
#+BEGIN_SRC emacs-lisp
(require-package 'rinari)
(after-load 'rinari
  (diminish 'rinari-minor-mode "Rin"))
(global-rinari-mode)

(defun update-rails-ctags ()
  (interactive)
  (let ((default-directory (or (rinari-root) default-directory)))
    (shell-command (concat "ctags -a -e -f " rinari-tags-file-name " --tag-relative -R app lib vendor test"))))


(provide 'init-rails)
#+END_SRC
*** init-sql.el
#+BEGIN_SRC emacs-lisp
(require-package 'sql-indent)
(after-load 'sql
  (require 'sql-indent))

(defun sanityinc/pop-to-sqli-buffer ()
  "Switch to the corresponding sqli buffer."
  (interactive)
  (if sql-buffer
      (progn
        (pop-to-buffer sql-buffer)
        (goto-char (point-max)))
    (sql-set-sqli-buffer)
    (when sql-buffer
      (sanityinc/pop-to-sqli-buffer))))

(after-load 'sql
  (define-key sql-mode-map (kbd "C-c C-z") 'sanityinc/pop-to-sqli-buffer)
  (add-hook 'sql-interactive-mode-hook 'sanityinc/never-indent)
  (when (package-installed-p 'dash-at-point)
    (defun sanityinc/maybe-set-dash-db-docset ()
      (when (eq sql-product 'postgres)
        (setq dash-at-point-docset "psql")))

    (add-hook 'sql-mode-hook 'sanityinc/maybe-set-dash-db-docset)
    (add-hook 'sql-interactive-mode-hook 'sanityinc/maybe-set-dash-db-docset)
    (defadvice sql-set-product (after set-dash-docset activate)
      (sanityinc/maybe-set-dash-db-docset))))

(setq-default sql-input-ring-file-name
              (expand-file-name ".sqli_history" user-emacs-directory))

;; See my answer to https://emacs.stackexchange.com/questions/657/why-do-sql-mode-and-sql-interactive-mode-not-highlight-strings-the-same-way/673
(defun sanityinc/font-lock-everything-in-sql-interactive-mode ()
  (unless (eq 'oracle sql-product)
    (sql-product-font-lock nil nil)))
(add-hook 'sql-interactive-mode-hook 'sanityinc/font-lock-everything-in-sql-interactive-mode)


(after-load 'page-break-lines
  (push 'sql-mode page-break-lines-modes))

(provide 'init-sql)
#+END_SRC
*** init-haskell.el
#+BEGIN_SRC emacs-lisp
(require-package 'haskell-mode)


;; Completion

;; Hook auto-complete into the completions provided by the inferior
;; haskell process, if any.

(require-package 'ac-haskell-process)

(add-hook 'interactive-haskell-mode-hook 'ac-haskell-process-setup)
(add-hook 'haskell-interactive-mode-hook 'ac-haskell-process-setup)

(after-load 'haskell-mode
  (define-key haskell-mode-map (kbd "C-c C-d") 'ac-haskell-process-popup-doc))

(after-load 'auto-complete
  (add-to-list 'ac-modes 'haskell-interactive-mode)
  (add-hook 'haskell-interactive-mode-hook 'set-auto-complete-as-completion-at-point-function))



;; Flycheck specifics

(when (and (maybe-require-package 'flycheck-haskell)
           (require-package 'flycheck-hdevtools))
  (after-load 'flycheck
    (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)

    (defun sanityinc/flycheck-haskell-reconfigure ()
      "Reconfigure flycheck haskell settings, e.g. after changing cabal file."
      (interactive)
      (unless (eq major-mode 'haskell-mode)
        (error "Expected to be in haskell-mode"))
      (flycheck-haskell-clear-config-cache)
      (flycheck-haskell-configure)
      (flycheck-mode -1)
      (flycheck-mode))

    (defadvice haskell-mode-stylish-buffer (around skip-if-flycheck-errors activate)
      "Don't run stylish-buffer if the buffer appears to have a syntax error.
This isn't a hard guarantee, since flycheck might sometimes not run until the file has
been saved."
      (unless (flycheck-has-current-errors-p 'error)
        ad-do-it))

    (require 'flycheck-hdevtools)))


;; Docs

(dolist (hook '(haskell-mode-hook inferior-haskell-mode-hook haskell-interactive-mode-hook))
  (add-hook hook 'turn-on-haskell-doc-mode)
  (add-hook hook (lambda () (subword-mode +1)))
  (add-hook hook (lambda () (eldoc-mode 1))))
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(add-hook 'haskell-interactive-mode-hook 'sanityinc/no-trailing-whitespace)


;; Interaction

(after-load 'haskell
  (diminish 'interactive-haskell-mode " IntHS"))

(add-auto-mode 'haskell-mode "\\.ghci\\'")

(when (maybe-require-package 'ghci-completion)
  (add-hook 'inferior-haskell-mode-hook 'turn-on-ghci-completion))



;; Indentation
(require-package 'hi2)
(add-hook 'haskell-mode-hook 'turn-on-hi2)



;; Source code helpers

(add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)

(setq-default haskell-stylish-on-save t)

(maybe-require-package 'hayoo)
(after-load 'haskell-mode
  (define-key haskell-mode-map (kbd "C-c h") 'hoogle)
  (define-key haskell-mode-map (kbd "C-o") 'open-line))


(after-load 'page-break-lines
  (push 'haskell-mode page-break-lines-modes))

;; Make compilation-mode understand "at blah.hs:11:34-50" lines output by GHC
(after-load 'compile
  (let ((alias 'ghc-at-regexp))
    (add-to-list
     'compilation-error-regexp-alist-alist
     (list alias " at \\(.*\\.\\(?:l?[gh]hs\\|hi\\)\\):\\([0-9]+\\):\\([0-9]+\\)-[0-9]+$" 1 2 3 0 1))
    (add-to-list
     'compilation-error-regexp-alist alias)))



(provide 'init-haskell)
#+END_SRC
*** init-erlang.el
#+BEGIN_SRC emacs-lisp
(ignore-errors
  (require-package 'erlang))

(when (package-installed-p 'erlang)
  (require 'erlang-start))

(add-to-list 'ac-modes 'erlang-mode)

(provide 'init-erlang)
#+END_SRC

** lisp
*** init-paredit.el
#+BEGIN_SRC emacs-lisp
(require-package 'paredit)
(autoload 'enable-paredit-mode "paredit")

(defun maybe-map-paredit-newline ()
  (unless (or (memq major-mode '(inferior-emacs-lisp-mode cider-repl-mode))
              (minibufferp))
    (local-set-key (kbd "RET") 'paredit-newline)))

(add-hook 'paredit-mode-hook 'maybe-map-paredit-newline)

(after-load 'paredit
  (diminish 'paredit-mode " Par")
  (dolist (binding (list (kbd "C-<left>") (kbd "C-<right>")
                         (kbd "C-M-<left>") (kbd "C-M-<right>")))
    (define-key paredit-mode-map binding nil))

  ;; Disable kill-sentence, which is easily confused with the kill-sexp
  ;; binding, but doesn't preserve sexp structure
  (define-key paredit-mode-map [remap kill-sentence] nil)
  (define-key paredit-mode-map [remap backward-kill-sentence] nil)

  ;; Allow my global binding of M-? to work when paredit is active
  (define-key paredit-mode-map (kbd "M-?") nil))


;; Compatibility with other modes

(suspend-mode-during-cua-rect-selection 'paredit-mode)


;; Use paredit in the minibuffer
;; TODO: break out into separate package
;; http://emacsredux.com/blog/2013/04/18/evaluate-emacs-lisp-in-the-minibuffer/
(add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)

(defvar paredit-minibuffer-commands '(eval-expression
                                      pp-eval-expression
                                      eval-expression-with-eldoc
                                      ibuffer-do-eval
                                      ibuffer-do-view-and-eval)
  "Interactive commands for which paredit should be enabled in the minibuffer.")

(defun conditionally-enable-paredit-mode ()
  "Enable paredit during lisp-related minibuffer commands."
  (if (memq this-command paredit-minibuffer-commands)
      (enable-paredit-mode)))

;; ----------------------------------------------------------------------------
;; Enable some handy paredit functions in all prog modes
;; ----------------------------------------------------------------------------

(require-package 'paredit-everywhere)
(add-hook 'prog-mode-hook 'paredit-everywhere-mode)
(add-hook 'css-mode-hook 'paredit-everywhere-mode)

(provide 'init-paredit)
#+END_SRC
*** init-maxima
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/maxima/5.34.1/emacs")
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
(add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))

#+END_SRC

*** init-lisp.el
#+BEGIN_SRC emacs-lisp
(require-package 'elisp-slime-nav)
(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
  (add-hook hook 'elisp-slime-nav-mode))

(require-package 'lively)

(setq-default initial-scratch-message
              (concat ";; Happy hacking " (or user-login-name "") "!\n\n"))



;; Make C-x C-e run 'eval-region if the region is active

(defun sanityinc/eval-last-sexp-or-region (prefix)
  "Eval region from BEG to END if active, otherwise the last sexp."
  (interactive "P")
  (if (and (mark) (use-region-p))
      (eval-region (min (point) (mark)) (max (point) (mark)))
    (pp-eval-last-sexp prefix)))

(global-set-key (kbd "M-:") 'pp-eval-expression)

(after-load 'lisp-mode
  (define-key emacs-lisp-mode-map (kbd "C-x C-e") 'sanityinc/eval-last-sexp-or-region))

(require-package 'ipretty)
(ipretty-mode 1)


(defadvice pp-display-expression (after make-read-only (expression out-buffer-name) activate)
  "Enable `view-mode' in the output buffer - if any - so it can be closed with `\"q\"."
  (when (get-buffer out-buffer-name)
    (with-current-buffer out-buffer-name
      (view-mode 1))))



;; Use C-c C-z to toggle between elisp files and an ielm session
;; I might generalise this to ruby etc., or even just adopt the repl-toggle package.

(defvar sanityinc/repl-original-buffer nil
  "Buffer from which we jumped to this REPL.")
(make-variable-buffer-local 'sanityinc/repl-original-buffer)

(defvar sanityinc/repl-switch-function 'switch-to-buffer-other-window)

(defun sanityinc/switch-to-ielm ()
  (interactive)
  (let ((orig-buffer (current-buffer)))
    (if (get-buffer "*ielm*")
        (funcall sanityinc/repl-switch-function "*ielm*")
      (ielm))
    (setq sanityinc/repl-original-buffer orig-buffer)))

(defun sanityinc/repl-switch-back ()
  "Switch back to the buffer from which we reached this REPL."
  (interactive)
  (if sanityinc/repl-original-buffer
      (funcall sanityinc/repl-switch-function sanityinc/repl-original-buffer)
    (error "No original buffer.")))

(after-load 'lisp-mode
  (define-key emacs-lisp-mode-map (kbd "C-c C-z") 'sanityinc/switch-to-ielm))
(after-load 'ielm
  (define-key ielm-map (kbd "C-c C-z") 'sanityinc/repl-switch-back))

;; ----------------------------------------------------------------------------
;; Hippie-expand
;; ----------------------------------------------------------------------------

(defun my/emacs-lisp-module-name ()
  "Search the buffer for `provide' declaration."
  (save-excursion
    (goto-char (point-min))
    (when (search-forward-regexp "^(provide '" nil t)
      (symbol-name (symbol-at-point)))))

;; Credit to Chris Done for this one.
(defun my/try-complete-lisp-symbol-without-namespace (old)
  "Hippie expand \"try\" function which expands \"-foo\" to \"modname-foo\" in elisp."
  (unless old
    (he-init-string (he-lisp-symbol-beg) (point))
    (when (string-prefix-p "-" he-search-string)
      (let ((mod-name (my/emacs-lisp-module-name)))
        (when mod-name
          (setq he-expand-list (list (concat mod-name he-search-string)))))))
  (when he-expand-list
    (he-substitute-string (car he-expand-list))
    (setq he-expand-list nil)
    t))

(defun set-up-hippie-expand-for-elisp ()
  "Locally set `hippie-expand' completion functions for use with Emacs Lisp."
  (make-local-variable 'hippie-expand-try-functions-list)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol t)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol-partially t)
  (add-to-list 'hippie-expand-try-functions-list 'my/try-complete-lisp-symbol-without-namespace t))


;; ----------------------------------------------------------------------------
;; Automatic byte compilation
;; ----------------------------------------------------------------------------

(require-package 'auto-compile)
(auto-compile-on-save-mode 1)
(auto-compile-on-load-mode 1)

;; ----------------------------------------------------------------------------
;; Load .el if newer than corresponding .elc
;; ----------------------------------------------------------------------------
(setq load-prefer-newer t)

;; ----------------------------------------------------------------------------
;; Highlight current sexp
;; ----------------------------------------------------------------------------

(require-package 'hl-sexp)

;; Prevent flickery behaviour due to hl-sexp-mode unhighlighting before each command
(after-load 'hl-sexp
  (defadvice hl-sexp-mode (after unflicker (&optional turn-on) activate)
    (when turn-on
      (remove-hook 'pre-command-hook #'hl-sexp-unhighlight))))



;;; Support byte-compilation in a sub-process, as
;;; required by highlight-cl

(defun sanityinc/byte-compile-file-batch (filename)
  "Byte-compile FILENAME in batch mode, ie. a clean sub-process."
  (interactive "fFile to byte-compile in batch mode: ")
  (let ((emacs (car command-line-args)))
    (compile
     (concat
      emacs " "
      (mapconcat
       'shell-quote-argument
       (list "-Q" "-batch" "-f" "batch-byte-compile" filename)
       " ")))))


;; ----------------------------------------------------------------------------
;; Enable desired features for all lisp modes
;; ----------------------------------------------------------------------------
(require-package 'rainbow-delimiters)
(require-package 'redshank)
(after-load 'redshank
  (diminish 'redshank-mode))

(maybe-require-package 'aggressive-indent)

(defun sanityinc/lisp-setup ()
  "Enable features useful in any Lisp mode."
  (rainbow-delimiters-mode t)
  (enable-paredit-mode)
  (when (fboundp 'aggressive-indent-mode)
    (aggressive-indent-mode))
  (turn-on-eldoc-mode)
  (redshank-mode)
  (add-hook 'after-save-hook #'check-parens nil t))

(defun sanityinc/emacs-lisp-setup ()
  "Enable features useful when working with elisp."
  (elisp-slime-nav-mode t)
  (set-up-hippie-expand-for-elisp)
  (ac-emacs-lisp-mode-setup))

(defconst sanityinc/elispy-modes
  '(emacs-lisp-mode ielm-mode)
  "Major modes relating to elisp.")

(defconst sanityinc/lispy-modes
  (append sanityinc/elispy-modes
          '(lisp-mode inferior-lisp-mode lisp-interaction-mode))
  "All lispy major modes.")

(require 'derived)

(dolist (hook (mapcar #'derived-mode-hook-name sanityinc/lispy-modes))
  (add-hook hook 'sanityinc/lisp-setup))

(dolist (hook (mapcar #'derived-mode-hook-name sanityinc/elispy-modes))
  (add-hook hook 'sanityinc/emacs-lisp-setup))

(if (boundp 'eval-expression-minibuffer-setup-hook)
    (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
  (require-package 'eldoc-eval)
  (require 'eldoc-eval)
  (eldoc-in-minibuffer-mode 1))

(add-to-list 'auto-mode-alist '("\\.emacs-project\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("archive-contents\\'" . emacs-lisp-mode))

(require-package 'cl-lib-highlight)
(after-load 'lisp-mode
  (cl-lib-highlight-initialize))

;; ----------------------------------------------------------------------------
;; Delete .elc files when reverting the .el from VC or magit
;; ----------------------------------------------------------------------------

;; When .el files are open, we can intercept when they are modified
;; by VC or magit in order to remove .elc files that are likely to
;; be out of sync.

;; This is handy while actively working on elisp files, though
;; obviously it doesn't ensure that unopened files will also have
;; their .elc counterparts removed - VC hooks would be necessary for
;; that.

(defvar sanityinc/vc-reverting nil
  "Whether or not VC or Magit is currently reverting buffers.")

(defadvice revert-buffer (after sanityinc/maybe-remove-elc activate)
  "If reverting from VC, delete any .elc file that will now be out of sync."
  (when sanityinc/vc-reverting
    (when (and (eq 'emacs-lisp-mode major-mode)
               buffer-file-name
               (string= "el" (file-name-extension buffer-file-name)))
      (let ((elc (concat buffer-file-name "c")))
        (when (file-exists-p elc)
          (message "Removing out-of-sync elc file %s" (file-name-nondirectory elc))
          (delete-file elc))))))

(defadvice magit-revert-buffers (around sanityinc/reverting activate)
  (let ((sanityinc/vc-reverting t))
    ad-do-it))
(defadvice vc-revert-buffer-internal (around sanityinc/reverting activate)
  (let ((sanityinc/vc-reverting t))
    ad-do-it))



(require-package 'macrostep)

(after-load 'lisp-mode
  (define-key emacs-lisp-mode-map (kbd "C-c e") 'macrostep-expand))



;; A quick way to jump to the definition of a function given its key binding
(global-set-key (kbd "C-h K") 'find-function-on-key)



(when (maybe-require-package 'rainbow-mode)
  (defun sanityinc/enable-rainbow-mode-if-theme ()
    (when (string-match "\\(color-theme-\\|-theme\\.el\\)" (buffer-name))
      (rainbow-mode 1)))

  (add-hook 'emacs-lisp-mode-hook 'sanityinc/enable-rainbow-mode-if-theme))

(when (maybe-require-package 'highlight-quoted)
  (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))


(when (maybe-require-package 'flycheck)
  (require-package 'flycheck-package)
  (after-load 'flycheck
    (flycheck-package-setup)))



;; ERT
(after-load 'ert
  (define-key ert-results-mode-map (kbd "g") 'ert-results-rerun-all-tests))


(defun sanityinc/cl-libify-next ()
  "Find next symbol from 'cl and replace it with the 'cl-lib equivalent."
  (interactive)
  (let ((case-fold-search nil))
    (re-search-forward
     (concat
      "("
      (regexp-opt
       ;; Not an exhaustive list
       '("loop" "incf" "plusp" "first" "decf" "minusp" "assert"
         "case" "destructuring-bind" "second" "third" "defun*"
         "defmacro*" "return-from" "labels" "cadar" "fourth"
         "cadadr") t)
      "\\_>")))
  (let ((form (match-string 1)))
    (backward-sexp)
    (cond
     ((string-match "^\\(defun\\|defmacro\\)\\*$")
      (kill-sexp)
      (insert (concat "cl-" (match-string 1))))
     (t
      (insert "cl-")))
    (when (fboundp 'aggressive-indent-indent-defun)
      (aggressive-indent-indent-defun))))


(provide 'init-lisp)
#+END_SRC
*** init-slime.el
#+BEGIN_SRC emacs-lisp
(require-package 'slime)
;; package.el compiles the contrib subdir, but the compilation order
;; causes problems, so we remove the .elc files there. See
;; http://lists.common-lisp.net/pipermail/slime-devel/2012-February/018470.html
;; I use sbcl, `C-h v slime-read-interactive-args RET` for details
;; you need install the program sbcl, of course
(setq inferior-lisp-program "sbcl")
(load "/Users/lhr/quicklisp/slime-helper")

(eval-after-load 'slime
  '(progn
     (add-to-list 'load-path (concat (sanityinc/directory-of-library "slime") "/contrib"))
     (setq slime-contribs '(slime-fancy))
     (setq slime-protocol-version 'ignore)
     (setq slime-net-coding-system 'utf-8-unix)
     (setq slime-complete-symbol*-fancy t)
     ))



(mapc #'delete-file
      (file-expand-wildcards (concat user-emacs-directory "elpa/slime-2*/contrib/*.elc")))

(require-package 'ac-slime)
(require-package 'hippie-expand-slime)


;;; Lisp buffers

(defun sanityinc/slime-setup ()
  "Mode setup function for slime lisp buffers."
  (set-up-slime-hippie-expand)
  (set-up-slime-ac t))

(after-load 'slime
  (setq slime-protocol-version 'ignore)
  (setq slime-net-coding-system 'utf-8-unix)
  (slime-setup '(slime-repl slime-fuzzy))
  (setq slime-complete-symbol*-fancy t)
  (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
  (add-hook 'slime-mode-hook 'sanityinc/slime-setup))


;;; REPL

(defun sanityinc/slime-repl-setup ()
  "Mode setup function for slime REPL."
  (sanityinc/lisp-setup)
  (set-up-slime-hippie-expand)
  (set-up-slime-ac t)
  (setq show-trailing-whitespace nil))

(after-load 'slime-repl
  ;; Stop SLIME's REPL from grabbing DEL, which is annoying when backspacing over a '('
  (after-load 'paredit
    (define-key slime-repl-mode-map (read-kbd-macro paredit-backward-delete-key) nil))

  ;; Bind TAB to `indent-for-tab-command', as in regular Slime buffers.
  (define-key slime-repl-mode-map (kbd "TAB") 'indent-for-tab-command)

  (add-hook 'slime-repl-mode-hook 'sanityinc/slime-repl-setup))

(after-load 'auto-complete
  (add-to-list 'ac-modes 'slime-repl-mode))


(provide 'init-slime)
#+END_SRC
*** init-clojure.el
#+BEGIN_SRC emacs-lisp
;; Basic clojure support, even in Emacs 23
;; See also init-clojure-cider.el

(require-package 'clojure-mode)
(require-package 'cljsbuild-mode)
(require-package 'elein)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Slime with Clojure
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun slime-clojure-repl-setup ()
  "Some REPL setup additional to that in durendal."
  (when (string-equal (slime-lisp-implementation-name) "clojure")
    (when (slime-inferior-process)
      (message "Setting up repl for clojure")
      (slime-redirect-inferior-output))

    (set-syntax-table clojure-mode-syntax-table)
    (setq lisp-indent-function 'clojure-indent-function)
    (let (font-lock-mode)
      (clojure-mode-font-lock-setup))))

(after-load 'slime-repl
  (add-hook 'slime-repl-mode-hook 'slime-clojure-repl-setup))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Misc clojure tweaks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after-load 'clojure-mode
  (add-hook 'clojure-mode-hook 'sanityinc/lisp-setup)
  (add-hook 'clojure-mode-hook 'subword-mode))



;; Use clojure-mode for clojurescript, since clojurescript-mode
;; pulls in Slime
(add-auto-mode 'clojure-mode "\\.cljs\\'")


(provide 'init-clojure)
#+END_SRC
*** clojure

(when (>= emacs-major-version 24)
  (require 'init-clojure-cider))

*** init-common-lisp.el
#+BEGIN_SRC emacs-lisp
;; See http://bc.tech.coop/blog/070927.html
(add-auto-mode 'lisp-mode "\\.cl\\'")
(add-hook 'lisp-mode-hook (lambda ()
                            (unless (featurep 'slime)
                              (require 'slime)
                              (normal-mode))))

(after-load 'slime
  (when (executable-find "sbcl")
    (add-to-list 'slime-lisp-implementations
                 '(sbcl ("sbcl") :coding-system utf-8-unix)))
  (when (executable-find "lisp")
    (add-to-list 'slime-lisp-implementations
                 '(cmucl ("lisp") :coding-system iso-latin-1-unix)))
  (when (executable-find "ccl")
    (add-to-list 'slime-lisp-implementations
                 '(ccl ("ccl") :coding-system utf-8-unix))))

;; From http://bc.tech.coop/blog/070515.html
(defun lispdoc ()
  "Searches lispdoc.com for SYMBOL, which is by default the symbol currently under the curser"
  (interactive)
  (let* ((word-at-point (word-at-point))
         (symbol-at-point (symbol-at-point))
         (default (symbol-name symbol-at-point))
         (inp (read-from-minibuffer
               (if (or word-at-point symbol-at-point)
                   (concat "Symbol (default " default "): ")
                 "Symbol (no default): "))))
    (if (and (string= inp "") (not word-at-point) (not
                                                   symbol-at-point))
        (message "you didn't enter a symbol!")
      (let ((search-type (read-from-minibuffer
                          "full-text (f) or basic (b) search (default b)? ")))
        (browse-url (concat "http://lispdoc.com?q="
                            (if (string= inp "")
                                default
                              inp)
                            "&search="
                            (if (string-equal search-type "f")
                                "full+text+search"
                              "basic+search")))))))

(define-key lisp-mode-map (kbd "C-c l") 'lispdoc)


(provide 'init-common-lisp)
#+END_SRC

** other language
;;;; (require 'init-elisp)



;;;; ;;c
;;;; (require 'init-gtags)
;;;; (require 'init-ctags)
;;;;
;;;; (require 'init-cc-mode)
;;;; (require 'init-gud)
;;;; (require 'init-cmake-mode)

;;;; ;;;
;;;; (require 'init-zencoding-mode)
;;;; (require 'init-csharp-mode)
;;;; (require 'init-lua-mode)

;;;; (require 'init-elisp)


(when *spell-check-support-enabled*
  (require 'init-spelling))


* evil
** init-evil.el
evil org-evil 在这之后吧
#+BEGIN_SRC emacs-lisp
;; @see https://bitbucket.org/lyro/evil/issue/360/possible-evil-search-symbol-forward
;; evil 1.0.8 search word instead of symbol



;; (setq evil-symbol-word-search t)
;; ;; load undo-tree and ert
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/evil/lib")



;;(require-package 'evil)
;;(evil-mode nil)

(require-package 'evil)
(require 'evil)

;; @see https://bitbucket.org/lyro/evil/issue/342/evil-default-cursor-setting-should-default
;; cursor is alway black because of evil
;; here is the workaround
(setq evil-default-cursor t)

;; enable evil-mode
(evil-mode 1)


;;from yt.rc
;;(add-hook 'prodigy-mode-hook 'evil-emacs-state)
;;(evil-set-initial-state 'magit-mode 'emacs)



;;;; {{@see https://github.com/timcharper/evil-surround
(require-package 'evil-surround)
(require 'evil-surround)
(global-evil-surround-mode 1)
(evil-define-key 'visual evil-surround-mode-map "s" 'evil-substitute)
;;;; }}

;;;; {{ https://github.com/syl20bnr/evil-escape

;; (require-package 'evil-escape)
;; (require 'evil-escape)
;; ;;;; key-chord is used by evil-escape
;; (setq-default evil-escape-delay 0.5)
;; (setq-default evil-escape-key-sequence ",,")
;; (evil-escape-mode 1)
;; ;;;; }}

;;;; Move back the cursor one position when exiting insert mode
(setq evil-move-cursor-back nil)

(defun toggle-org-or-message-mode ()
  (interactive)
  (if (eq major-mode 'message-mode)
      (org-mode)
    (if (eq major-mode 'org-mode) (message-mode))
    ))

;;(evil-set-initial-state 'org-mode 'emacs)
;;;; Remap org-mode meta keys for convenience
(evil-declare-key 'normal org-mode-map
  "gh" 'outline-up-heading
  "gl" 'outline-next-visible-heading
  "H" 'org-beginning-of-line ; smarter behaviour on headlines etc.
  "L" 'org-end-of-line ; smarter behaviour on headlines etc.
  "$" 'org-end-of-line ; smarter behaviour on headlines etc.
  "^" 'org-beginning-of-line ; ditto
  "-" 'org-ctrl-c-minus ; change bullet style
  "<" 'org-metaleft ; out-dent
  ">" 'org-metaright ; indent
  (kbd "TAB") 'org-cycle
  (kbd "C-<tab>") 'tabbar-forward
  )

(loop for (mode . state) in
      '(
        (minibuffer-inactive-mode . emacs)
        (ggtags-global-mode . emacs)
        (grep-mode . emacs)
        (Info-mode . emacs)
        (term-mode . emacs)
        (sdcv-mode . emacs)
        (anaconda-nav-mode . emacs)
        (log-edit-mode . emacs)
        (vc-log-edit-mode . emacs)
        (magit-log-edit-mode . emacs)
        (inf-ruby-mode . emacs)
        (direx:direx-mode . emacs)
        (yari-mode . emacs)
        (erc-mode . emacs)
        (w3m-mode . emacs)
        (gud-mode . emacs)
        (help-mode . emacs)
        (eshell-mode . emacs)
        (shell-mode . emacs)
        (message-mode . emacs)
        (fundamental-mode . emacs)
        (weibo-timeline-mode . emacs)
        (weibo-post-mode . emacs)
        (sr-mode . emacs)
        (dired-mode . emacs)
        (compilation-mode . emacs)
        (speedbar-mode . emacs)
        (magit-commit-mode . normal)
        (magit-diff-mode . normal)
        (js2-error-buffer-mode . emacs)
        )
      do (evil-set-initial-state mode state))

(evil-define-key 'motion magit-commit-mode-map
  (kbd "TAB") 'magit-toggle-section
  (kbd "RET") 'magit-visit-item
  (kbd "C-w") 'magit-copy-item-as-kill)

(evil-define-key 'motion magit-diff-mode-map
  (kbd "TAB") 'magit-toggle-section
  (kbd "RET") 'magit-visit-item
  (kbd "C-w") 'magit-copy-item-as-kill)

(define-key evil-ex-completion-map (kbd "M-p") 'previous-complete-history-element)
(define-key evil-ex-completion-map (kbd "M-n") 'next-complete-history-element)
(define-key evil-normal-state-map "Y" (kbd "y$"))
(define-key evil-normal-state-map "+" 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map "-" 'evil-numbers/dec-at-pt)
(define-key evil-normal-state-map "go" 'goto-char)
(define-key evil-normal-state-map (kbd "M-y") 'browse-kill-ring)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

;;;; {{ evil-matchit
(require-package 'evil-matchit)
(require 'evil-matchit)
(global-evil-matchit-mode 1)
;;;; }}

(eval-after-load "evil"
  '(setq expand-region-contract-fast-key "z"))

;;;; @see http://stackoverflow.com/questions/10569165/how-to-map-jj-to-esc-in-emacs-evil-mode
;;;; @see http://zuttobenkyou.wordpress.com/2011/02/15/some-thoughts-on-emacs-and-vim/
(define-key evil-insert-state-map "k" #'cofi/maybe-exit)
(evil-define-command cofi/maybe-exit ()
  :repeat change
  (interactive)
  (let ((modified (buffer-modified-p)))
    (insert "k")
    (let ((evt (read-event (format "Insert %c to exit insert state" ?j)
                           nil 0.5)))
      (cond
       ((null evt) (message ""))
       ((and (integerp evt) (char-equal evt ?j))
        (delete-char -1)
        (set-buffer-modified-p modified)
        (push 'escape unread-command-events))
       (t (setq unread-command-events (append unread-command-events
                                              (list evt))))))))



;; (define-key evil-insert-state-map (kbd "s-k") 'evil-exit-visual-state)
;; (define-key evil-insert-state-map (kbd "s-k") 'evil-normal-state)


(define-key evil-insert-state-map (kbd "M-a") 'move-beginning-of-line)
(define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "M-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "C-k") 'kill-line)
(define-key evil-insert-state-map (kbd "M-k") 'evil-normal-state)
(define-key evil-visual-state-map (kbd "M-k") 'evil-exit-visual-state)
(define-key minibuffer-local-map (kbd "M-k") 'abort-recursive-edit)
(define-key evil-insert-state-map (kbd "M-j") 'my-yas-expand)
(define-key evil-emacs-state-map (kbd "M-j") 'my-yas-expand)
(define-key evil-normal-state-map (kbd "C-e") 'evil-end-of-line)
(global-set-key (kbd "M-k") 'keyboard-quit)
(global-set-key (kbd "C-r") 'undo-tree-redo)

;; esc quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(defun evilcvn--change-symbol(fn)
  (let ((old (thing-at-point 'symbol)))
    (funcall fn)
    (unless (evil-visual-state-p)
      (kill-new old)
      (evil-visual-state))
    (evil-ex (concat "'<,'>s/" (if (= 0 (length old)) "" "\\<\\(") old (if (= 0 (length old)) "" "\\)\\>/"))))
  )

(defun evilcvn-change-symbol-in-whole-buffer()
  "mark the region in whole buffer and use string replacing UI in evil-mode
to replace the symbol under cursor"
  (interactive)
  (evilcvn--change-symbol 'mark-whole-buffer)
  )

(defun evilcvn-change-symbol-in-defun ()
  "mark the region in defun (definition of function) and use string replacing UI in evil-mode
to replace the symbol under cursor"
  (interactive)
  (evilcvn--change-symbol 'mark-defun)
  )

;; {{ evil-leader config
(global-evil-leader-mode)
(setq evil-leader/leader ",")
(require-package 'evil-leader)
(require 'evil-leader)

(evil-leader/set-key
  "ae" 'evil-ace-jump-word-mode    ; ,e for Ace Jump (word)
  ;; "al" 'evil-ace-jump-line-mode   ; ,l for Ace Jump (line)
  ;; "ac" 'evil-ace-jump-har-mode   ; ,x for Ace Jump (char)
  ;; "as" 'ack-same
  ;; "ac" 'ack
  ;; "aa" 'ack-find-same-file
  ;; "af" 'ack-find-file
  "bf" 'beginning-of-defun
  "bu" 'backward-up-list
  "bb" '(lambda () (interactive) (switch-to-buffer nil))
  "ef" 'end-of-defun
  "db" 'sdcv-search-pointer ;; in another buffer
  "dt" 'sdcv-search-input+  ;; in tip
  "mf" 'mark-defun
  "em" 'erase-message-buffer
  "eb" 'eval-buffer
  "sd" 'sudo-edit
  "ss" 'evil-surround-region
  "sc" 'shell-command
  "srt" 'sr-speedbar-toggle
  "srr" 'sr-speedbar-refresh-toggle
  "ee" 'eval-expression
  "cx" 'copy-to-x-clipboard
  "cy" 'strip-convert-lines-into-one-big-string
  ;;  "cff" 'current-font-face
  "fl" 'cp-filename-line-number-of-current-buffer
  "fn" 'cp-filename-of-current-buffer
  "fp" 'cp-fullpath-of-current-buffer
  "dj" 'dired-jump    ;; open the dired from current file
  "ff" 'toggle-full-window ;; I use WIN+F in i3
  "tm" 'get-term
  "px" 'paste-from-x-clipboard
  ;; "ci" 'evilnc-comment-or-uncomment-lines
  ;; "cl" 'evilnc-comment-or-uncomment-to-the-line
  ;; "cc" 'evilnc-copy-and-comment-lines
  ;; "cp" 'evilnc-comment-or-uncomment-paragraphs
  "epy" 'emmet-expand-yas
  "epl" 'emmet-expand-line
  "cd" 'evilcvn-change-symbol-in-defun
  "cb" 'evilcvn-change-symbol-in-whole-buffer
  "yy" 'cb-switch-between-controller-and-view
  "tua" 'artbollocks-mode
  "yu" 'cb-get-url-from-controller
  "tt" 'ido-goto-symbol ;; same as my vim hotkey
  "ht" 'helm-etags-select
  "hm" 'helm-bookmarks
  "hb" 'helm-back-to-last-point
                                        ; "hh" 'browse-kill-ring
  "cg" 'helm-ls-git-ls
  "ud" '(lambda ()(interactive) (gud-gdb (concat "gdb --fullname \"" (cppcm-get-exe-path-current-buffer) "\"")))
  "uk" 'gud-kill-yes
  "ur" 'gud-remove
  "ub" 'gud-break
  "uu" 'gud-run
  "up" 'gud-print
  "ue" 'gud-cls
  "un" 'gud-next
  "us" 'gud-step
  "ui" 'gud-stepi
  "uc" 'gud-cont
  "uf" 'gud-finish
  "W" 'save-some-buffers
  "K" 'kill-buffer-and-window ;; "k" is preserved to replace "C-g"
  "it" 'issue-tracker-increment-issue-id-under-cursor
  "ii" 'rimenu-jump
  "lh" 'highlight-symbol-at-point
  "ln" 'highlight-symbol-next
  "lp" 'highlight-symbol-prev
  "lq" 'highlight-symbol-query-replace
  "bm" 'pomodoro-start ;; beat myself
  "im" 'helm-imenu
  ;;"." 'evil-ex
  ;; toggle overview,  @see http://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
  "gn" 'git-timemachine-show-next-revisio
  "gp" 'git-timemachine-show-previous-revision
  "gw" 'git-timemachine-kill-abbreviated-revision
  "ov" '(lambda () (interactive) (set-selective-display (if selective-display nil 1)))
  "or" 'open-readme-in-git-root-directory
  "mq" '(lambda () (interactive) (man (concat "-k " (thing-at-point 'symbol))))
  "mgh" '(lambda () (interactive) (magit-show-commit "HEAD"))
  "gg" '(lambda () (interactive) (w3m-search "g" (thing-at-point 'symbol)))
  "qq" '(lambda () (interactive) (w3m-search "q" (thing-at-point 'symbol)))
  "gss" 'git-gutter:set-start-revision
  "gsh" '(lambda () (interactive) (git-gutter:set-start-revision "HEAD^")
           (message "git-gutter:set-start-revision HEAD^"))
  "gsr" '(lambda () (interactive) (git-gutter:set-start-revision nil)
           (message "git-gutter reset")) ;; reset
  "hr" 'helm-recentf
  "di" 'evilmi-delete-items
  "si" 'evilmi-select-items
  "jb" 'js-beautify
  "jpp" 'jsons-print-path
  "se" 'string-edit-at-point
  "s0" 'delete-window
  "s1" 'delete-other-windows
  "s2" '(lambda () (interactive) (if *emacs23* (split-window-vertically) (split-window-right)))
  "s3" '(lambda () (interactive) (if *emacs23* (split-window-horizontally) (split-window-below)))
  "su" 'winner-undo
  "x0" 'delete-window
  "x1" 'delete-other-windows
  "x2" '(lambda () (interactive) (if *emacs23* (split-window-vertically) (split-window-right)))
  "x3" '(lambda () (interactive) (if *emacs23* (split-window-horizontally) (split-window-below)))
  "xu" 'winner-undo
  "to" 'toggle-web-js-offset
  "cam" 'org-tags-view ;; "C-c a m" search items in org-file-apps by tag
  "cf" 'helm-for-files ;; "C-c f"
  "pf" 'projectile-find-file ;; "C-c p f"
  "sl" 'sort-lines
  "ulr" 'uniquify-all-lines-region
  "ulb" 'uniquify-all-lines-buffer
  "ls" 'package-list-packages
  "lo" 'moz-console-log-var
  "lj" 'moz-load-js-file-and-send-it
  "lk" 'latest-kill-to-clipboard
  "mr" 'moz-console-clear
  "rnr" 'rinari-web-server-restart
  "rnc" 'rinari-find-controller
  "rnv" 'rinari-find-view
  "rna" 'rinari-find-application
  "rnk" 'rinari-rake
  "rnm" 'rinari-find-model
  "rnl" 'rinari-find-log
  "rno" 'rinari-console
  "rnt" 'rinari-find-test
  "rbd" 'robe-doc
  "rbj" 'robe-jump
  "rbr" 'robe-rails-refresh
  "rbs" 'robe-start
  "ws" 'w3mext-hacker-search
  "hsp" 'helm-swoop
  "hst" 'hs-toggle-fold
  "hsa" 'hs-toggle-fold-all
  "hsh" 'hs-hide-block
  "hss" 'hs-show-block
  "hd" 'describe-function
  "hf" 'find-function
  "hk" 'describe-key
  "hv" 'describe-variable
  "gt" 'ggtags-find-tag-dwim
  "gr" 'ggtags-find-reference
  "fb" 'flyspell-buffer
  "fe" 'flyspell-goto-next-error
  "fa" 'flyspell-auto-correct-word
  "pe" 'flymake-goto-prev-error
  "ne" 'flymake-goto-next-error
  "fw" 'ispell-word
  "bc" '(lambda () (interactive) (wxhelp-browse-class-or-api (thing-at-point 'symbol)))
  "ma" 'mc/mark-all-like-this-in-defun
  "mw" 'mc/mark-all-words-like-this-in-defun
  "ms" 'mc/mark-all-symbols-like-this-in-defun
  ;; recommended in html
  "md" 'mc/mark-all-like-this-dwim
  "rw" 'rotate-windows
  "oc" 'occur
  "om" 'toggle-org-or-message-mode
  "ops" 'my-org2blog-post-subtree
  "ut" 'undo-tree-visualize
  "al" 'align-regexp
  "ww" 'save-buffer
  "bk" 'buf-move-up
  "bj" 'buf-move-down
  "bh" 'buf-move-left
  "bl" 'buf-move-right
  "so" 'sos
  "0" 'select-window-0
  "1" 'select-window-1
  "2" 'select-window-2
  "3" 'select-window-3
  "4" 'select-window-4
  "5" 'select-window-5
  "6" 'select-window-6
  "7" 'select-window-7
  "8" 'select-window-8
  "9" 'select-window-9
  "xm" 'smex
  "mx" 'helm-M-x
  "." 'helm-M-x
  "xx" 'er/expand-region
  "xf" 'ido-find-file
  "xb" 'ido-switch-buffer
  "xc" 'save-buffers-kill-terminal
  "xo" 'helm-find-files
  "ri" '(lambda () (interactive) (require 'helm) (yari-helm))
  "vv" 'scroll-other-window
  "vu" '(lambda () (interactive) (scroll-other-window '-))
  "vr" 'vr/replace
  "vq" 'vr/query-replace
  "vm" 'vr/mc-mark
  "rr" 'evil-show-registers
  "js" 'w3mext-search-js-api-mdn
  "je" 'js2-display-error-list
  "te" 'js2-mode-toggle-element
  "tf" 'js2-mode-toggle-hide-functions
  "xh" 'mark-whole-buffer
  "xk" 'ido-kill-buffer
  "xs" 'save-buffer
  "xz" 'suspend-frame
  "xvv" 'vc-next-action
  "xva" 'git-add-current-file
  "xvp" 'git-push-remote-origin
  "xrf" 'git-reset-current-file
  "xvu" 'git-add-option-update
  "xvg" 'vc-annotate
  "xv=" 'git-gutter:popup-hunk
  "ps" 'my-goto-previous-section
  "ns" 'my-goto-next-section
  "pp" 'my-goto-previous-hunk
  "nn" 'my-goto-next-hunk
  "xvs" 'git-gutter:stage-hunk
  "xvr" 'git-gutter:revert-hunk
  "xvl" 'vc-print-g
  )
;; }}

;; change mode-line color by evil state
(lexical-let ((default-color (cons (face-background 'mode-line)
                                   (face-foreground 'mode-line))))
  (add-hook 'post-command-hook
            (lambda ()
              (let ((color (cond ((minibufferp) default-color)
                                 ((evil-insert-state-p) '("#e80000" . "#ffffff"))
                                 ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
                                 ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
                                 (t default-color))))
                (set-face-background 'mode-line (car color))
                (set-face-foreground 'mode-line (cdr color))))))

;; ;; {{ evil-nerd-commenter
;; ;; comment/uncomment lines
(require-package 'evil-nerd-commenter)
(require 'evil-nerd-commenter)
(evilnc-default-hotkeys)
(setq evilnc-hotkey-comment-operator ",,")



;; ;; }}

;; (global-set-key (kbd "M-j") 'forward-paragraph)
;; (global-set-key (kbd "M-k") 'backward-paragraph)
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z") 'undo-tree-undo)
(global-set-key (kbd "C-S-z") 'undo-tree-redo)
(global-set-key (kbd "C-M-r") 'cua-set-rectangle-mark)

(my-define-keys-every-mode "<C-return>" 'sanityinc/newline-at-end-of-line)
(defun sanityinc/previous-newline-at-end-of-line (ARG)
  (interactive "p")
  (move-beginning-of-line 1)
  (newline-and-indent )
  (previous-line)
  )
(my-define-keys-every-mode "<C-S-return>" 'sanityinc/previous-newline-at-end-of-line)

;;(global-set-key (kbd "C-M-z") 'evil-emacs-state)
(evil-set-toggle-key "C-M-z")
(provide 'init-evil)
(global-set-key (kbd "M-e") 'evil-emacs-state)
(evil-set-toggle-key "M-e")
#+END_SRC

** TODO init-org-evil
normal mode 下, 使用方向键调整层级, 并且
#+BEGIN_SRC emacs-lisp

#+END_SRC

* apply keybindings
一共只有 C, M 两个 keys, s 只用在 ui 界面里面.
好的开始吧

变红是怎么回事, 没看清, 好像和 undo 有关系, 另外变黄(按 option+鼠标选)的是什么. 这个在 purcell 基础包里面就有.

*** 移动光标, 移动内容 C, M , arrow                                             :keymap:

C-c, ; 是标题状态切换到 comment  (org-toggle-comment)

| C-hjkl,uo | 移动光标, 删除     |                        |
| C-M-hjkl  | 单词移动, 删除     |                        |
| M-hjkl    | 移动内容           |                        |
| M-S-hjkl  | 移动子树           |                        |
| C-k       | 删除行             |                        |
| C-a,e     | 行首尾, 要重新定义 |                        |
#+begin_src emacs-lisp
(my-define-keys-every-mode "C-a" 'move-beginning-of-line)
(my-define-keys-every-mode "C-e" 'move-end-of-line)

(my-define-keys-every-mode "M-n" 'forward-paragraph)
(my-define-keys-every-mode "M-p" 'backward-paragraph)



;; push buffer 到窗口
(require-package 'buffer-move)
(my-define-keys-every-mode  "<C-S-up>" 'buf-move-up)
(my-define-keys-every-mode  "<C-S-down>" 'buf-move-down)
(my-define-keys-every-mode  "<C-S-left>" 'buf-move-left)
(my-define-keys-every-mode  "<C-S-right>" 'buf-move-right)





(defun lhr/C-d (arg)
  "mark whole and mc/next"
  (interactive "p")
  (if mark-active
      (if (region-active-p)
          (if (< arg 0)
              (let ((cursor (mc/furthest-cursor-after-point)))
                (if cursor
                    (mc/remove-fake-cursor cursor)
                  (error "No cursors to be unmarked")))
            (mc/mark-more-like-this (= arg 0) 'forwards))
        (mc/mark-lines arg 'forwards))
    (mc/maybe-multiple-cursors-mode)
    (er/expand-region arg) )
  )

;;高亮相同的行为, 只在 mc 的时候加框
(remove-hook 'prog-mode-hook 'highlight-symbol-mode)
(remove-hook 'prog-mode-hook 'highlight-symbol-nav-mode)

;; 鼠标选中就复制
(setq mouse-drag-copy-region t)


;;C-d mark word, and select next like this

(my-define-keys-every-mode  "C-o" 'lhr/C-d)
(my-define-keys-every-mode  "C-<" 'mc/mark-previous-like-this)
(my-define-keys-every-mode  "C-c C-<" 'mc/mark-all-like-this)


;;复制行
(my-define-keys-every-mode "C-S-o" 'md/duplicate-down)

;;helm-M-x
;;(my-define-keys-every-mode "M-x" 'helm-M-x)

;;vim 的*#行为, 以及高亮, 绑定在 387 上面
(global-set-key (kbd "C-*") 'highlight-symbol-next)
(global-set-key (kbd "C-#") 'highlight-symbol-prev)
(global-set-key (kbd "C-&") 'highlight-symbol-at-point)


;;C-w
(my-define-keys-every-mode "C-w" 'lhr/C-w)

(defun lhr/C-w ()
  "有 region 的时候 cut region, 没有的时候删除单词, 行首的时候操作整行"
  (interactive)
  (if mark-active
      (whole-line-or-region-kill-region nil)
    (if (bolp)
        (whole-line-or-region-kill-region nil)
      (backward-kill-word 1))
    )
  )

;;(browse-kill-ring-default-keybindings)

(my-define-keys-every-mode "M-y" 'helm-show-kill-ring)



#+end_src

*** 基本功能: 复制粘贴, 撤销, zxcv, 标准行为, 统一键位 !!!
C: 基本操作
C-M: 单词
M: 功能
S: 项目
| C-z ,C-S-z | undo,redo       |                     |
| C-x        | cut             |                     |
| C-c        | copy            |                     |
| C-c        | paste           |                     |
| C-M-x,c    | 单词            |                     |
| C-M-v      | paste 历史      |                     |
|            |                 |                     |
| C-s        | 存盘            |                     |
| C-s        | org-存盘        | (org-edit-src-save) |
|            |                 |                     |
| C-M-s      | 存全部          |                     |
| C-S-s      | 另存为          |                     |
| C-f        | helm-swoop      |                     |
| C-S-f      | 全 buffer 搜索  |                     |
| ag         | 项目内 ag, 搜索 |                     |
| M-f        | find-file       | helm-find           |
| C-M-f      | 项目内 find     | helm-find-proj      |
所有 M-S 的键都有失效
| C-t   | imenu                  |             |
| C-M-t | 项目内 imenu           |             |
| C-S-t | 打开刚关闭的 buffer    |             |
| M-x   | command palette        | helm-M-x    |
| M-z   | last-helm              | helm-resume |
| C-/   | 注释                   |             |
| C-S-/ | 菜单项, 以后探索       |             |
| C-w   | 关闭 buffer            |             |
| C-n   | 新建                   |             |
| C-r   | 运行                   |             |
| C-d   | debug                  |             |
| C-d   | 选择单词, 模拟 sublime | review      |
|       | 多行操作, 复制粘贴     |             |

   - `M-x helm-swoop` when region active
   - `M-x helm-swoop` when the cursor is at any symbol
   - `M-x helm-swoop` when the cursor is not at any symbol
   - `M-3 M-x helm-swoop` or `C-u 5 M-x helm-swoop` multi separated line culling
   - `M-x helm-multi-swoop` multi-occur like feature
   - `M-x helm-multi-swoop-all` apply all buffers
   - `C-u M-x helm-multi-swoop` apply last selected buffers from the second time
   - `M-x helm-swoop-same-face-at-point` list lines have the same face at the cursor is on
   - During isearch `M-i` to hand the word over to helm-swoop
   - During helm-swoop `M-i` to hand the word over to helm-multi-swoop-all
   - While doing `helm-swoop` press `C-c C-e` to edit mode, apply changes to original buffer by `C-x C-s`




#+begin_src emacs-lisp


  ;; zxcv

  ;;需要调整 mode
  (global-set-key (kbd "C-z") 'undo-tree-undo)
  (global-set-key (kbd "C-S-z") 'undo-tree-redo)

  ;;  (my-define-keys-every-mode "H-x" 'whole-line-or-region-kill-region)
  ;;  (my-define-keys-every-mode "H-c" 'whole-line-or-region-kill-ring-save)
  (my-define-keys-every-mode "C-y" 'whole-line-or-region-yank)
  (my-define-keys-every-mode "s-v" 'whole-line-or-region-yank)
  (my-define-keys-every-mode "s-c" 'whole-line-or-region-kill-ring-save)
  ;; cua-scroll-up 原来的 C-v
  ;; cua-scroll-down 原来的 M-v
  ;; 单词 zxcv
  ;;  (global-set-key (kbd "C-M-x") ')

  ;; 存盘
  (my-define-keys-every-mode "C-s" 'save-buffer)
  (define-key org-src-mode-map (kbd "C-s") 'org-edit-src-save )


  ;;helm

  (my-define-keys-every-mode "M-l" 'helm-find)
  (my-define-keys-every-mode "C-M-l" 'helm-projectile)

  (my-define-keys-every-mode "C-t" 'helm-imenu)
  (my-define-keys-every-mode "C-M-t" 'helm-imenu)


;;恢复关闭的 buffer:  http://stackoverflow.com/questions/10394213/emacs-reopen-previous-killed-buffer
  (require 'cl)
  (require 'recentf)

  (defun find-last-killed-file ()
    (interactive)
    (let ((active-files (loop for buf in (buffer-list)
                              when (buffer-file-name buf) collect it)))
      (loop for file in recentf-list
            unless (member file active-files) return (find-file file))))

  (my-define-keys-every-mode "C-S-t" 'find-last-killed-file)


  (my-define-keys-every-mode "M-z" 'helm-resume)

  (my-define-keys-every-mode "s-n" 'scratch)
(windmove-default-keybindings)
  (my-define-keys-every-mode "s-w" 'kill-this-buffer)
  (my-define-keys-every-mode "C-S-w" 'kill-this-buffer)
  (my-define-keys-every-mode "C-x b" 'helm-mini)
  (my-define-keys-every-mode "C-x C-b" 'helmqhelm-mini)


  ;; (my-define-keys-every-mode "M-e" 'sanityinc/eval-last-sexp-or-region)

  (require-package 'unbound)
  ;;(describe-unbound-keys)

  ;;(global-set-key (kbd "C-s") 'save-buffer)

  ;;(bind-key* "<C-return>" 'newline-and-indent)

    ;;;(bind-key* "C-f" 'isearch-forward)

  (my-define-keys-every-mode "C-l" 'helm-swoop)
;;  (my-define-keys-every-mode "C-l" 'helm-occur)
  (my-define-keys-every-mode "C-S-l" 'helm-multi-swoop-all)



      ;;; 每一个 buffer 是独立的进程吗, 看起开是的, 因为每个 buffer 的 mode 都是不一样的, 同一个函数在不同的 buffer 里面有的能执行有的则不能. '
    ;;; translate shift

    ;;; define*

    ;;;

#+end_src


*** 编辑功能: jump, 选择块, 并为 region 加框, 编辑模式插入下一行和上一行, 矩形和多光标 !!
    - State "DOING"      from "DONE"       [2015-02-09 Mon 19:02]
    - State "DONE"       from "WAITING"    [2015-02-09 Mon 19:02]

| C-[ | 后退              |                        |      |   |
| C-] | 前进              |                        |      |   |
|-----+-------------------+------------------------+------+---|
| C-p | 选择段落          |                        |      |   |
|     | 为 region 加 src     |                        |      |   |
|-----+-------------------+------------------------+------+---|
|     | 下面插入一行      |                        |      |   |
|     | 上面插入一行      |                        |      |   |
|-----+-------------------+------------------------+------+---|
|     | 多光标            |                        | need |   |
|     | paredit           |                        |      |   |
|-----+-------------------+------------------------+------+---|
|     | mark 当前单词      | s                      |      |   |
|     | 删除当前单词      | C-M-x                  |      |   |
|     | 删除当前子树      | 查找子树的是什么修饰键 |      |   |
|     | 复制当前子树      |                        |      |   |
|     |                   |                        |      |   |
|     | narrow and widden |                        |      |   |
|     |                   |                        |      |   |


#+begin_src emacs-lisp
;;b = 标记段落


;;global-mark-set and pop 都是 C-S-SPC, 挺好用的, 别纠结了, 换按键吧.

;; 如果没有 reigion C-d mark 单词, 否则, 选择下一个




(if window-system
    (progn (keyboard-translate ?\C-m ?\H-m)
           (define-key key-translation-map (kbd "H-m") (kbd "C-c m")))
  )
(my-define-keys-every-mode "C-c m" 'er/mark-text-paragraph)
(my-define-keys-every-mode "M-a" 'mark-whole-buffer)

;;, . = 翻页



;;  (my-define-keys-every-mode "C-." [next])
;;  (my-define-keys-every-mode "C-," [prior])

;; (global-set-key (kbd "C-m") [next])


#+end_src

*** 界面切换, 管理
| 窗口分割          |                            |                             |                 |
| swap 布局          |                            |                             |                 |
|                   |                            |                             |                 |
| 选择段落          |                            |                             |                 |
| 选择块            |                            |                             |                 |
| 切换 tab          | C-tab, C-S-tab             |                             | org 冲突        |
| 关闭 tab          |                            |                             |                 |
| winner undo       | C-c, left, right           |                             |                 |
| 切换 buffer       | C-x, left, right           |                             |                 |
|                   |                            |                             |                 |
|                   |                            |                             |                 |
| 撤销              | C-/ , C-S-/ ,  u,          |                             |                 |
|                   | C-x, u                     |                             |                 |
| 滚屏              | C-v                        | scroll-up-command           |                 |
| 回滚              |                            |                             |                 |
| 描述函数          | ,hd  , C-h f               | describe-function           |                 |
|                   |                            |                             |                 |
| 描述 key           | ,hk  , C-h k               | describe-key                |                 |
| 回删单词          | C-w                        | evil-delete-backward-word   |                 |
| Cut               | C-w, s-x                   | kill-region                 | yes             |
| 拷贝上一行字符    | C-y                        | evil-copy-from-above        |                 |
|                   |                            |                             |                 |
|                   |                            |                             |                 |
| 标记成 黄色       | M-select                   |                             | review          |
| 段落移动          | M-jk            ,C-up,down | forward-paragraph           | review          |
|                   |                            |                             |                 |
|                   |                            |                             |                 |
| 存盘              | ,ww ,xw  s-s  C-x C-s      | save-buffer                 | done            |
|                   |                            |                             |                 |
|                   | C-s                        | isearch-forward-regexp      |                 |
|                   | s-f                        | isearch-forward             |                 |
|                   |                            |                             |                 |
| copy              | s-c  , 菜单 copy           | ns-copy-including-secondary | yes             |
| paste             | s-v  ,  菜单 paste         | yank                        | yes             |
|                   |                            |                             |                 |
| 翻页              | s-j, C-x C-x               | exchange-point-and-mark     | yes             |
|                   | s-k                        | 切到 normal ,  删除 buffer  | yes  改成翻页吧 |
|                   |                            |                             |                 |
|                   | C-r                        | evil-paste-from-register    | yes             |
|                   |                            |                             |                 |
|                   | C-backspace, M-backspace   | backward-kill-word          | yes             |
|                   | C-S-backspace              | kill-whole-line             |                 |
|                   | C-k                        | kill-line                   |                 |
|                   |                            |                             |                 |
| todo: recent 跳转 | C-[                        | 目前是切换模式, 切到 normal |                 |
|                   | C-]                        | abort-recursive-edit        |                 |
|                   |                            |                             |                 |
| list bookmarks    | f12                        |                             |                 |
|                   |                            |                             |                 |

#+begin_src emacs-lisp


  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

  (winner-mode 1)

  (my-define-keys-every-mode "M-`"  'elscreen-next)

  ;; http://tapoueh.org/emacs/switch-window.html
  (global-set-key (kbd "C-x o") 'switch-window)

  ;; move window
  (require-package 'window-numbering)
  (custom-set-faces '(window-numbering-face ((t (:foreground "DeepPink" :underline "DeepPink" :weight bold)))))
  (window-numbering-mode 1)



  ;; make "C-x o" prompt for a target window when there are more than 2
  (require-package 'switch-window)
  (require 'switch-window)
  (setq switch-window-shortcut-style 'alphabet)
  (global-set-key (kbd "C-x o") 'switch-window)



#+end_src

*** todo:  [5/24]

**** todo orgsubtree 内部搜索

**** TODO org subree 操作
**** TODO C-h,j,l

**** TODO 推 buffer
**** TODO purcell 有个功能是光标移动就自动 reindent, review
**** TODO C-d 无 mark 的时候 mark 单词, 有 mark 的时候就是下一个, 参考 C-w dea
**** TODO 多光标, 见上面

**** TODO 调整
**** TODO s 系按键都不能用
**** TODO 基于 lium 主题调整一些颜色
**** TODO C-i 被解放出来了
**** TODO 新行
**** TODO mark-whole-word C-= expand-region
**** TODO 终端下的颜色, C-H 行为
**** TODO 当前 del 的行为 M-d

**** DONE 研究 lisha 是怎样实现的, 用键盘映射的方式实现 emacs 的快捷键. 可以写个自己的键盘映射文件. neo 其实就是多设置了一个快捷键, 我不要, 我就用 ctrl 一个键就可以了, 多了烦. 自己写一个跨平台的键位映射就行了. 就用 qwerty 吧. 或者 coleman, 或者 workman, 暂时就用 qwerty, 因为它对中文输入和快捷键都很友好.
     CLOSED: [2015-02-02 Mon 23:44]
     - State "DONE"       from "STARTED"    [2015-02-02 Mon 23:44]

**** STARTED 把 sublime 和 emacs 快捷键配成一样的.

**** CANCELLED emacs 快捷键变成 C-b, C-i
     CLOSED: [2015-02-02 Mon 23:45]
     - State "CANCELLED"  from ""           [2015-02-02 Mon 23:45] \\
       恢复 xc 快捷键

**** DONE tmux 快捷键也用 b
     CLOSED: [2015-02-02 Mon 23:45]
     - State "DONE"       from "STARTED"    [2015-02-02 Mon 23:45]

**** TODO lhr.rc

**** 分析 purecell, 比较 commit, 还有就是分析

**** TODO keybinding 可以分离出来单独管理. 如果禁用某个包只需要禁用本身就可以了. 或者用 tag 管理

**** DONE 先用自己的映射实现.
     CLOSED: [2015-02-02 Mon 23:46]
     - State "DONE"       from "STARTED"    [2015-02-02 Mon 23:46]

**** DONE 并不一定是奇异的技巧才是好的, 把快捷键统一起来. 才是最好的. 能有效的工作就好. 把 emacs 该造成 sublime...ok, gou le.
     CLOSED: [2015-02-02 Mon 23:46]
     - State "DONE"       from "STARTED"    [2015-02-02 Mon 23:46]


**** TODO eval-after-load 是覆盖还是添加.

**** C-M-r, sublime 中终端重复执行上一条命令并切回来. sublime 内

**** C-M-c, 复制 python 代码到已有的 iterm 窗口并运行, 全局

*** 补全, python dev
修复 company mode and yasnippets
todo: python ide
elpy anaconda

*** org mode
| 目标           | 快捷键                  | 函数                    | 需修改       | 模式 |
|----------------+-------------------------+-------------------------+--------------+------|
| 编辑           |                         |                         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|
| 插入 标题      | C-enter, M-enter        |                         |              |      |
| 插入 项目      | M-enter                 | M 和项目联系起来         |              |      |
| 切换 todo      | S + 左右                | S 和 todo 或者状态联系起来 |              |      |
| 插入 todo      | C-S-enter               |                         |              |      |
| 删除一项       |                         |                         | review       |      |
|                | C-M-enter               | not defined             | review       |      |
| 剪切子树       | not defined             | org-cut-subtree         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|
|                |                         |                         |              |      |
| swap 行列      | M-arrow, M-hl, C-M-hjkl |                         | 多行需要修正 |      |
| 插入一列,  行  | M-shift+down, right     | shift 插入               |              |      |
|                |                         |                         |              |      |
| 分割行         | M-enter                 |                         |              |      |
| 复制上一行     | S-enter                 | (org-table-copy-down N) |              |      |
|                |                         |                         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|
| 操作           |                         |                         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|
| 表格操作       |                         |                         |              |      |
| 重排表格       | C-c C-c                 |                         |              |      |
| 插入表格       | C-c  竖线               |                         |              |      |
| 插入水平分割线 | C-c -                   |                         |              |      |
| 计算一列之和   | C-c +                   |                         |              |      |
| 排序           | C-c ^                   |                         |              |      |
| column formula | C-c =                   |                         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|
| 列表操作       |                         |                         |              |      |
| 转换列表符号   | C-c -                   |                         |              |      |
| 转换为标题     | C-c *                   |                         |              |      |
| 排序           | C-c ^                   |                         |              |      |
|----------------+-------------------------+-------------------------+--------------+------|


*** tabbar (暂停)

撤销关闭的 buffer
即使不显示 tabbar, 也要有能切换 buffer 按键

  (define-key org-mode-map (kbd "C-<tab>") 'tabbar-forward)



#+begin_src emacs-lisp
;;  (define-key org-mode-map (kbd "C-<tab>") 'next-buffer)
;;  (define-key org-mode-map (kbd "C-S-<tab>") 'previous-buffer)
;;  (define-key evil-normal-state-map (kbd "C-<tab>") 'next-buffer)
  (my-define-keys-every-mode "<C-S-tab>" 'previous-buffer); 暂时定义这个按键, 以后再改
  (my-define-keys-every-mode "<C-tab>" 'next-buffer); 暂时定义这个按键, 以后再改

#+end_src




** todo: 配置
***  complile 配置文件.
无所谓, 其实可以不用编译, 实测速度上区别不大, 而且配置文件编译了不方便.
(byte-recompile-directory) 默认只是 recompile, 前面加 C-u, 0, 强制 recompile 整个目录.

*** 编辑功能有点问题:
- mark visible 有问题
- s-c s-v 有问题. 不能整行复制删除了.
- 用 24 版本, 并且 terminal 通用.
- 解决 org comment 的问题, 用 ome 来做吗?  暂时不要.
- 用 purcell 的版本, 它的 terminal 通用, 且能用鼠标, 反向合并
- 滚动的速度的配置, 分离出来. 在 osx-keys 里面
- 升级插件, evil

*** quickrun

*** evil update
*** ropemacs

*** rv regexp visual

*** shell switch

*** smartparens

*** STARTED helm-swoop
    :LOGBOOK:
    :END:

*** helm is good!
*** window and ui
*** ui 设置

#+begin_src emacs-lisp
#+end_src

*** 安装 emacs-mac



* finally
** once
#+begin_src emacs-lisp
(require-package 'gnuplot)
(require-package 'lua-mode)
(require-package 'htmlize)
(require-package 'dsvn)
(when *is-a-mac*
  (require-package 'osx-location))
(require-package 'regex-tool)
#+end_src

** local
*** init-local.el
#+BEGIN_SRC emacs-lisp
#+END_SRC

** server

#+begin_src emacs-lisp
;;----------------------------------------------------------------------------
;; Allow access from emacsclient
;;----------------------------------------------------------------------------
(require 'server)
(unless (server-running-p)
  (server-start))
(require-package 'edit-server)
(edit-server-start)
(require 'edit-server)
#+end_src

** init-locales.el
#+BEGIN_SRC emacs-lisp
(defun sanityinc/utf8-locale-p (v)
  "Return whether locale string V relates to a UTF-8 locale."
  (and v (string-match "UTF-8" v)))

(defun locale-is-utf8-p ()
  "Return t iff the \"locale\" command or environment variables prefer UTF-8."
  (or (sanityinc/utf8-locale-p (and (executable-find "locale") (shell-command-to-string "locale")))
      (sanityinc/utf8-locale-p (getenv "LC_ALL"))
      (sanityinc/utf8-locale-p (getenv "LC_CTYPE"))
      (sanityinc/utf8-locale-p (getenv "LANG"))))

(when (or window-system (locale-is-utf8-p))
  (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
   (set-selection-coding-system 'utf-8))
  (prefer-coding-system 'utf-8))

(provide 'init-locales)
#+END_SRC

** finally
#+begin_src emacs-lisp

;;==========================================================
;;========= finally  ================


;;;;  (setq idle-require-idle-delay 3)
;;;;  (setq idle-require-symbols '(init-writting
;;;;                               init-elnode
;;;;                               init-doxygen
;;;;                               init-pomodoro
;;;;                               init-emacspeak
;;;;                               init-artbollocks-mode
;;;;                               init-emacs-w3m
;;;;                               init-semantic))
;;;;  (idle-require-mode 1) ;; starts loading




;;----------------------------------------------------------------------------
;; Variables configured via the interactive 'customize' interface
;;----------------------------------------------------------------------------
;;(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;;(when (file-exists-p custom-file)
;;  (load custom-file))


;;----------------------------------------------------------------------------
;; Allow users to provide an optional "init-local" containing personal settings
;;----------------------------------------------------------------------------
(when (file-exists-p (expand-file-name "init-local.el" user-emacs-directory))
  (error "Please move init-local.el to ~/.emacs.d/lisp"))
(require 'init-local nil t)


;;----------------------------------------------------------------------------
;; Locales (setting them earlier in this file doesn't work in X)
;;----------------------------------------------------------------------------

(add-hook 'after-init-hook
          (lambda ()
            (message "init completed in %.2fms"
                     (sanityinc/time-subtract-millis after-init-time before-init-time))))


(provide 'init)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:

;;;; (put 'erase-buffer 'disabled nil)


#+end_src




#:properties:
#:comments:  both
#:tangle: yes
#:end:

快速插入 title 的命令
看文章的过程中就记得记笔记, 或者即使回顾记笔记. 不要偷懒, 不然白看.
http://eschulte.github.io/babel-dev/DONE-tangle-entire-org-mode-file-in-comments.html

* other
** 编辑器的属性
编辑器需要的属性:
** use-package example
#+begin_src emacs-lisp  :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :commands yas-global-mode
  :init
  (progn
    (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
    (setq yas-key-syntaxes '("w_" "w_." "^ "))
    (setq yas-installed-snippets-dir "~/elisp/yasnippet-snippets")
    (setq yas-expand-only-for-last-commands '(self-insert-command))
    (yas-global-mode 1))
  :config
  (bind-key "\t" 'hippie-expand yas-minor-mode-map)
  (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt))
;;        (global-set-key (kbd "C-c y") (lambda () (interactive)
;;                                         (yas/load-directory "~/elisp/snippets")))
#+end_src*
** init-misc.el
#+BEGIN_SRC emacs-lisp :tangle no
;;----------------------------------------------------------------------------
;; Some basic preferences
;;----------------------------------------------------------------------------

;;准备分割.

(setq-default
 buffers-menu-max-size 30
 case-fold-search t
 compilation-scroll-output t
 ediff-split-window-function 'split-window-horizontally
 ediff-window-setup-function 'ediff-setup-windows-plain
 grep-highlight-matches t
 grep-scroll-output t
 indent-tabs-mode nil
 line-spacing 1
 mouse-yank-at-point t
 set-mark-command-repeat-pop t
 tooltip-delay 1.5
 truncate-lines nil
 truncate-partial-width-windows nil
 ;; no annoying beep on errors
 visible-bell t)

;; use my own bmk if it exists
(if (file-exists-p (file-truename "~/.emacs.bmk"))
    (setq bookmark-default-file (file-truename "~/.emacs.bmk")))

(global-auto-revert-mode)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)

;; @see http://www.quora.com/Whats-the-best-way-to-edit-remote-files-from-Emacs
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory "~/.backups/tramp/")
(setq tramp-chunksize 8192)

;; But don't show trailing whitespace in SQLi, inf-ruby etc.
(add-hook 'comint-mode-hook
          (lambda () (setq show-trailing-whitespace nil)))

(transient-mark-mode t)

(define-key global-map (kbd "RET") 'newline-and-indent)

(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
(autoload 'csv-mode "csv-mode" "Major mode for comma-separated value files." t)

(autoload 'find-by-pinyin-dired "find-by-pinyin-dired" "" t)

;;----------------------------------------------------------------------------
;; Don't disable narrowing commands
;;----------------------------------------------------------------------------
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;;----------------------------------------------------------------------------
;; Show matching parens
;;----------------------------------------------------------------------------
(paren-activate)     ; activating mic-paren

;;----------------------------------------------------------------------------
;; Fix per-window memory of buffer point positions
;;----------------------------------------------------------------------------
(global-pointback-mode)

;;----------------------------------------------------------------------------
;; Handy key bindings
;;----------------------------------------------------------------------------
;; To be able to M-x without meta
(global-set-key (kbd "C-x C-m") 'execute-extended-command)

(global-set-key (kbd "C-.") 'set-mark-command)
(global-set-key (kbd "C-x C-.") 'pop-global-mark)

;;----------------------------------------------------------------------------
;; Page break lines
;;----------------------------------------------------------------------------
(global-page-break-lines-mode)

;;----------------------------------------------------------------------------
;; Shift lines up and down with M-up and M-down
;;----------------------------------------------------------------------------
(move-text-default-bindings)

(defun suspend-mode-during-cua-rect-selection (mode-name)
  "Add an advice to suspend `MODE-NAME' while selecting a CUA rectangle."
  (let ((flagvar (intern (format "%s-was-active-before-cua-rectangle" mode-name)))
        (advice-name (intern (format "suspend-%s" mode-name))))
    (eval-after-load 'cua-rect
      `(progn
         (defvar ,flagvar nil)
         (make-variable-buffer-local ',flagvar)
         (defadvice cua--activate-rectangle (after ,advice-name activate)
           (setq ,flagvar (and (boundp ',mode-name) ,mode-name))
           (when ,flagvar
             (,mode-name 0)))
         (defadvice cua--deactivate-rectangle (after ,advice-name activate)
           (when ,flagvar
             (,mode-name 1)))))))

(eval-after-load 'grep
  '(progn
     (dolist (v '("auto"
                  "target"
                  "node_modules"
                  "bower_components"
                  ".sass_cache"
                  ".cache"
                  ".git"
                  ".cvs"
                  ".svn"
                  ".hg"
                  "elpa"))
       (add-to-list 'grep-find-ignored-directories v))
     ))

(add-hook 'grep-mode-hook (lambda () (toggle-truncate-lines 1)))
;;----------------------------------------------------------------------------
;; Random line sorting
;;----------------------------------------------------------------------------
(defun sort-lines-random (beg end)
  "Sort lines in region randomly."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ;; To make `end-of-line' and etc. to ignore fields.
          ((inhibit-field-text-motion t))
        (sort-subr nil 'forward-line 'end-of-line nil nil
                   (lambda (s1 s2) (eq (random 2) 0)))))))

(add-hook 'prog-mode-hook
          '(lambda ()
             ;; enable for all programming modes
             ;; http://emacsredux.com/blog/2013/04/21/camelcase-aware-editing/
             (subword-mode)
             (if *emacs24* (electric-pair-mode 1))
             ;; eldoc, show API doc in minibuffer echo area
             (turn-on-eldoc-mode)
             ;; show trailing spaces in a programming mod
             (setq show-trailing-whitespace t)))

;; turns on auto-fill-mode, don't use text-mode-hook because for some
;; mode (org-mode for example), this will make the exported document
;; ugly!
;; (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
(add-hook 'change-log-mode-hook 'turn-on-auto-fill)
(add-hook 'cc-mode-hook 'turn-on-auto-fill)
(global-set-key (kbd "C-c q") 'auto-fill-mode)

;; {{ whitespace
;; (require 'whitespace)
;; (setq whitespace-style '(face empty tabs lines-tail trailing))
;; (global-whitespace-mode t)
;; }}

;; some project prefer tab, so be it
;; @see http://stackoverflow.com/questions/69934/set-4-space-indent-in-emacs-in-text-mode
(setq-default tab-width 4)
(defun toggle-indent-tab ()
  (interactive)
  (if indent-tabs-mode
      (progn
        (setq indent-tabs-mode nil))
    (progn
        (setq indent-tabs-mode t)
        (setq indent-line-function 'insert-tab)
      )))
;;----------------------------------------------------------------------------
;; Misc config - yet to be placed in separate files
;;----------------------------------------------------------------------------
;; {{ shell and conf
(add-to-list 'auto-mode-alist '("\\.[^b][^a][a-zA-Z]*rc$" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.aspell\\.en\\.pws\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.meta\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.ctags\\'" . conf-mode))
;; }}

;; java
(add-to-list 'auto-mode-alist '("\\.aj\\'" . java-mode))

(add-to-list 'auto-mode-alist '("archive-contents\\'" . emacs-lisp-mode))
;; makefile
(add-to-list 'auto-mode-alist '("\\.ninja$" . makefile-gmake-mode))

;; midnight mode purges buffers which haven't been displayed in 3 days
(require 'midnight)
(setq midnight-mode t)

(add-auto-mode 'tcl-mode "Portfile\\'")
(fset 'yes-or-no-p 'y-or-n-p)

(column-number-mode 1)

;; NO automatic new line when scrolling down at buffer bottom
(setq next-line-add-newlines nil)

;; @see http://stackoverflow.com/questions/4222183/emacs-how-to-jump-to-function-definition-in-el-file
(global-set-key (kbd "C-h C-f") 'find-function)

;Ctrl-X, u/l  to upper/lowercase regions without confirm
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;; Write backup files to own directory
(if (not (file-exists-p (expand-file-name "~/.backups")))
    (make-directory (expand-file-name "~/.backups"))
    )
(setq
  backup-by-coping t ; don't clobber symlinks
  backup-directory-alist '(("." . "~/.backups"))
  delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t  ;use versioned backups
  )

;; Donot make backups of files, not safe
;; @see https://github.com/joedicastro/dotfiles/tree/master/emacs
(setq vc-make-backup-files nil)

;; Don't disable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

(defun grep-pattern-into-list (regexp)
  (let ((s (buffer-string))
        (pos 0)
        item
        items)
    (while (setq pos (string-match regexp s pos))
      (setq item (match-string-no-properties 0 s))
      (setq pos (+ pos (length item)))
      (if (not (member item items))
          (add-to-list 'items item)
        ))
    items))

(defun grep-pattern-into-kill-ring (regexp)
  "Find all strings matching REGEXP in current buffer.
grab matched string and insert them into kill-ring"
  (interactive
   (let* ((regexp (read-regexp "grep regex:")))
     (list regexp)))
  (let (items rlt)
    (setq items (grep-pattern-into-list regexp))
    (dolist (i items)
      (setq rlt (concat rlt (format "%s\n" i)))
      )
    (kill-new rlt)
    (message "matched strings => kill-ring")
    rlt))

(defvar rimenu-position-pair nil "positions before and after imenu jump")
(add-hook 'imenu-after-jump-hook
          (lambda ()
            (let ((start-point (marker-position (car mark-ring)))
                  (end-point (point)))
              (setq rimenu-position-pair (list start-point end-point)))))

(defun rimenu-jump ()
  "jump to the closest before/after position of latest imenu jump"
  (interactive)
  (when rimenu-position-pair
    (let ((p1 (car rimenu-position-pair))
          (p2 (cadr rimenu-position-pair)))

      ;; jump to the far way point of the rimenu-position-pair
      (if (< (abs (- (point) p1))
             (abs (- (point) p2)))
          (goto-char p2)
          (goto-char p1))
      )))

(defun grep-pattern-jsonize-into-kill-ring (regexp)
  "Find all strings matching REGEXP in current buffer.
grab matched string, jsonize them, and insert into kill ring"
  (interactive
   (let* ((regexp (read-regexp "grep regex:")))
     (list regexp)))
  (let (items rlt)
    (setq items (grep-pattern-into-list regexp))
    (dolist (i items)
      (setq rlt (concat rlt (format "%s : %s ,\n" i i)))
      )
    (kill-new rlt)
    (message "matched strings => json => kill-ring")
    rlt))

(defun open-blog-on-current-month ()
  (interactive)
  (let (blog)
   (setq blog (file-truename (concat "~/blog/" (format-time-string "%Y-%m") ".org")) )
   (find-file blog)))

(defun grep-pattern-cssize-into-kill-ring (regexp)
  "Find all strings matching REGEXP in current buffer.
grab matched string, cssize them, and insert into kill ring"
  (interactive
   (let* ((regexp (read-regexp "grep regex:")))
     (list regexp)))
  (let (items rlt)
    (setq items (grep-pattern-into-list regexp))
    (dolist (i items)
      (setq i (replace-regexp-in-string "\\(class=\\|\"\\)" "" i))
      (setq rlt (concat rlt (format ".%s {\n}\n\n" i))))
    (kill-new rlt)
    (message "matched strings => json => kill-ring")
    rlt))

;; from RobinH, Time management
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time)

(global-set-key [f12] 'list-bookmarks)
(global-set-key (kbd "M-o") 'switch-window)

(when *win32*
  ;; resize frame
  (defun w32-maximize-frame ()
    "Maximize the current frame."
    (interactive)
    (w32-send-sys-command 61488)
    (global-set-key (kbd "C-c z") 'w32-restore-frame))

  (global-set-key (kbd "C-c z") 'w32-maximize-frame)

  (defun w32-restore-frame ()
    "Restore a minimized frame."
    (interactive)
    (w32-send-sys-command 61728)
    (global-set-key (kbd "C-c z") 'w32-maximize-frame))

  )

;; M-x ct ENTER
(defun ct (dir-name)
  "Create tags file."
  (interactive "DDirectory: ")
  (shell-command
   (format "ctags -f %s/TAGS -e -R %s" dir-name (directory-file-name dir-name)))
  )

; @see http://xahlee.blogspot.com/2012/01/emacs-tip-hotkey-for-repeat-complex.html
(global-set-key [f2] 'repeat-complex-command)

;effective emacs item 3
(global-set-key "\C-s" 'isearch-forward-regexp)
(global-set-key "\M-s" 'isearch-backward-regexp)
(global-set-key "\C-\M-s" 'tags-search)
(global-set-key "\C-x\C-n" 'find-file-other-frame) ;open new frame with a file

;;a no-op function to bind to if you want to set a keystroke to null
(defun void () "this is a no-op" (interactive))

;convert a buffer from dos ^M end of lines to unix end of lines
(defun dos2unix ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;vice versa
(defun unix2dos ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\n" nil t) (replace-match "\r\n")))

;show ascii table
(defun ascii-table ()
  "Print the ascii table. Based on a defun by Alex Schroeder <asc@bsiag.com>"
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (insert (format "ASCII characters up to number %d.\n" 254))
  (let ((i 0))
    (while (< i 254)
           (setq i (+ i 1))
           (insert (format "%4d %c\n" i i))))
  (beginning-of-buffer))


;; I'm in Australia now, so I set the locale to "en_AU"
(defun insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%d.%m.%Y")
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%d %B %Y")))
          )
      (insert (format-time-string format))))

(defun insert-blog-version ()
  "insert version of my blog post"
  (interactive)
  (insert (format-time-string "%Y%m%d"))
  )

;;compute the length of the marked region
(defun region-length ()
  "length of a region"
  (interactive)
  (message (format "%d" (- (region-end) (region-beginning)))))

(defalias 'list-buffers 'ibuffer)
;KEYBOARD SECTION
;global keyb maps
(global-set-key "\C-xc" 'clipboard-kill-ring-save)
(global-set-key "\C-cc" 'copy-region-as-kill)

;; @see http://www.emacswiki.org/emacs/BetterRegisters
;; This is used in the function below to make marked points visible
(defface register-marker-face '((t (:background "grey")))
      "Used to mark register positions in a buffer."
      :group 'faces)

;effective emacs item 7; no scrollbar, no menubar, no toolbar
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; effective emacs item 9
(defalias 'qrr 'query-replace-regexp)

(setq-default regex-tool-backend 'perl)

;; {{ work around color theme bug
;; @see https://plus.google.com/106672400078851000780/posts/KhTgscKE8PM
(defun disable-all-themes ()
  "disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes))
;; }}

;;; {{ clipboard stuff
;; Use the system clipboard
(setq x-select-enable-clipboard t)

;; you need install xsel under Linux
;; xclip has some problem when copying under Linux
(defun copy-yank-str (msg &optional clipboard-only)
  (unless clipboard-only (kill-new msg))
  (cond
   ;; display-graphic-p need windows 23.3.1
   ((and (display-graphic-p) x-select-enable-clipboard)
    (x-set-selection 'CLIPBOARD msg))
   (t (with-temp-buffer
        (insert msg)
        (shell-command-on-region (point-min) (point-max)
                                 (cond
                                  ((eq system-type 'cygwin) "putclip")
                                  ((eq system-type 'darwin) "pbcopy")
                                  (t "xsel -ib")
                                  )))
    )))

(defun cp-filename-of-current-buffer ()
  "copy file name (NOT full path) into the yank ring and OS clipboard"
  (interactive)
  (let (filename)
    (when buffer-file-name
      (setq filename (file-name-nondirectory buffer-file-name))
      (copy-yank-str filename)
      (message "filename %s => clipboard & yank ring" filename)
      )))

(defun cp-filename-line-number-of-current-buffer ()
  "copy file:line into the yank ring and clipboard"
  (interactive)
  (let (filename linenum rlt)
    (when buffer-file-name
      (setq filename (file-name-nondirectory buffer-file-name))
      (setq linenum (save-restriction
                      (widen)
                      (save-excursion
                        (beginning-of-line)
                        (1+ (count-lines 1 (point))))))
      (setq rlt (format "%s:%d" filename linenum))
      (copy-yank-str rlt)
      (message "%s => clipboard & yank ring" rlt)
      )))

(defun cp-fullpath-of-current-buffer ()
  "copy full path into the yank ring and OS clipboard"
  (interactive)
  (when buffer-file-name
    (copy-yank-str (file-truename buffer-file-name))
    (message "file full path => clipboard & yank ring")
    ))

(defun copy-to-x-clipboard ()
  (interactive)
  (if (region-active-p)
      (progn
        (cond
         ((and (display-graphic-p) x-select-enable-clipboard)
          (x-set-selection 'CLIPBOARD (buffer-substring (region-beginning) (region-end))))
         (t (shell-command-on-region (region-beginning) (region-end)
                                     (cond
                                      (*cygwin* "putclip")
                                      (*is-a-mac* "pbcopy")
                                      (*linux* "xsel -ib")))
            ))
        (message "Yanked region to clipboard!")
        (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))

(defun get-str-from-x-clipboard ()
  (let (s)
    (cond
     ((and (display-graphic-p) x-select-enable-clipboard)
      (setq s (x-selection 'CLIPBOARD)))
     (t (setq s (shell-command-to-string
                 (cond
                  (*cygwin* "getclip")
                  (*is-a-mac* "pbpaste")
                  (t "xsel -ob"))))
        ))
    s))


(defun paste-from-x-clipboard()
  "Paste string clipboard"
  (interactive)
  (insert (get-str-from-x-clipboard)))

(defun my/paste-in-minibuffer ()
  (local-set-key (kbd "M-y") 'paste-from-x-clipboard)
  )

(add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)

(defun paste-from-clipboard-and-cc-kill-ring ()
  "paste from clipboard and cc the content into kill ring"
  (interactive)
  (let (str)
    (with-temp-buffer
      (paste-from-x-clipboard)
      (setq str (buffer-string)))
    ;; finish the paste
    (insert str)
    ;; cc the content into kill ring at the same time
    (kill-new str)
    ))
;;; }}

(eval-after-load 'speedbar '(if (load "mwheel" t)
                               ;; Enable wheelmouse support by default
                               (cond (window-system
                                       (mwheel-install)))))

; @see http://www.emacswiki.org/emacs/SavePlace
(require 'saveplace)
(setq-default save-place t)

;; {{expand-region.el
;; if emacs-nox, use C-@, else, use C-2;
(if window-system
 (progn
   (define-key global-map (kbd "C-2") 'er/expand-region)
   (define-key global-map (kbd "C-M-2") 'er/contract-region)
   )
 (progn
   (define-key global-map (kbd "C-@") 'er/expand-region)
   (define-key global-map (kbd "C-M-@") 'er/contract-region)
 )
)
;; }}

;;iedit-mode
(global-set-key (kbd "C-c ; i") 'iedit-mode-toggle-on-function)

;;align text
(global-set-key (kbd "C-c C-l") 'align-regexp)

;; my screen is tiny, so I use minimum eshell prompt
(setq eshell-prompt-function
       (lambda ()
         (concat (getenv "USER") " $ ")))

;; max frame, @see https://github.com/rmm5t/maxframe.el
(require 'maxframe)
;; (setq mf-max-width 1600) ;; Pixel width of main monitor. for dual-lcd only
(add-hook 'window-setup-hook 'maximize-frame t)

;; command-frequency
;; (require 'command-frequency)
;; (command-frequency-table-load)
;; (command-frequency-mode 1)
;; (command-frequency-autosave-mode 1)

(defun toggle-env-http-proxy ()
  "set/unset the environment variable http_proxy which w3m uses"
  (interactive)
  (let ((proxy "http://127.0.0.1:8000"))
    (if (string= (getenv "http_proxy") proxy)
        ;; clear the the proxy
        (progn
          (setenv "http_proxy" "")
          (message "env http_proxy is empty now")
          )
      ;; set the proxy
      (setenv "http_proxy" proxy)
      (message "env http_proxy is %s now" proxy)
        )
    ))

(defun strip-convert-lines-into-one-big-string (beg end)
"strip and convert selected lines into one big string which is copied into kill ring.
When transient-mark-mode is enabled, if no region is active then only the
current line is acted upon.

If the region begins or ends in the middle of a line, that entire line is
copied, even if the region is narrowed to the middle of a line.

Current position is preserved."
  (interactive "r")
  (let (str (orig-pos (point-marker)))
  (save-restriction
    (widen)
    (when (and transient-mark-mode (not (use-region-p)))
      (setq beg (line-beginning-position)
            end (line-beginning-position 2)))

    (goto-char beg)
    (setq beg (line-beginning-position))
    (goto-char end)
    (unless (= (point) (line-beginning-position))
      (setq end (line-beginning-position 2)))

    (goto-char beg)
    (setq str (replace-regexp-in-string "[ \t]*\n" "" (replace-regexp-in-string "^[ \t]+" "" (buffer-substring-no-properties beg end))))
    ;; (message "str=%s" str)
    (kill-new str)
    (goto-char orig-pos)))
  )

;; { smarter navigation to the beginning of a line
;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
;; }

(defun open-readme-in-git-root-directory ()
  (interactive)
  (let (filename
        (root-dir (locate-dominating-file (file-name-as-directory (file-name-directory buffer-file-name)) ".git"))
        )
    ;; (message "root-dir=%s" root-dir)
    (and root-dir (file-name-as-directory root-dir))
    (setq filename (concat root-dir "README.org"))
    (if (not (file-exists-p filename))
        (setq filename (concat root-dir "README.md"))
      )
    ;; (message "filename=%s" filename)
    (if (file-exists-p filename)
        (switch-to-buffer (find-file-noselect filename nil nil))
      (message "NO README.org or README.md found!"))
    ))
(global-set-key (kbd "C-c C-q") 'open-readme-in-git-root-directory)

;; from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
(defun vc-rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)))))))

(defun vc-copy-file-and-rename-buffer ()
"copy the current buffer and file it is visiting.
if the old file is under version control, the new file is added into
version control automatically"
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (copy-file filename new-name t)
        (rename-buffer new-name)
        (set-visited-file-name new-name)
        (set-buffer-modified-p nil)
        (when (vc-backend filename)
          (vc-register)
         )))))

;; {{ @see http://emacsredux.com/blog/2013/04/21/edit-files-as-root/
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.
With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

(defadvice ido-find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
;; }}

;; {{ eval and replace anywhere
;; @see http://emacs.wordpress.com/2007/01/17/eval-and-replace-anywhere/
(defun fc-eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
(global-set-key (kbd "C-c e") 'fc-eval-and-replace)

(defun calc-eval-and-insert (&optional start end)
(interactive "r")
(let ((result (calc-eval (buffer-substring-no-properties start end))))
(goto-char (point-at-eol))
(insert " = " result)))

(defun calc-eval-line-and-insert ()
(interactive)
(calc-eval-and-insert (point-at-bol) (point-at-eol)))
(global-set-key (kbd "C-c C-e") 'calc-eval-line-and-insert)
;; }}

;; input open source license
(autoload 'legalese "legalese" "" t)

;; {{ buf-move
(autoload 'buf-move-left "buffer-move" "move buffer" t)
(autoload 'buf-move-right "buffer-move" "move buffer" t)
(autoload 'buf-move-up "buffer-move" "move buffer" t)
(autoload 'buf-move-down "buffer-move" "move buffer" t)
;; }}

;; edit confluence wiki
(autoload 'confluence-edit-mode "confluence-edit" "enable confluence-edit-mode" t)
(add-to-list 'auto-mode-alist '("\\.wiki\\'" . confluence-edit-mode))

;; {{string-edit.el
(autoload 'string-edit-at-point "string-edit" "enable string-edit-mode" t)
;; }}

;; {{ issue-tracker
(global-set-key (kbd "C-c C-t") 'issue-tracker-increment-issue-id-under-cursor)
;; }}

(defun erase-specific-buffer (num buf-name)
  (let ((message-buffer (get-buffer buf-name))
        (old-buffer (current-buffer)))
    (save-excursion
      (if (buffer-live-p message-buffer)
          (progn
            (switch-to-buffer message-buffer)
            (if (not (null num))
                (progn
                  (end-of-buffer)
                  (dotimes (i num)
                    (previous-line))
                  (set-register t (buffer-substring (point) (point-max)))
                  (erase-buffer)
                  (insert (get-register t))
                  (switch-to-buffer old-buffer))
              (progn
                (erase-buffer)
                (switch-to-buffer old-buffer))))
        (error "Message buffer doesn't exists!")
        ))))

;; {{ message buffer things
(defun erase-message-buffer (&optional num)
  "Erase the content of the *Messages* buffer in emacs.
    Keep the last num lines if argument num if given."
  (interactive "p")
  (erase-specific-buffer num
                         (cond
                          ((eq 'ruby-mode major-mode) "*server*")
                          (t "*Messages*")
                          )))

;; }}

;; vimrc
(autoload 'vimrc-mode "vimrc-mode")
(add-to-list 'auto-mode-alist '("\\.?vim\\(rc\\)?$" . vimrc-mode))

(autoload 'highlight-symbol-at-point "highlight-symbol" "" t)

;; {{ ack
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)
;; }}

;; {{ show email sent by `git send-email' in gnus
(eval-after-load 'gnus
    '(progn
       (require 'gnus-article-treat-patch)
       (setq gnus-article-patch-conditions
             '( "^@@ -[0-9]+,[0-9]+ \\+[0-9]+,[0-9]+ @@" ))
       ))
;; }}

(defun toggle-full-window()
  "Toggle the full view of selected window"
  (interactive)
  ;; @see http://www.gnu.org/software/emacs/manual/html_node/elisp/Splitting-Windows.html
  (if (window-parent)
      (delete-other-windows)
    (winner-undo)
    ))

;; {{ copy the file-name/full-path in dired buffer into clipboard
;; `w` => copy file name
;; `C-u 0 w` => copy full path
(defadvice dired-copy-filename-as-kill (after dired-filename-to-clipboard activate)
  (with-temp-buffer
    (insert (current-kill 0))
    (shell-command-on-region (point-min) (point-max)
                             (cond
                              ((eq system-type 'cygwin) "putclip")
                              ((eq system-type 'darwin) "pbcopy")
                              (t "xsel -ib")
                              )))
  (message "%s => clipboard" (current-kill 0))
  )

;; }}

(defun insert-file-link-from-clipboard ()
  "Make sure the full path of file exist in clipboard. This command will convert
The full path into relative path insert it as a local file link in org-mode"
  (interactive)
  (let (str)
    (with-temp-buffer
      (paste-from-x-clipboard)
      (setq str (buffer-string)))

    ;; convert to relative path (relative to current buffer) if possible
    (let ((m (string-match (file-name-directory (buffer-file-name)) str) ))
      (when m
        (if (= 0 m )
            (setq str (substring str (length (file-name-directory (buffer-file-name)))))
          )
        )
        (insert (format "[[file:%s]]" str))
      )
    ))

(defun convert-image-to-css-code ()
  "convert a image into css code (base64 encode)"
  (interactive)
  (let (str
        rlt
        (file (read-file-name "The path of image:")))
    (with-temp-buffer
      (shell-command (concat "cat " file "|base64") 1)
      (setq str (replace-regexp-in-string "\n" "" (buffer-string)))
      )
    (setq rlt (concat "background:url(\"data:image/"
                      (car (last (split-string file "\\.")))
                      ";base64,"
                      str
                      "\") no-repeat 0 0;"
                      ))
    (kill-new rlt)
    (copy-yank-str rlt)
    (message "css code => clipboard & yank ring")
    ))

(defun current-font-face ()
  "get the font face under cursor"
  (interactive)
  (let ((rlt (format "%S" (get-text-property (- (point) 1) 'face))))
    (kill-new rlt)
    (copy-yank-str rlt)
    (message "%s => clipboard & yank ring" rlt)
      ))

(defun current-thing-at-point ()
  (interactive)
  (message "thing = %s" (thing-at-point 'symbol)))

(defun add-pwd-into-load-path ()
  "add current directory into load-path, useful for elisp developers"
  (interactive)
  (let ((dir (expand-file-name default-directory)))
    (if (not (memq dir load-path))
        (add-to-list 'load-path dir)
        )
    (message "Directory added into load-path:%s" dir)
    )
  )

;; {{ save history
(setq history-length 8000)
(setq savehist-additional-variables '(search-ring regexp-search-ring kill-ring))
(savehist-mode 1)
;; }}

(setq system-time-locale "C")

;; {{ unique lines
(defun uniquify-all-lines-region (start end)
  "Find duplicate lines in region START to END keeping first occurrence."
  (interactive "*r")
  (save-excursion
    (let ((end (copy-marker end)))
      (while
          (progn
            (goto-char start)
            (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
        (replace-match "\\1\n\\2")))))

(defun uniquify-all-lines-buffer ()
  "Delete duplicate lines in buffer and keep first occurrence."
  (interactive "*")
  (uniquify-all-lines-region (point-min) (point-max)))
;; }}

;; {{start dictionary lookup
;; use below commands to create dicitonary
;; mkdir -p ~/.stardict/dic
;; # wordnet English => English
;; curl http://abloz.com/huzheng/stardict-dic/dict.org/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2 | tar jx -C ~/.stardict/dic
;; # Langdao Chinese => English
;; curl http://abloz.com/huzheng/stardict-dic/zh_CN/stardict-langdao-ec-gb-2.4.2.tar.bz2 | tar jx -C ~/.stardict/dic
;;
(setq sdcv-dictionary-simple-list '("朗道英汉字典 5.0"))
(setq sdcv-dictionary-complete-list '("WordNet"))
(autoload 'sdcv-search-pointer "sdcv" "show word explanation in buffer" t)
(autoload 'sdcv-search-input+ "sdcv" "show word explanation in tooltip" t)
(global-set-key (kbd "C-c ; b") 'sdcv-search-pointer)
(global-set-key (kbd "C-c ; t") 'sdcv-search-input+)
;; }}

;; {{smart-compile: http://www.emacswiki.org/emacs/SmartCompile
(autoload 'smart-compile "smart-compile" "" t)
;; }}

; {{ direx
(autoload 'direx:jump-to-directory "direx" "" t)
(global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)
;; }}

;; {{ support MY packages which are not included in melpa
(autoload 'wxhelp-browse-class-or-api "wxwidgets-help" "" t)
(autoload 'issue-tracker-increment-issue-id-under-cursor "issue-tracker" "" t)
(autoload 'elpamr-create-mirror-for-installed "elpa-mirror" "" t)
(autoload 'org2nikola-export-subtree "org2nikola" "" t)
(autoload 'org2nikola-rerender-published-posts "org2nikola" "" t)
;; }}

(setq web-mode-imenu-regexp-list
  '(("<\\(h[1-9]\\)\\([^>]*\\)>\\([^<]*\\)" 1 3 ">" nil)
    ("^[ \t]*<\\([@a-z]+\\)[^>]*>? *$" 1 " id=\"\\([a-zA-Z0-9_]+\\)\"" "#" ">")
    ("^[ \t]*<\\(@[a-z.]+\\)[^>]*>? *$" 1 " contentId=\"\\([a-zA-Z0-9_]+\\)\"" "=" ">")
    ))

;; {{ imenu
(setq imenu-max-item-length 128)
(setq imenu-max-item-length 64)
;; }}

(defun display-line-number ()
  "display current line number in mini-buffer"
  (interactive)
  (let (l)
    (setq l (line-number-at-pos))
    (message "line number:%d" l)
    ))

(defun toggle-web-js-offset ()
  "toggle js2-basic-offset"
  (interactive)
  (let ((v (if (= js2-basic-offset 2) 4 2)))
    (setq web-mode-indent-style v)
    (setq web-mode-code-indent-offset v)
    (setq web-mode-css-indent-offset v)
    (setq web-mode-markup-indent-offset v)
    (setq js2-basic-offset v)
    (message "web-mode js2-mode indent=%d" v)
    ))

(autoload 'sos "sos" "search stackoverflow" t)

;; increase and decrease font size in GUI emacs
(when (display-graphic-p)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  )

;; {{ which-func
(autoload 'which-function "which-func")
(autoload 'popup-tip "popup")
(defun popup-which-function ()
  (interactive)
  (let ((msg (which-function)))
    (popup-tip msg)
    (copy-yank-str msg)
    ))
;; }}

(defun latest-kill-to-clipboard ()
  (interactive)
  (copy-yank-str (current-kill 1) t))

(autoload 'vr/replace "visual-regexp")
(autoload 'vr/query-replace "visual-regexp")
;; if you use multiple-cursors, this is for you:
(autoload 'vr/mc-mark "visual-regexp")

;; @see http://www.emacswiki.org/emacs/EasyPG#toc4
;; besides, use gnupg 1.4.9 instead of 2.0
(defadvice epg--start (around advice-epg-disable-agent disable)
  "Make epg--start not able to find a gpg-agent"
  (let ((agent (getenv "GPG_AGENT_INFO")))
    (setenv "GPG_AGENT_INFO" nil)
    ad-do-it
    (setenv "GPG_AGENT_INFO" agent)))

;; {{go-mode
(require 'go-mode-load)
;; }}

;; someone mentioned that blink cursor could slow Emacs24.4
;; I couldn't care less about cursor, so turn it off explicitly
;; https://github.com/redguardtoo/emacs.d/issues/208
;; but somebody mentioned that blink cursor is needed in dark theme
;; so it should not be turned off by default
;; (blink-cursor-mode -1)

;; https://github.com/browse-kill-ring/browse-kill-ring
(require 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

;; @see http://emacs.stackexchange.com/questions/3322/python-auto-indent-problem/3338#3338
(if (fboundp 'electric-indent-mode) (electric-indent-mode -1))

(provide 'init-misc)

#+END_SRC

* todo & memo
- chinese settings
- M-x clone-indirect-buffer-other-window <RET>
- M x check-parens
